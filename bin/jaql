#!/bin/sh
# 
# The jaql command script (derived from bin/hadoop)
#
# Environment Variables
#
#   JAVA_HOME        The java implementation to use.  Overrides JAVA_HOME.
#
#   HADOOP_CLASSPATH Extra Java CLASSPATH entries.
#
#   HADOOP_HEAPSIZE  The maximum amount of heap to use, in MB. 
#                    Default is 1000.
#
#   HADOOP_OPTS      Extra Java runtime options.
#
#   HADOOP_CONF_DIR  Alternate conf dir. Default is ${HADOOP_HOME}/conf.
#
#   HADOOP_ROOT_LOGGER The root appender. Default is INFO,console
#
#
#
# IF SUCCESSFUL, THIS SCRIPT MUST NOT OUTPUT ANYTHING TO STDOUT EXCEPT WHAT
# IS OUTPUTTED BY THE CALL TO JAVA AT THE VERY BOTTOM.


if [ "$DFLT_HADOOP_VERSION" = "" ]; then
	DFLT_HADOOP_VERSION=0.18.3
fi
if [ "$DFLT_HBASE_VERSION" = "" ]; then
 DFLT_HBASE_VERSION=0.18.3
fi

if [ "$JAQL_HOME" = "" ]; then
	echo "Error, JAQL_HOME must be set"
	exit 1
fi

if [ "$HADOOP_HOME" = "" ]; then
	HADOOP_HOME=${JAQL_HOME}/vendor/hadoop/${DFLT_HADOOP_VERSION}
fi

if [ "$HADOOP_CONF_DIR" = "" ]; then
	HADOOP_CONF_DIR=${HADOOP_HOME}/conf
fi

if [ "$HBASE_HOME" = "" ]; then
	HBASE_HOME=${JAQL_HOME}/vendor/hbase/${DFLT_HBASE_VERSION}
fi

HADOOP_OVERRIDE=$$_hadoop-override
HADOOP_CONF_OVERRIDE_DIR=/tmp/$HADOOP_OVERRIDE

cygwin=false
case "`uname`" in
CYGWIN*) cygwin=true;;
esac

if [ -f "${HADOOP_CONF_DIR}/hadoop-env.sh" ]; then
  . "${HADOOP_CONF_DIR}/hadoop-env.sh"
fi

if [ ! -e ${HADOOP_CONF_OVERRIDE_DIR} ]; then
  mkdir ${HADOOP_CONF_OVERRIDE_DIR}
else
  rm -f ${HADOOP_CONF_OVERRIDE_DIR}/*
fi

JAQL_CONF_DIR=${JAQL_HOME}/conf

HBASE_CONF_DIR=${HBASE_HOME}/conf

# some Java parameters
if [ "$JAVA_HOME" != "" ]; then
  #echo "run java in $JAVA_HOME"
  JAVA_HOME=$JAVA_HOME
fi
  
if [ "$JAVA_HOME" = "" ]; then
  echo "Error: JAVA_HOME is not set."
  exit 1
fi

JAVA=$JAVA_HOME/bin/java
if $cygwin; then
  JAVA=`cygpath "$JAVA"`
fi
JAVA_HEAP_MAX=-Xmx1000m 

# check envvars which might override default args
if [ "$HADOOP_HEAPSIZE" != "" ]; then
  #echo "run with heapsize $HADOOP_HEAPSIZE"
  JAVA_HEAP_MAX="-Xmx""$HADOOP_HEAPSIZE""m"
  #echo $JAVA_HEAP_MAX
fi

# CLASSPATH initially contains $HADOOP_CONF_DIR
CLASSPATH="${HADOOP_CONF_OVERRIDE_DIR}:${JAQL_CONF_DIR}:${HADOOP_CONF_DIR}:${HBASE_CONF_DIR}"
CLASSPATH=${CLASSPATH}:$JAVA_HOME/lib/tools.jar

if [ -d "$HADOOP_HOME/webapps" ]; then
  CLASSPATH=${CLASSPATH}:$HADOOP_HOME
fi
if [ -d "$HADOOP_HOME/src/webapps" ]; then
  CLASSPATH=${CLASSPATH}:$HADOOP_HOME/src
fi

if [ -d "$HBASE_HOME/src/webapps" ]; then
	 CLASSPATH=${CLASSPATH}:$HBASE_HOME/src
fi

if [ -e "${JAQL_HOME}/jaql.jar" ]; then
  CLASSPATH=${CLASSPATH}:${JAQL_HOME}/jaql.jar
else
  if [ -e "${JAQL_HOME}/build/jaql.jar" ]; then
    CLASSPATH=${CLASSPATH}:${JAQL_HOME}/build/jaql.jar
  else
    echo "Error, jaql.jar not found"
	   exit 1
	 fi
fi

# for developers, add Hadoop classes to CLASSPATH
if [ -d "$HADOOP_HOME/build/classes" ]; then
  CLASSPATH=${CLASSPATH}:$HADOOP_HOME/build/classes
fi
if [ -d "$HADOOP_HOME/build/webapps" ]; then
  CLASSPATH=${CLASSPATH}:$HADOOP_HOME/build
fi
if [ -d "$HBASE_HOME/webapps" ]; then
  CLASSPATH=${CLASSPATH}:$HBASE_HOME
fi
if [ -d "$HADOOP_HOME/build/test/classes" ]; then
  CLASSPATH=${CLASSPATH}:$HADOOP_HOME/build/test/classes
fi
if [ -d "$HADOOP_HOME/build/examples" ]; then
  CLASSPATH=${CLASSPATH}:$HADOOP_HOME/build/examples
fi

# so that filenames w/ spaces are handled correctly in loops below
IFS=

# for releases, add core hadoop jar & webapps to CLASSPATH
for f in $JAQL_HOME/lib/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done
for f in $HADOOP_HOME/hadoop-*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done
for f in $HADOOP_HOME/contrib/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done
for f in $HBASE_HOME/hbase-*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

# add hbase
if [ -d "$HADOOP_HOME/build/contrib/hbase/classes" ]; then
  CLASSPATH=${CLASSPATH}:$HADOOP_HOME/build/contrib/hbase/classes
fi

if [ -d "$HADOOP_HOME/build/contrib/hbase/test" ]; then
  CLASSPATH=${CLASSPATH}:$HADOOP_HOME/build/contrib/hbase/test
fi

if [ -d "$HBASE_HOME/build/classes" ]; then
  CLASSPATH=${CLASSPATH}:$HBASE_HOME/build/classes
fi

if [ -d "$HBASE_HOME/build/test/classes" ]; then
  CLASSPATH=${CLASSPATH}:$HBASE_HOME/build/test/classes
fi

# add libs to CLASSPATH
for f in $HADOOP_HOME/lib/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

for f in $HADOOP_HOME/lib/jetty-ext/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

for f in $HBASE_HOME/lib/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

for f in $HBASE_HOME/lib/jetty-ext/*.jar; do
  CLASSPATH=${CLASSPATH}:$f;
done

if [ -d "$HADOOP_HOME/lib/jsp-2.1" ]; then
  for f in $HADOOP_HOME/lib/jsp-2.1/*.jar; do
    CLASSPATH=${CLASSPATH}:$f;
  done
fi

# add hadoop user-specified CLASSPATH
if [ "$HADOOP_CLASSPATH" != "" ]; then
  CLASSPATH=${CLASSPATH}:${HADOOP_CLASSPATH}
fi

# add jaql user-specified CLASSPATH
if [ "$JAQL_CLASSPATH" != "" ]; then
  CLASSPATH=${CLASSPATH}:${JAQL_CLASSPATH}
fi

# add jaqlshell user-specified CLASSPATH
if [ "$JAQLSHELL_CLASSPATH" != "" ]; then
  CLASSPATH=${CLASSPATH}:${JAQLSHELL_CLASSPATH}
fi

# default log directory & file
if [ "$HADOOP_LOG_DIR" = "" ]; then
  HADOOP_LOG_DIR="$HADOOP_HOME/logs"
fi
if [ "$HADOOP_LOGFILE" = "" ]; then
  HADOOP_LOGFILE='hadoop.log'
fi

# cygwin path translation
if $cygwin; then
  CLASSPATH=`cygpath -p -w "$CLASSPATH"`
  HADOOP_HOME=`cygpath -d "$HADOOP_HOME"`
  HADOOP_CONF_DIR=`cygpath -d "$HADOOP_CONF_DIR"`
  HADOOP_CONF_OVERRIDE_DIR=`cygpath -d "$HADOOP_CONF_OVERRIDE_DIR"`
  HADOOP_LOG_DIR=`cygpath -d "$HADOOP_LOG_DIR"`
fi
# setup 'java.library.path' for native-hadoop code if necessary
JAVA_LIBRARY_PATH=''
if [ -d "${HADOOP_HOME}/build/native" -o -d "${HADOOP_HOME}/lib/native" ]; then
  JAVA_PLATFORM=`CLASSPATH=${CLASSPATH} ${JAVA} org.apache.hadoop.util.PlatformName | sed -e "s/ /_/g"`
  
  if [ -d "$HADOOP_HOME/build/native" ]; then
    JAVA_LIBRARY_PATH=${HADOOP_HOME}/build/native/${JAVA_PLATFORM}/lib
  fi
  
  if [ -d "${HADOOP_HOME}/lib/native" ]; then
    if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
      JAVA_LIBRARY_PATH=${JAVA_LIBRARY_PATH}:${HADOOP_HOME}/lib/native/${JAVA_PLATFORM}
    else
      JAVA_LIBRARY_PATH=${HADOOP_HOME}/lib/native/${JAVA_PLATFORM}
    fi
  fi
fi

# cygwin path translation
if $cygwin; then
  JAVA_LIBRARY_PATH=`cygpath -p "$JAVA_LIBRARY_PATH"`
fi
 
# restore ordinary behaviour
unset IFS

CLASS=$1
shift

HADOOP_OPTS="$HADOOP_OPTS -Dhadoop.log.dir=$HADOOP_LOG_DIR"
HADOOP_OPTS="$HADOOP_OPTS -Dhadoop.log.file=$HADOOP_LOGFILE"
HADOOP_OPTS="$HADOOP_OPTS -Dhadoop.home.dir=$HADOOP_HOME"
HADOOP_OPTS="$HADOOP_OPTS -Dhadoop.id.str=$HADOOP_IDENT_STRING"
HADOOP_OPTS="$HADOOP_OPTS -Dhadoop.root.logger=${HADOOP_ROOT_LOGGER:-INFO,DRFA}"
HADOOP_OPTS="$HADOOP_OPTS -Dhadoop.conf.override=${HADOOP_CONF_OVERRIDE_DIR}"
if $cygwin; then
	#HADOOP_OPTS="$HADOOP_OPTS -Djline.terminal=jline.UnixTerminal"
	HADOOP_OPTS="$HADOOP_OPTS -Djline.terminal=jline.UnsupportedTerminal"
fi
if [ "x$JAVA_LIBRARY_PATH" != "x" ]; then
  HADOOP_OPTS="$HADOOP_OPTS -Djava.library.path=$JAVA_LIBRARY_PATH"
fi  

# for debugging (leave commented in SVN)
# echo $CLASSPATH 1>&2

# run it
exec "$JAVA" $JAVA_HEAP_MAX $HADOOP_OPTS -classpath "$CLASSPATH" $CLASS "$@"
