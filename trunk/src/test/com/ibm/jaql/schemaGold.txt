schemaof( [] -> expand);##
schema []


// -- parsing and matching: simple schemata -------------------------------------------------------

$x = schema null;##
"$x"

$x;##
schema null

null instanceof $x;##
true

1 instanceof $x;##
false
   // incompatible

$x = schema any;##
"$x"

$x;##
schema any

null instanceof $x;##
false

1 instanceof $x;##
true


$x = schema any?;##
"$x"

$x;##
schema any?

null instanceof $x;##
true

1 instanceof $x;##
true


$x = schema function;##
"$x"

$x;##
schema function

(fn($) $) instanceof $x;##
true

1 instanceof $x;##
false
  // incompatible


// -- parsing and matching: boolean ---------------------------------------------------------------

$x = schema boolean;##
"$x"

$x;##
schema boolean

true instanceof $x;##
true

false instanceof $x;##
true

1 instanceof $x;##
false
        // incompatible

$x = schema boolean(true);##
"$x"

$x;##
schema boolean(value=true)

true instanceof $x;##
true

false instanceof $x;##
false
    // incompatible

$x = schema boolean(false);##
"$x"

$x;##
schema boolean(value=false)

true instanceof $x;##
false
     // incompatible
false instanceof $x;##
true
 



// -- parsing and matching: long ------------------------------------------------------------------

$x = schema long;##
"$x"

$x;##
schema long

1 instanceof $x;##
true

1.0 instanceof $x;##
true

1.1 instanceof $x;##
false
 // incompatible
1d instanceof $x;##
false
  // incompatible
"a" instanceof $x;##
false
 // incompatible

$x = schema long(5);##
"$x"

$x;##
schema long(min=5)

4 instanceof $x;##
false
  // incompatible
5 instanceof $x;##
true

6 instanceof $x;##
true


$x = schema long(max=5);##
"$x"

$x;##
schema long(max=5)

4 instanceof $x;##
true
  
5 instanceof $x;##
true

6 instanceof $x;##
false
 // incompatible

$x = schema long(-1,1);##
"$x"

$x;##
schema long(min=-1, max=1)

-2 instanceof $x;##
false
 // incompatible
-1 instanceof $x;##
true

0 instanceof $x;##
true

1 instanceof $x;##
true

2 instanceof $x;##
false
 // incompatible

$x = schema long(value=5);##
"$x"

$x;##
schema long(value=5)

4 instanceof $x;##
false
  // incompatible
5 instanceof $x;##
true

6 instanceof $x;##
false
  // incompatible


// TODO: uncomment next line when parser is fixed to accept Long.MIN
// schema long(-9223372036854775808, 9223372036854775807); // should work: long range
schema long(max=9223372036854775808)##
FAILURE
; // must fail: too large argument
schema long(min=-9223372036854775809)##
FAILURE
; // must fail: too large argument
schema long(5,3)##
FAILURE
; // must fail: invalid interval
schema long(5d)##
FAILURE
; // must fail: invalid argument
schema long(5.0);##
schema long(min=5)
 // should be ok
schema long(5.1)##
FAILURE
; // must fail: invalid argument
schema long(5, value=4)##
FAILURE
; // must fail: invalid argument


// -- parsing and matching: double ----------------------------------------------------------------

$x = schema double;##
"$x"

$x;##
schema double

1d instanceof $x;##
true

1 instanceof $x;##
false
   // incompatible
1.0 instanceof $x;##
false
 // incompatible
1.1 instanceof $x;##
false
 // incompatible
"a" instanceof $x;##
false
 // incompatible

$x = schema double(5d);##
"$x"

$x;##
schema double(min=5.0d)

4d instanceof $x;##
false
  // incompatible
5d instanceof $x;##
true

5.001d instanceof $x;##
true


$x = schema double(max=5d);##
"$x"

$x;##
schema double(max=5.0d)

4d instanceof $x;##
true
  
5d instanceof $x;##
true

5.001d instanceof $x;##
false
 // incompatible

$x = schema double(-1d,1d);##
"$x"

$x;##
schema double(min=-1.0d, max=1.0d)

-1.001d instanceof $x;##
false
 // incompatible
-1d instanceof $x;##
true

0d instanceof $x;##
true

1d instanceof $x;##
true

1.001d instanceof $x;##
false
 // incompatible

$x = schema double(value=5d);##
"$x"

$x;##
schema double(value=5.0d)

4.999d instanceof $x;##
false
  // incompatible
5d instanceof $x;##
true

5.001d instanceof $x;##
false
  // incompatible

schema double(5d,3d)##
FAILURE
; // must fail: invalid interval
schema double(5)##
FAILURE
; // must fail: invalid argument
schema double(5.0)##
FAILURE
; // must fail: invalid argument
schema double(5.1)##
FAILURE
; // must fail: invalid argument
schema double(5d, value=4d)##
FAILURE
; // must fail: invalid argument

// -- parsing and matching: decfloat --------------------------------------------------------------

$x = schema decfloat;##
"$x"

$x;##
schema decfloat

1 instanceof $x;##
true
   
1.1 instanceof $x;##
true

1d instanceof $x;##
false
 // incompatible
"a" instanceof $x;##
false
 // incompatible

$x = schema decfloat(5);##
"$x"

$x;##
schema decfloat(min=5)

4 instanceof $x;##
false
  // incompatible
5 instanceof $x;##
true

5.001 instanceof $x;##
true


$x = schema decfloat(max=5);##
"$x"

$x;##
schema decfloat(max=5)

4 instanceof $x;##
true
  
5 instanceof $x;##
true

5.001 instanceof $x;##
false
 // incompatible

$x = schema decfloat(-1,1);##
"$x"

$x;##
schema decfloat(min=-1, max=1)

-1.001 instanceof $x;##
false
 // incompatible
-1 instanceof $x;##
true

0 instanceof $x;##
true

1 instanceof $x;##
true

1.001 instanceof $x;##
false
 // incompatible

$x = schema decfloat(value=5);##
"$x"

$x;##
schema decfloat(value=5)

4.999 instanceof $x;##
false
  // incompatible
5 instanceof $x;##
true

5.001 instanceof $x;##
false
  // incompatible

// TODO: uncomment next line when parser is fixed to accept big decimals
// schema decfloat(-9223372036854775809, 9223372036854775808); // should work (outside long range)
schema decfloat(5,3)##
FAILURE
; // must fail: invalid interval
schema decfloat(5d)##
FAILURE
; // must fail: invalid argument
schema decfloat(5, value=4d)##
FAILURE
; // must fail: invalid argument


// -- parsing and matching: date ------------------------------------------------------------------

$x = schema date;##
"$x"

$x;##
schema date

date('2000-01-01T12:00:00Z') instanceof $x;##
true

'2000-01-01T12:00:00Z' instanceof $x;##
false
 // incompatible, that's a string

$x = schema date(date('2000-01-01T12:00:00Z'));##
"$x"

$x;##
schema date(min=date('2000-01-01T12:00:00Z'))

date('2000-01-01T11:59:59Z') instanceof $x;##
false
  // incompatible
date('2000-01-01T12:00:00Z') instanceof $x;##
true

date('2000-01-01T12:00:01Z') instanceof $x;##
true


$x = schema date(max=date('2000-01-01T12:00:00Z'));##
"$x"

$x;##
schema date(max=date('2000-01-01T12:00:00Z'))

date('2000-01-01T11:59:59Z') instanceof $x;##
true
  
date('2000-01-01T12:00:00Z') instanceof $x;##
true

date('2000-01-01T12:00:01Z') instanceof $x;##
false
   // incompatible

$x = schema date(date('2000-01-01T12:00:00Z'), date('2000-02-01T12:00:00Z'));##
"$x"

$x;##
schema date(min=date('2000-01-01T12:00:00Z'), max=date('2000-02-01T12:00:00Z'))

date('2000-01-01T11:59:59Z') instanceof $x;##
false
  // incompatible
date('2000-01-01T12:00:00Z') instanceof $x;##
true

date('2000-01-02T13:00:00Z') instanceof $x;##
true

date('2000-02-01T12:00:00Z') instanceof $x;##
true

date('2000-02-01T12:00:01Z') instanceof $x;##
false
   // incompatible

$x = schema date(value=date('2000-01-01T12:00:00Z'));##
"$x"

$x;##
schema date(value=date('2000-01-01T12:00:00Z'))

date('2000-01-01T11:59:59Z') instanceof $x;##
false
   // incompatible
date('2000-01-01T12:00:00Z') instanceof $x;##
true

date('2000-01-01T12:00:01Z') instanceof $x;##
false
   // incompatible

schema date(date('2000-01-01T12:00:00Z'), date('2000-01-01T11:00:00Z'))##
FAILURE
; // must fail: invalid interval
schema date(date('2000-01-01T12:00:00Z'), value=date('2000-01-01T11:00:00Z'))##
FAILURE
; // must fail: invalid argument


// -- parsing and matching: string ----------------------------------------------------------------

$x = schema string;##
"$x"

$x;##
schema string

"1" instanceof $x;##
true

1 instanceof $x;##
false


$x = schema string(5);##
"$x"

$x;##
schema string(minLength=5)

"1234" instanceof $x;##
false
  // incompatible
"12345" instanceof $x;##
true

"123456" instanceof $x;##
true


$x = schema string(maxLength=5);##
"$x"

$x;##
schema string(maxLength=5)

"1234" instanceof $x;##
true

"12345" instanceof $x;##
true

"123456" instanceof $x;##
false
  // incompatible

$x = schema string(4,6);##
"$x"

$x;##
schema string(minLength=4, maxLength=6)

"123" instanceof $x;##
false
  // incompatible
"1234" instanceof $x;##
true

"12345" instanceof $x;##
true

"123456" instanceof $x;##
true

"1234567" instanceof $x;##
false
  // incompatible

schema string(-1)##
FAILURE
; // must fail: invalid interval
schema string(5,3)##
FAILURE
; // must fail: invalid interval

$x = schema string(pattern="ba*b");##
"$x"

$x;##
schema string(pattern="ba*b")

"baaab" instanceof $x;##
true

"babab" instanceof $x;##
false
  // incompatible

$x = schema string(value="ba*b");##
"$x"

$x;##
schema string(value="ba*b")

"ba*b" instanceof $x;##
true

"baaab" instanceof $x;##
false
  // incompatible


schema string(5, pattern="[ab]*");##
schema string(minLength=5, pattern="[ab]*")

schema string(5, 10, pattern="[ab]*");##
schema string(minLength=5, maxLength=10, pattern="[ab]*")

schema string("abc[")##
FAILURE
; // must fail: invalid pattern 


// -- parsing and matching: binary ----------------------------------------------------------------

schema binary;##
schema binary

schema binary(5);##
schema binary(minLength=5)

schema binary(maxLength=5);##
schema binary(maxLength=5)

schema binary(4,6);##
schema binary(minLength=4, maxLength=6)

schema binary(-1)##
FAILURE
; // must fail: invalid interval
schema binary(5,3)##
FAILURE
; // must fail: invalid interval


// -- parsing and matching: arrays ----------------------------------------------------------------

$x = schema [];##
"$x"

$x;##
schema []

[] instanceof $x;##
true

[ null ] instanceof $x;##
false
    // incompatible
1 instanceof $x;##
false
           // incompatible
{} instanceof $x;##
false
          // incompatible

$x = schema [ null ];##
"$x"

$x;##
schema [
         null
       ]

[ null ] instanceof $x;##
true

null instanceof $x;##
false
       // incompatible
[] instanceof $x;##
false
       // incompatible
[ 1 ] instanceof $x;##
false
    // incompatible

$x = schema [ long(0,10), string(pattern="a*"), boolean ];##
"$x"

$x;##
schema [
         long(min=0, max=10),
         string(pattern="a*"),
         boolean
       ]

[ 1, "a", true ] instanceof $x;##
true

[ 1, "a", true, 1 ] instanceof $x;##
false
  // incompatible
[ 11, "a", true ] instanceof $x;##
false
  // incompatible
[ 1, "b", true ] instanceof $x;##
false
   // incompatible
[ 1, "a", null ] instanceof $x;##
false
   // incompatible

$x = schema [ long, boolean<2,3> ];##
"$x"

$x;##
schema [
         long,
         boolean<2,3>
       ]

[ 1, true ] instanceof $x;##
false
 // incompatible
[ 1, true, true ] instanceof $x;##
true

[ 1, true, true, true ] instanceof $x;##
true

[ 1, true, true, true, true ] instanceof $x;##
false
 // incompatible

$x = schema [ long, boolean* ];##
"$x"

$x;##
schema [
         long,
         boolean<0,*>
       ]

[ 1 ] instanceof $x;##
true
 
[ 1, true ] instanceof $x;##
true

[ 1, true, true ] instanceof $x;##
true
  
[ 1, 1 ] instanceof $x;##
false
 // incompatible

$x = schema [ long, boolean+ ];##
"$x"

$x;##
schema [
         long,
         boolean<1,*>
       ]

[ 1 ] instanceof $x;##
false
  // incompatible
[ 1, true ] instanceof $x;##
true

[ 1, true, true ] instanceof $x;##
true
  
[ 1, 1 ] instanceof $x;##
false
 // incompatible

$x = schema [ long, boolean<2,*> ];##
"$x"

$x;##
schema [
         long,
         boolean<2,*>
       ]

[ 1 ] instanceof $x;##
false
  // incompatible
[ 1, true ] instanceof $x;##
false
  // incompatible
[ 1, true, true ] instanceof $x;##
true

[ 1, true, true, true ] instanceof $x;##
true
    
[ 1, 1 ] instanceof $x;##
false
 // incompatible

$x = schema [ long, boolean<*,2> ];##
"$x"

$x;##
schema [
         long,
         boolean<0,2>
       ]

[ 1 ] instanceof $x;##
true
  
[ 1, true ] instanceof $x;##
true
  
[ 1, true, true ] instanceof $x;##
true

[ 1, true, true, true ] instanceof $x;##
false
 // incompatible    
[ 1, 1 ] instanceof $x;##
false
 // incompatible


schema [ null* ];##
schema [
         null<0,*>
       ]

schema [ null+ ];##
schema [
         null<1,*>
       ]

schema [ null<0> ];##
schema []

schema [ null<5> ];##
schema [
         null<5>
       ]

schema [ null<5,10> ];##
schema [
         null<5,10>
       ]

schema [ null<5,*> ];##
schema [
         null<5,*>
       ]

schema [ null<*,5> ];##
schema [
         null<0,5>
       ]

schema [ null<*,*> ];##
schema [
         null<0,*>
       ]

schema [ null<-1> ]##
FAILURE
; // must fail: invalid interval
schema [ null<5,3> ]##
FAILURE
; // must fail: invalid interval

schema [ long(0,10)* ];##
schema [
         long(min=0, max=10)<0,*>
       ]

schema [ long(0,10)+ ];##
schema [
         long(min=0, max=10)<1,*>
       ]

schema [ long(0,10)<0> ];##
schema []

schema [ long(0,10)<5> ];##
schema [
         long(min=0, max=10)<5>
       ]

schema [ long(0,10)<5,10> ];##
schema [
         long(min=0, max=10)<5,10>
       ]

schema [ long(0,10)<5,*> ];##
schema [
         long(min=0, max=10)<5,*>
       ]

schema [ long(0,10)<*,5> ];##
schema [
         long(min=0, max=10)<0,5>
       ]

schema [ long(0,10)<*,*> ];##
schema [
         long(min=0, max=10)<0,*>
       ]

schema [ long(0,10)<-1> ]##
FAILURE
; // must fail: invalid interval
schema [ long(0,10)<5,3> ]##
FAILURE
; // must fail: invalid interval

schema [ long(5,3)##
FAILURE
 ]; // must fail: invalid internal schema


// -- parsing and matching: records ---------------------------------------------------------------

$x = schema {};##
"$x"

$x;##
schema {}

{} instanceof $x;##
true

[] instanceof $x;##
false
               // incompatible
{ a: null } instanceof $x;##
false
      // incompatible
1 instanceof $x;##
false
                // incompatible

$x = schema { a };##
"$x"

$x;##
schema {
         "a": any?
       }

{ a: 1 } instanceof $x;##
true

{ "a": 1 } instanceof $x;##
true

{ } instanceof $x;##
false
              // incompatible
{ a: 1, b: 1 } instanceof $x;##
false
   // incompatible
{ b: 1 } instanceof $x;##
false
         // incompatible

$x = schema { "a" };##
"$x"

$x;##
schema {
         "a": any?
       }

{ a: 1 } instanceof $x;##
true

{ "a": 1 } instanceof $x;##
true

{ } instanceof $x;##
false
              // incompatible
{ b: 1 } instanceof $x;##
false
         // incompatible

$x = schema { a? };##
"$x"

$x;##
schema {
         "a"?: any?
       }

{ } instanceof $x;##
true
 
{ a: 1 } instanceof $x;##
true
 
{ b: 1 } instanceof $x;##
false
         // incompatible

$x = schema { a: long };##
"$x"

$x;##
schema {
         "a": long
       }

{ a: 1 } instanceof $x;##
true

{ a: "1" } instanceof $x;##
false
       // incompatible

$x = schema { a: any };##
"$x"

$x;##
schema {
         "a": any
       }

{ a: 1 } instanceof $x;##
true

{ a: "1" } instanceof $x;##
true


$x = schema { * };##
"$x"

$x;##
schema {
         *: any?
       }

{ } instanceof $x;##
true

{ a: 1 } instanceof $x;##
true

{ a: 1, b: 1 } instanceof $x;##
true


$x = schema { a: long, * };##
"$x"

$x;##
schema {
         "a": long,
         *: any?
       }

{ a: 1 } instanceof $x;##
true

{ a: 1, b: 1 } instanceof $x;##
true

{ b: 1 } instanceof $x;##
false
         // incompatible

$x = schema { a?: long, * };##
"$x"

$x;##
schema {
         "a"?: long,
         *: any?
       }

{ a: 1 } instanceof $x;##
true

{ a: 1, b: 1 } instanceof $x;##
true

{ b: 1 } instanceof $x;##
true

{ a: "1" } instanceof $x;##
false
       // incompatible

$x = schema { a: long, *: long };##
"$x"

$x;##
schema {
         "a": long,
         *: long
       }

{ a: 1 } instanceof $x;##
true

{ a: 1, b: 1 } instanceof $x;##
true

{ a: 1, b: "1" } instanceof $x;##
false
 // incompatible

$x = schema { a?: long, *: string };##
"$x"

$x;##
schema {
         "a"?: long,
         *: string
       }

{ a: 1 } instanceof $x;##
true

{ a: 1, b: "1" } instanceof $x;##
true

{ b: "1" } instanceof $x;##
true

{ a: "1" } instanceof $x;##
false
       // incompatible

// keyword checks
// schema { for }; // does not work currently 
schema { for: any };##
schema {
         "for": any
       }

schema { "for" };##
schema {
         "for": any?
       }

// schema { null }; // does not work currently
schema { null: any };##
schema {
         "null": any
       }
 // treated as "null"

schema { "1" };##
schema {
         "1": any?
       }

schema { 1:##
FAILURE
 any }; // must fail: invalid field name (numbers must be quoted)
schema { *, * }##
FAILURE
; // must fail: wildcard field occurs twice
schema { a, b, c, a, * }##
FAILURE
; // must fail: field name occurs twice


// -- parsing and matching: alternatives ----------------------------------------------------------

$x = schema null?;##
"$x"

$x;##
schema null

null instanceof $x;##
true

1 instanceof $x;##
false
        // incompatible

$x = schema long?;##
"$x"

$x;##
schema long?

null instanceof $x;##
true

1 instanceof $x;##
true
        
"1" instanceof $x;##
false
      // incompatible

$x = schema null | long;##
"$x"

$x;##
schema long?

null instanceof $x;##
true

1 instanceof $x;##
true
        
"1" instanceof $x;##
false
      // incompatible

$x = schema string(pattern="a*") | string(pattern="b*") | long;##
"$x"

$x;##
schema string(pattern="a*") | string(pattern="b*") | long

"aaa" instanceof $x;##
true

"bbb" instanceof $x;##
true

1 instanceof $x;##
true

null instanceof $x;##
false
     // incompatible
"c" instanceof $x;##
false
      // incompatible


$x = schema string(pattern="a*") | string(pattern="b*") | long?;##
"$x"

$x;##
schema string(pattern="a*") | string(pattern="b*") | long | null

"aaa" instanceof $x;##
true

"bbb" instanceof $x;##
true

1 instanceof $x;##
true

null instanceof $x;##
true

"c" instanceof $x;##
false
      // incompatible


//-------------------------- SCHEMAOF -----------------------------

schemaof(null);##
schema null

schemaof(false);##
schema boolean(value=false)

schemaof(1);##
schema long(value=1)

schemaof(1d);##
schema double(value=1.0d)

schemaof(1.0);##
schema decfloat(value=1.0)

schemaof("a string");##
schema string(value="a string")

schemaof(date('2001-07-04T12:08:56Z'));##
schema date(value=date('2001-07-04T12:08:56Z'))

schemaof({ a: 1, b: "2" });##
schema {
         "a": long(value=1),
         "b": string(value="2")
       }

schemaof([ 1, "2" ]);##
schema [
         long(value=1),
         string(value="2")
       ]



// -- schema merging ------------------------------------------------------------------------------

registerFunction('mergeSchemata', 'com.ibm.jaql.udf.MergeSchemataUdf');##
"mergeSchemata"


mergeSchemata(schema binary, schema binary);##
schema binary

mergeSchemata(schema binary(minLength=5,maxLength=10), schema binary);##
schema binary

mergeSchemata(schema binary(minLength=5,maxLength=11), schema binary(minLength=4,maxLength=10));##
schema binary(minLength=4, maxLength=11)


mergeSchemata(schema boolean, schema boolean);##
schema boolean

mergeSchemata(schema boolean, schema boolean(false));##
schema boolean

mergeSchemata(schema boolean, schema boolean(true));##
schema boolean

mergeSchemata(schema boolean(false), schema boolean(true));##
schema boolean

mergeSchemata(schema boolean(false), schema boolean(false));##
schema boolean(value=false)

mergeSchemata(schema boolean(true), schema boolean(true));##
schema boolean(value=true)


mergeSchemata(schema date, schema date);##
schema date

mergeSchemata(schema date, schema date(value=date('2001-07-04T12:08:56Z')));##
schema date

mergeSchemata(schema date(min=date('2001-07-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z')),
              schema date(min=date('2001-08-04T12:08:56Z'), max=date('2002-08-04T12:08:56Z')));##
schema date(min=date('2001-07-04T12:08:56Z'), max=date('2002-08-04T12:08:56Z'))

mergeSchemata(schema date(min=date('2001-07-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z')),
              schema date(min=date('2001-06-04T12:08:56Z'), max=date('2002-06-04T12:08:56Z')));##
schema date(min=date('2001-06-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z'))

mergeSchemata(schema date(min=date('2001-07-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z')),
              schema date(value=date('2001-06-04T12:08:56Z')));##
schema date(min=date('2001-06-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z'))


mergeSchemata(schema decfloat, schema decfloat);##
schema decfloat

mergeSchemata(schema decfloat, schema decfloat(value=1.0));##
schema decfloat

mergeSchemata(schema decfloat(min=1.0, max=5.0),
              schema decfloat(min=2.0, max=6.0));##
schema decfloat(min=1.0, max=6.0)

mergeSchemata(schema decfloat(min=1.0, max=5.0),
              schema decfloat(min=0.0, max=4.0));##
schema decfloat(min=0.0, max=5.0)

mergeSchemata(schema decfloat(min=1.0, max=5.0),
              schema decfloat(value=0.0));##
schema decfloat(min=0.0, max=5.0)


mergeSchemata(schema double, schema double);##
schema double

mergeSchemata(schema double, schema double(value=1.0d));##
schema double

mergeSchemata(schema double(min=1.0d, max=5.0d),
              schema double(min=2.0d, max=6.0d));##
schema double(min=1.0d, max=6.0d)

mergeSchemata(schema double(min=1.0d, max=5.0d),
              schema double(min=0.0d, max=4.0d));##
schema double(min=0.0d, max=5.0d)

mergeSchemata(schema double(min=1.0d, max=5.0d),
              schema double(value=0.0d));##
schema double(min=0.0d, max=5.0d)


mergeSchemata(schema long, schema long);##
schema long

mergeSchemata(schema long, schema long(value=1));##
schema long

mergeSchemata(schema long(min=1, max=5),
              schema long(min=2, max=6));##
schema long(min=1, max=6)

mergeSchemata(schema long(min=1, max=5),
              schema long(min=0, max=4));##
schema long(min=0, max=5)

mergeSchemata(schema long(min=1, max=5),
              schema long(value=0));##
schema long(min=0, max=5)


mergeSchemata(schema null, schema null);##
schema null


mergeSchemata(schema string, schema string);##
schema string

mergeSchemata(schema string(minLength=5,maxLength=10), schema string);##
schema string

mergeSchemata(schema string(minLength=5,maxLength=11), schema string(minLength=4,maxLength=10));##
schema string(minLength=4, maxLength=11)

mergeSchemata(schema string(value="a"), schema string);##
schema string

mergeSchemata(schema string(pattern="a"), schema string);##
schema string


mergeSchemata(schema null, schema string);##
schema string?

mergeSchemata(schema null, schema string|long);##
schema string | long | null

mergeSchemata(schema null, schema string|null);##
schema string?

mergeSchemata(schema long(min=1)|string(maxLength=8)|null, schema date|long(min=2)|string(maxLength=5));##
schema date | long(min=1) | string(maxLength=8) | null


mergeSchemata(schema any, schema any);##
schema any

mergeSchemata(schema any, schema long);##
schema any

mergeSchemata(schema any, schema long|date);##
schema any

mergeSchemata(schema any, schema null);##
schema any?

mergeSchemata(schema any, schema long|null);##
schema any?



mergeSchemata(schema [], schema []);##
schema []

mergeSchemata(schema [ long, boolean, date ], schema [ long, string, null ]);##
schema [
         long,
         boolean | string,
         date?
       ]

mergeSchemata(schema [ long, decfloat ], schema [ long ]);##
schema [
         long,
         decfloat<0,1>
       ]

mergeSchemata(schema [ long, decfloat<2,5> ], schema [ long ]);##
schema [
         long,
         decfloat<0,5>
       ]

mergeSchemata(schema [ long, decfloat<2,5> ], schema [ long, date ]);##
schema [
         long,
         decfloat | date,
         decfloat<0,4>
       ]

mergeSchemata(schema [ long, decfloat<2,5> ], schema [ long, decfloat<4,7> ]);##
schema [
         long,
         decfloat<2,7>
       ]

mergeSchemata(schema [ long, decfloat<2,5> ], schema [ long, date<4,7> ]);##
schema [
         long,
         decfloat | date<2,7>
       ]

mergeSchemata(schema [ long, decfloat<2,5> ], schema [ long, null, date<4,7> ]);##
schema [
         long,
         decfloat?,
         decfloat | date<1,7>
       ]


mergeSchemata(schema {}, schema {});##
schema {}

mergeSchemata(schema { c: null, a: long, b:long }, schema { a:long, b:long, c:null });##
schema {
         "a": long,
         "b": long,
         "c": null
       }

mergeSchemata(schema { a: long, b:long, c:null, e?: date }, schema { a: long, b:string, d:null, e:date });##
schema {
         "a": long,
         "b": long | string,
         "c"?: null,
         "d"?: null,
         "e"?: date
       }

mergeSchemata(schema { a: long, *:date }, schema { a: long });##
schema {
         "a": long,
         *: date
       }

mergeSchemata(schema { a: long, *:date }, schema { a: long, *:null });##
schema {
         "a": long,
         *: date?
       }



// -- path expressions and schemata --------------------------------------------------------------

// records
schemaof ({ a: "yes", b: 0 }.a);##
schema string(value="yes")

schemaof ({ a: "yes", b: 0 }.c);##
schema null

schemaof ({ a: { c: "yes" }, b: 0 }.a.c) ;##
schema string(value="yes")

schemaof ({ a: "yes", b: 0 }{*});##
schema {
         "a": string(value="yes"),
         "b": long(value=0)
       }

schemaof ({ a: "yes", b: 0 }{*-.b});##
schema {
         "a": string(value="yes")
       }

schemaof ({ a: "yes", b: 0, c:2 }{*-.b,.c});##
schema {
         "a": string(value="yes")
       }

schemaof ({ a:"yes", { b: 0, c: 2 }.*});##
schema {
         "a": string(value="yes"),
         "b": long(value=0),
         "c": long(value=2)
       }


// arrays
schemaof ([ "yes", 0, 1][0]);##
schema string(value="yes")

schemaof ([ "yes", 0, 1][1]);##
schema long(value=0)

schemaof ([ "yes", 0, 1][4]);##
schema any?

schemaof ([ "yes", 0, 1][0:1]);##
schema [
         string(value="yes") | long(min=0, max=1)<0,*>
       ]

schemaof ([ "yes", 0, 1][1:*]);##
schema [
         string(value="yes") | long(min=0, max=1)<0,*>
       ]

schemaof ([ "yes", 0, 1][*:1]);##
schema [
         string(value="yes") | long(min=0, max=1)<0,*>
       ]

schemaof ([ "yes", 0, 1][*:*]);##
schema [
         string(value="yes") | long(min=0, max=1)<3>
       ]


// arrays: nulls
schemaof ([ "yes", [ 0 ], 1, null] [?]);##
schema [
         string(value="yes") | [
           long(value=0)
         ] | long(value=1) | null<4>
       ]

schemaof ([ "yes", [ 0 ], 1, [ null ]] [?]);##
schema [
         string(value="yes") | [
           long(value=0)?
         ] | long(value=1)<4>
       ]

schemaof ([ null ] [?]);##
schema [
         null
       ]


// arrays: expanding
schemaof ([ "yes", [ 0 ], 1, null] []);##
schema [
         string(value="yes") | long(value=0) | long(value=1)<0,*>
       ]

schemaof ([ "yes", [ 0 ], 1, [ null ]] []);##
schema [
         string(value="yes") | long(value=0) | null | long(value=1)<0,*>
       ]

schemaof ([ null ] []);##
schema []



// -- transforms ---------------------------------------------------------------------------------

schemaof(null -> transform $);##
schema []

schemaof([]  -> transform $);##
schema []

schemaof([ 1, 2, 3]  -> transform $);##
schema [
         long(min=1, max=3)<0,*>
       ]


// records
schemaof ([{ a: "yes", b: 0 }] -> transform $.a) ;##
schema [
         string(value="yes")<0,*>
       ]

schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform $.a) ;##
schema [
         string(value="yes")?<0,*>
       ]

schemaof ([{ a: "yes", b: 0}] -> transform { $.a });##
schema [
         {
           "a": string(value="yes")
         }<0,*>
       ]

schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform { $.a }) ;##
schema [
         {
           "a"?: string(value="yes")
         }<0,*>
       ]

schemaof ([{ a: "yes", b: 0 }] -> transform { b: $.a }) ;##
schema [
         {
           "b": string(value="yes")
         }<0,*>
       ]

schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform { b: $.a }) ;##
schema [
         {
           "b": string(value="yes")?
         }<0,*>
       ]

schemaof ([{ a: "yes", b: 0}] -> transform ${.a});##
schema [
         {
           "a": string(value="yes")
         }<0,*>
       ]

schemaof ([{ a: "yes", b: 0 }, {b:1} ] -> transform ${.a});##
schema [
         {
           "a"?: string(value="yes")
         }<0,*>
       ]


// records with copying
schemaof ([{ a: "yes", b: 0 }] -> transform { $.* }) ;##
schema [
         {
           "a": string(value="yes"),
           "b": long(value=0)
         }<0,*>
       ]

schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform  { $.* }) ;##
schema [
         {
           "a"?: string(value="yes"),
           "b": long(min=0, max=1)
         }<0,*>
       ]

schemaof ([{ a: "yes", b: 0 }] -> transform { c:1, $.* });##
schema [
         {
           "a": string(value="yes"),
           "b": long(value=0),
           "c": long(value=1)
         }<0,*>
       ]

schemaof ([{ a: "yes", b: 0 }] -> transform ${*});##
schema [
         {
           "a": string(value="yes"),
           "b": long(value=0)
         }<0,*>
       ]

schemaof ([{ a: "yes", b: 0 }] -> transform ${*-.a});##
schema [
         {
           "b": long(value=0)
         }<0,*>
       ]

schemaof ([{ a: "yes", b: 0, c:2 }] -> transform ${*-.a,.c});##
schema [
         {
           "b": long(value=0)
         }<0,*>
       ]


// arrays
schemaof ([ [ 0, "yes" ] ] -> transform $[1]);##
schema [
         string(value="yes")<0,*>
       ]

schemaof ([ [ 0, "yes" ], [ 1 ] ] -> transform $[1]);##
schema [
         string(value="yes")?<0,*>
       ]

schemaof ([ [ true, "a", 1 ] ] -> transform $[0:1]);##
schema [
         [
           boolean(value=true) | string(value="a") | long(value=1)<0,*>
         ]<0,*>
       ]

schemaof ([ [ true, "a", 1 ] ] -> transform $[1:*]);##
schema [
         [
           boolean(value=true) | string(value="a") | long(value=1)<0,*>
         ]<0,*>
       ]

schemaof ([ [ true, "a", 1 ] ] -> transform $[*:1]);##
schema [
         [
           boolean(value=true) | string(value="a") | long(value=1)<0,*>
         ]<0,*>
       ]

schemaof ([ [ true, "a", 1 ] ] -> transform $[*:*]);##
schema [
         [
           boolean(value=true) | string(value="a") | long(value=1)<3>
         ]<0,*>
       ]


// records and arrays
schemaof ([ { a: { a: "no", b: [ {c: "yes"}, 2], c: "no"}, c: "no"}  ] -> transform $.a.b[0]{.a,.c});##
schema [
         {
           "c": string(value="yes")
         }<0,*>
       ]


schemaof([ [ {a: 1 } ] ] -> transform $[*]);##
schema [
         [
           {
             "a": long(value=1)
           }
         ]<0,*>
       ]

schemaof([ [ {a: 1 } ] ] -> transform $[*].a);##
schema [
         [
           long(value=1)
         ]<0,*>
       ]

schemaof([ [ {a: 1 } ] ] -> transform $[*].b);##
schema [
         [
           null
         ]<0,*>
       ]

schemaof([ [ {a: 1 }, {b: 2} ] ] -> transform $[*].a);##
schema [
         [
           long(value=1)?<2>
         ]<0,*>
       ]


schemaof([ [ {a: 1 } ], {a: 2}, null ] -> transform $[?]);##
schema [
         [
           {
             "a": long(min=1, max=2)
           }<0,*>
         ]?<0,*>
       ]

schemaof([ [ {a: 1 } ], {a: 2}, null ] -> transform $[?].a);##
schema [
         [
           long(min=1, max=2)<0,*>
         ]?<0,*>
       ]


schemaof([ [ {a: [1, 2, "a", null] } ], null, 1 ] -> transform $[]);##
schema [
         [
           {
             "a": [
                    long(value=1),
                    long(value=2),
                    string(value="a"),
                    null
                  ]
           } | long(value=1)<0,*>
         ]<0,*>
       ]

schemaof([ [ {a: [1, 2, "a", null] } ], null ] -> transform $[].a);##
schema [
         [
           long(min=1, max=2) | string(value="a") | null<0,*>
         ]<0,*>
       ]



// -- group by-------------------------------------------------------------------------------------

schemaof(null -> group by $k=$ as $ into $);##
schema []

schemaof([] -> group by $k=$ as $ into $);##
schema []

schemaof([ {a: 1, b: "b1"}, {a: 1, b: "b2"} ] -> group by $k=$.a into { key: $k, values: $ });##
schema [
         {
           "key": long(value=1),
           "values": [
                       {
                         "a": long(value=1),
                         "b": string(minLength=2, maxLength=2)
                       }<0,*>
                     ]
         }<0,*>
       ]

schemaof([ {a: 1, b: "b1"}, {a: 2, b: "b2"} ] -> group by $k=$.a into { key: $k, values: $ });##
schema [
         {
           "key": long(min=1, max=2),
           "values": [
                       {
                         "a": long(min=1, max=2),
                         "b": string(minLength=2, maxLength=2)
                       }<0,*>
                     ]
         }<0,*>
       ]

schemaof([ {a: 1, b: "b1"}, {b:"b2"} ] -> group by $k=$.a into { key: $k, values: $ });##
schema [
         {
           "key": long(value=1)?,
           "values": [
                       {
                         "a"?: long(value=1),
                         "b": string(minLength=2, maxLength=2)
                       }<0,*>
                     ]
         }<0,*>
       ]


schemaof(group null by $k=$ as $ into $);##
schema []

schemaof(group []  by $k=$ as $ into $);##
schema []

schemaof(group [ {a: 1, b: "b1"}, {a: 1, b: "b1"} ] by $k=$.a as $g1 into { key: $k, values: $g1 });##
schema [
         {
           "key": long(value=1),
           "values": [
                       {
                         "a": long(value=1),
                         "b": string(value="b1")
                       }<0,*>
                     ]
         }<0,*>
       ]

schemaof(group [ {a: 1, b: "b1"}, {a: 2, b: "b2"} ] by $k=$.a as $g1 into { key: $k, values: $g1 });##
schema [
         {
           "key": long(min=1, max=2),
           "values": [
                       {
                         "a": long(min=1, max=2),
                         "b": string(minLength=2, maxLength=2)
                       }<0,*>
                     ]
         }<0,*>
       ]

schemaof(group [ {a: 1, b: "b1"}, {b: "b1"} ] by $k=$.a as $g1 into { key: $k, values: $g1 });##
schema [
         {
           "key": long(value=1)?,
           "values": [
                       {
                         "a"?: long(value=1),
                         "b": string(value="b1")
                       }<0,*>
                     ]
         }<0,*>
       ]


schemaof(group null by $k=$ as $g1, null by $k=$ as $g2 
         into { key: $k, values1: $g1, values2: $g2 });##
schema []

schemaof(group []  by $k=$ as $g1, []  by $k=$ as $g2 
         into { key: $k, values1: $g1, values2: $g2 });##
schema []

schemaof(group []  by $k=$ as $g1, null  by $k=$ as $g2 
         into { key: $k, values1: $g1, values2: $g2 });##
schema []


schemaof(group null by $k=$ as $g1, [ 1 ] by $k=$ as $g2 
         into { key: $k, values1: $g1, values2: $g2 });##
schema [
         {
           "key": long(value=1),
           "values1": null,
           "values2": [
                        long(value=1)<0,*>
                      ]?
         }<0,*>
       ]

schemaof(group [] by $k=$ as $g1, [ 1 ] by $k=$ as $g2 
         into { key: $k, values1: $g1, values2: $g2 });##
schema [
         {
           "key": long(value=1),
           "values1": null,
           "values2": [
                        long(value=1)<0,*>
                      ]?
         }<0,*>
       ]


schemaof(
  group [ {a: 1, b:"b1"}, {a: 1, b: "b2"} ] by $k=$.a as $g1,
        [ {c: 3, d:"d1"}, {c: 4, b: "bbb"} ] by $k=$.c as $g2
  into { key: $k, values1: $g1, values2: $g2 });##
schema [
         {
           "key": long(min=1, max=4)?,
           "values1": [
                        {
                          "a": long(value=1),
                          "b": string(minLength=2, maxLength=2)
                        }<0,*>
                      ]?,
           "values2": [
                        {
                          "b"?: string(value="bbb"),
                          "c": long(min=3, max=4),
                          "d"?: string(value="d1")
                        }<0,*>
                      ]?
         }<0,*>
       ]



// -- filter/sort/expand --------------------------------------------------------------------------

schemaof( null -> filter $>1);##
schema []

schemaof( [] -> filter $>1);##
schema []

schemaof( [ 1, 2, 3 ] -> filter $>1);##
schema [
         long(min=1, max=3)<0,3>
       ]

schemaof( null -> sort by [$] );##
schema null

schemaof( [] -> sort by [$] );##
schema []

schemaof( [ 2, 1, 3 ] -> sort by [$]);##
schema [
         long(min=1, max=3)<3>
       ]

schemaof( null -> expand);##
schema []

schemaof( [] -> expand);##
schema []

schemaof( [[]] -> expand);##
schema []

schemaof( [[[]]] -> expand);##
schema [
         []<0,*>
       ]

schemaof( [ [1,2], ["a","b"], [true], null ] -> expand);##
schema [
         long(min=1, max=2) | string(minLength=1, maxLength=1) | boolean(value=true)<0,*>
       ]



// -- other expressions --------------------------------------------------------------------------

schemaof(read("anything"));##
schema [
         any?<0,*>
       ]



//-------------------------- QUIT ---------------------------------

quit;