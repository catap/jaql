hdfsShell("-copyFromLocal build/test/cache/data/delimited.del delimited.del") * 0;##
0

hdfsShell("-copyFromLocal build/test/cache/data/delimited-quoted.del delimited-quoted.del") * 0;##
0

hdfsShell("-copyFromLocal build/test/cache/data/delimited-invalid1.del delimited-invalid1.del") * 0;##
0

hdfsShell("-copyFromLocal build/test/cache/data/delimited-invalid2.del delimited-invalid2.del") * 0;##
0

hdfsShell("-copyFromLocal build/test/cache/data/delimited-invalid3.del delimited-invalid3.del") * 0;##
0

hdfsShell("-copyFromLocal build/test/cache/data/lines.txt lines.txt") * 0;##
0

hdfsShell("-copyFromLocal build/test/cache/data/lines-boolean.txt lines-boolean.txt") * 0;##
0

hdfsShell("-copyFromLocal build/test/cache/data/lines-invalid.txt lines-invalid.txt") * 0;##
0

hdfsShell("-copyFromLocal build/test/cache/data/lines-numeric.txt lines-numeric.txt") * 0;##
0

hdfsShell("-copyFromLocal build/test/cache/data/lines-with-null.txt lines-with-null.txt") * 0;##
0


// test readers
$f = "delimited.del";##
"$f"

read(lines($f));##
[
  "HELLO,world,1",
  "hello , world,2",
  "\"hello\",\"world\",3",
  "\"hello\",\"\"\"world\"\"\",4",
  "\"\",\"\"\"\",5",
  "\"\"\"\"\"\",\"\"\"\"\"\"\"\",6",
  "a,a,",
  "a,,",
  ",,",
  "\"A\"\",\",\"1\",1"
]

read(del($f));##
[
  [
    "HELLO",
    "world",
    "1"
  ],
  [
    "hello ",
    " world",
    "2"
  ],
  [
    "hello",
    "world",
    "3"
  ],
  [
    "hello",
    "\"world\"",
    "4"
  ],
  [
    "",
    "\"",
    "5"
  ],
  [
    "\"\"",
    "\"\"\"",
    "6"
  ],
  [
    "a",
    "a",
    null
  ],
  [
    "a",
    null,
    null
  ],
  [
    null,
    null,
    null
  ],
  [
    "A\",",
    "1",
    "1"
  ]
]

read(del($f, { quoted: false }));##
FAILURE
 / ##
FAILURE
should fail
read(del($f, { quoted: null })); // should fail
read(del($f, { delimiter: null }));##
FAILURE
 // should fail

// test field information
read(del($f, { schema: schema { c1, c2, c3 } }));##
[
  {
    "c1": "HELLO",
    "c2": "world",
    "c3": "1"
  },
  {
    "c1": "hello ",
    "c2": " world",
    "c3": "2"
  },
  {
    "c1": "hello",
    "c2": "world",
    "c3": "3"
  },
  {
    "c1": "hello",
    "c2": "\"world\"",
    "c3": "4"
  },
  {
    "c1": "",
    "c2": "\"",
    "c3": "5"
  },
  {
    "c1": "\"\"",
    "c2": "\"\"\"",
    "c3": "6"
  },
  {
    "c1": "a",
    "c2": "a",
    "c3": null
  },
  {
    "c1": "a",
    "c2": null,
    "c3": null
  },
  {
    "c1": null,
    "c2": null,
    "c3": null
  },
  {
    "c1": "A\",",
    "c2": "1",
    "c3": "1"
  }
]

read(del($f, { schema: schema { c3, c1, c2 } }));##
[
  {
    "c1": "world",
    "c2": "1",
    "c3": "HELLO"
  },
  {
    "c1": " world",
    "c2": "2",
    "c3": "hello "
  },
  {
    "c1": "world",
    "c2": "3",
    "c3": "hello"
  },
  {
    "c1": "\"world\"",
    "c2": "4",
    "c3": "hello"
  },
  {
    "c1": "\"",
    "c2": "5",
    "c3": ""
  },
  {
    "c1": "\"\"\"",
    "c2": "6",
    "c3": "\"\""
  },
  {
    "c1": "a",
    "c2": null,
    "c3": "a"
  },
  {
    "c1": null,
    "c2": null,
    "c3": "a"
  },
  {
    "c1": null,
    "c2": null,
    "c3": null
  },
  {
    "c1": "1",
    "c2": "1",
    "c3": "A\","
  }
]


read(del($f, { schema: schema { c1, c2 } }));##
FAILURE
 // should fail
read(del($f, { schema: schema { c1, c2, c3, c4 } }));##
FAILURE
 // should fail

// test quoted delimited file
$f = "delimited-quoted.del";##
"$f"

read(del($f, { quoted: true, escape: true}));##
[
  [
    "this",
    "is",
    "jaql"
  ],
  [
    "\'=\\=\b=\f=\n=\r=\t",
    "\"",
    "A"
  ],
  [
    "\u0000",
    "\u001f",
    "\u007f\u0010~"
  ],
  [
    "\u0080",
    "\u008a",
    "\u008a\u009f"
  ],
  [
    "中",
    "舜雨",
    "国"
  ],
  [
    "a\"\t\u001f舜雨 ",
    "2",
    "3"
  ],
  [
    " a",
    "b ",
    " c "
  ],
  [
    "\"",
    "\"\"",
    "\"\""
  ]
]

read(del($f, { quoted: true, escape: false}));##
[
  [
    "this",
    "is",
    "jaql"
  ],
  [
    "\\\'=\\\\=\\b=\\f=\\n=\\r=\\t",
    "\"\"",
    "A"
  ],
  [
    "\\u0000",
    "\\u001f",
    "\\u007f\\u0010\\u007e"
  ],
  [
    "\\u0080",
    "\\u008a",
    "\\u008a\\u009f"
  ],
  [
    "\\u4E2D",
    "\\u821c\\u96E8",
    "\\u56FD"
  ],
  [
    "a\"\"\\t\\u001f\\u821c\\u96E8 ",
    "2",
    "3"
  ],
  [
    " a",
    "b ",
    " c "
  ],
  [
    "\\\"",
    "\"\"\\\"",
    "\\\"\"\""
  ]
]

read(del($f, { quoted: false }));##
[
  [
    "\"this\"",
    "\"is\"",
    "\"jaql\""
  ],
  [
    "\"\\\'=\\\\=\\b=\\f=\\n=\\r=\\t\"",
    "\"\"\"\"",
    "\"A\""
  ],
  [
    "\"\\u0000\"",
    "\"\\u001f\"",
    "\"\\u007f\\u0010\\u007e\""
  ],
  [
    "\"\\u0080\"",
    "\"\\u008a\"",
    "\"\\u008a\\u009f\""
  ],
  [
    "\"\\u4E2D\"",
    "\"\\u821c\\u96E8\"",
    "\"\\u56FD\""
  ],
  [
    "\"a\"\"\\t\\u001f\\u821c\\u96E8 \"",
    "\"2\"",
    "\"3\""
  ],
  [
    "\" a\"",
    "\"b \"",
    "\" c \""
  ],
  [
    "\"\\\"\"",
    "\"\"\"\\\"\"",
    "\"\\\"\"\"\""
  ]
]


// test invalid files
$f = "delimited-invalid1.del";##
"$f"

read(del($f));##
FAILURE
                      // should fail
read(del($f, { quoted: false }));##
[
  [
    "hello",
    "\"wo",
    "1"
  ]
]
   // should work

$f = "delimited-invalid2.del";##
"$f"

read(del($f));##
FAILURE
                      // should fail
read(del($f, { quoted: false }));##
[
  [
    "hello",
    "\"wo\"\"",
    "1"
  ]
]
   // should work

$f = "delimited-invalid3.del";##
"$f"

read(del($f));##
FAILURE
                      // should fail
read(del($f, { quoted: false }));##
FAILURE
   // should fail

// test conversion of atomic types
convert("1", schema long);##
1

convert("1.123", schema double);##
1.123

convert("1.123", schema decfloat);##
1.123m

convert("abcd", schema string);##
"abcd"

convert("true", schema boolean);##
true

convert("1", schema long?);##
1

convert("1.123", schema double?);##
1.123

convert("1.123", schema decfloat?);##
1.123m

convert("abcd", schema string?);##
"abcd"

convert("true", schema boolean?);##
true

convert(null, schema long?);##
null

convert(null, schema double?);##
null

convert(null, schema decfloat?);##
null

convert(null, schema string?);##
null

convert(null, schema boolean?);##
null

convert(null, schema long);##
FAILURE
 // should fail
convert("1", schema long(0));##
FAILURE
 // should fail (for the moment)

// test conversion of arrays
convert(["a","1"], schema [ string, long ]);##
[
  "a",
  1
]

convert(["a","1"], schema [ string, long ]?);##
[
  "a",
  1
]

convert(null, schema [ string, long ]?);##
null

convert(["a","1"], schema [ string, long? ]);##
[
  "a",
  1
]

convert(["a",null], schema [ string, long? ]);##
[
  "a",
  null
]


convert(["a","1","1"], schema [ string, long ]);##
FAILURE
 // should fail
convert(["a"], schema [ string, long ]);##
FAILURE
 // should fail
convert(["a",1], schema [ string, long ]);##
FAILURE
 // should fail
convert(null, schema [ string, long ]);##
FAILURE
 // should fail


// test conversion of records
convert({a:"a", b:"2"}, schema { a:string, b: long });##
{
  "a": "a",
  "b": 2
}

convert({a:"a", b:"2"}, schema { a:string, b: long }?);##
{
  "a": "a",
  "b": 2
}

convert(null, schema { a:string, b: long }?);##
null

convert({a:"a", b:"2"}, schema { a:string, b: long? });##
{
  "a": "a",
  "b": 2
}

convert({a:"a", b:null}, schema { a:string, b: long? });##
{
  "a": "a",
  "b": null
}


convert({a:"a", b:"2", c:"1"}, schema { a:string, b: long });##
FAILURE
 // should fail
convert({a:"a"}, schema { a:string, b: long });##
FAILURE
 // should fail
convert({a:"a", b:1}, schema { a:string, b: long });##
FAILURE
 // should fail
convert(null, schema { a:string, b: long });##
FAILURE
 // should fail

// all together
read(del("delimited.del", { schema: schema [ string?, string?, long? ] }));##
[
  [
    "HELLO",
    "world",
    1
  ],
  [
    "hello ",
    " world",
    2
  ],
  [
    "hello",
    "world",
    3
  ],
  [
    "hello",
    "\"world\"",
    4
  ],
  [
    "",
    "\"",
    5
  ],
  [
    "\"\"",
    "\"\"\"",
    6
  ],
  [
    "a",
    "a",
    null
  ],
  [
    "a",
    null,
    null
  ],
  [
    null,
    null,
    null
  ],
  [
    "A\",",
    "1",
    1
  ]
]

schemaof(read(del("delimited.del", { schema: schema [ string?, string?, long? ] })));##
schema [
         [
           string?,
           string?,
           long?
         ] * 
       ]


read(del("delimited.del", { schema: schema { c1:string?, c2:string?, c3:long? } }));##
[
  {
    "c1": "HELLO",
    "c2": "world",
    "c3": 1
  },
  {
    "c1": "hello ",
    "c2": " world",
    "c3": 2
  },
  {
    "c1": "hello",
    "c2": "world",
    "c3": 3
  },
  {
    "c1": "hello",
    "c2": "\"world\"",
    "c3": 4
  },
  {
    "c1": "",
    "c2": "\"",
    "c3": 5
  },
  {
    "c1": "\"\"",
    "c2": "\"\"\"",
    "c3": 6
  },
  {
    "c1": "a",
    "c2": "a",
    "c3": null
  },
  {
    "c1": "a",
    "c2": null,
    "c3": null
  },
  {
    "c1": null,
    "c2": null,
    "c3": null
  },
  {
    "c1": "A\",",
    "c2": "1",
    "c3": 1
  }
]

schemaof(read(del("delimited.del", { schema: schema { c1:string?, c2:string?, c3:long? } })));##
schema [
         {
           "c1": string?,
           "c2": string?,
           "c3": long?
         } * 
       ]


read(del("delimited.del", { schema: schema { c2:string?, c1:string?, c3:long? } }));##
[
  {
    "c1": "world",
    "c2": "HELLO",
    "c3": 1
  },
  {
    "c1": " world",
    "c2": "hello ",
    "c3": 2
  },
  {
    "c1": "world",
    "c2": "hello",
    "c3": 3
  },
  {
    "c1": "\"world\"",
    "c2": "hello",
    "c3": 4
  },
  {
    "c1": "\"",
    "c2": "",
    "c3": 5
  },
  {
    "c1": "\"\"\"",
    "c2": "\"\"",
    "c3": 6
  },
  {
    "c1": "a",
    "c2": "a",
    "c3": null
  },
  {
    "c1": null,
    "c2": "a",
    "c3": null
  },
  {
    "c1": null,
    "c2": null,
    "c3": null
  },
  {
    "c1": "1",
    "c2": "A\",",
    "c3": 1
  }
]

schemaof(read(del("delimited.del", { schema: schema { c2:string?, c1:string?, c3:long? } })));##
schema [
         {
           "c2": string?,
           "c1": string?,
           "c3": long?
         } * 
       ]


// Tests for the lines() interface method
$l = "lines.txt";##
"$l"

$lb = "lines-boolean.txt";##
"$lb"

$li = "lines-invalid.txt";##
"$li"

$ln = "lines-numeric.txt";##
"$ln"

$lwn = "lines-with-null.txt";##
"$lwn"


// Test read(lines()) which should return an array of strings. This should succeed for all the files.
read(lines($l));##
[
  "1",
  "2",
  "3.4",
  "4",
  "true",
  "6",
  "Hello",
  "8",
  "World",
  "0.78"
]

read(lines($lb));##
[
  "true",
  "false",
  "false",
  "false",
  "true",
  "true",
  "false"
]

read(lines($li));##
[
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7,8"
]

read(lines($ln));##
[
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9",
  "10",
  "100",
  "1000",
  "10000",
  "100000"
]

read(lines($lwn));##
[
  "1",
  "2",
  "3",
  "4",
  "5",
  null,
  "7",
  null,
  "9",
  "10",
  "100",
  "1000"
]


// Test read(lines()) with the convert option.
read(lines($l,{schema: schema string}));##
[
  "1",
  "2",
  "3.4",
  "4",
  "true",
  "6",
  "Hello",
  "8",
  "World",
  "0.78"
]
 // Test for the default schema.
read(lines($l,{schema: schema long}));##
FAILURE
 // This should fail since the file is mixture of multiple types.
read(lines($li,{schema: schema long}));##
FAILURE
 // This should fail since the file has non-numeric characters.
read(lines($ln,{schema: schema long}));##
[
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  100,
  1000,
  10000,
  100000
]

read(lines($ln,{schema: schema double}));##
[
  1.0,
  2.0,
  3.0,
  4.0,
  5.0,
  6.0,
  7.0,
  8.0,
  9.0,
  10.0,
  100.0,
  1000.0,
  10000.0,
  100000.0
]

read(lines($lb,{schema: schema boolean}));##
[
  true,
  false,
  false,
  false,
  true,
  true,
  false
]

read(lines($lb,{schema: schema long}));##
FAILURE
 // This should fail since the input file contains booleans.
read(lines($lwn,{schema: schema string}));##
FAILURE
 // This should fail since the input file has nulls.
read(lines($lwn,{schema: schema long?}));##
[
  1,
  2,
  3,
  4,
  5,
  null,
  7,
  null,
  9,
  10,
  100,
  1000
]


// Test for invalid arguments to the convert option.
read(lines($l,{schema: schema [long]}));##
FAILURE

read(lines($l,{schema: schema {f1: long}}));##
FAILURE


$out = "tmpout/out-file.txt";##
"$out"


// Test for write(lines()) and checking whether the written files have data in the specified format
[1,2,3,4,5,6,7,8,9,10,100,1000,10000,100000] -> write(lines($out));##
{
  "location": "tmpout/out-file.txt",
  "type": "lines"
}

read(lines($out,{schema: schema long}));##
[
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  100,
  1000,
  10000,
  100000
]

read(lines($out,{schema: schema double}));##
[
  1.0,
  2.0,
  3.0,
  4.0,
  5.0,
  6.0,
  7.0,
  8.0,
  9.0,
  10.0,
  100.0,
  1000.0,
  10000.0,
  100000.0
]


[true,false,false,false,true,true,false] -> write(lines($out));##
{
  "location": "tmpout/out-file.txt",
  "type": "lines"
}

read(lines($out,{schema: schema boolean}));##
[
  true,
  false,
  false,
  false,
  true,
  true,
  false
]


[1,2,3.4,4,true,6,'Hello',8,'World',0.78] -> write(lines($out));##
{
  "location": "tmpout/out-file.txt",
  "type": "lines"
}

read(lines($out));##
[
  "1",
  "2",
  "3.4",
  "4",
  "true",
  "6",
  "Hello",
  "8",
  "World",
  "0.78"
]


[1,2,3,4,null,6] -> write(lines($out));##
{
  "location": "tmpout/out-file.txt",
  "type": "lines"
}

read(lines($out));##
[
  "1",
  "2",
  "3",
  "4",
  null,
  "6"
]

read(lines($out,{schema: schema long?}));##
[
  1,
  2,
  3,
  4,
  null,
  6
]

read(lines($out,{schema: schema long}));##
FAILURE
 // This should fail since the file contains null.

[true, false, null] -> write(lines($out));##
{
  "location": "tmpout/out-file.txt",
  "type": "lines"
}

read(lines($out, {schema: schema boolean?}));##
[
  true,
  false,
  null
]


//-- test jsonToDel --
[[1,2]] -> jsonToDel();##
[
  "1,2"
]

$arrays1 = [[1,2],[3,4]];##
"$arrays1"

$arrays1 -> jsonToDel();##
[
  "1,2",
  "3,4"
]

$arrays2 = [['one','two'],['three','four']];##
"$arrays2"

$arrays2 -> jsonToDel();##
[
  "\"one\",\"two\"",
  "\"three\",\"four\""
]

$arrays3 = [["\"", "\na"]];##
"$arrays3"

$arrays3 -> jsonToDel({escape: true});##
[
  "\"\"\"\",\"\\na\""
]

$arrays3 -> jsonToDel({escape: false});##
[
  "\"\"\",\"\na\""
]

$records = [{name: 'mike', age: 10}, {name: 'john', age: 20}];##
"$records"

$records -> jsonToDel({schema: schema { name, age }});##
[
  "\"mike\",10",
  "\"john\",20"
]

$mixed =  [{name: 'mike', age: 10}, [100, 200]];##
"$mixed"

$mixed -> jsonToDel({schema: schema { name, age }, delimiter: '<=>'});##
[
  "\"mike\"<=>10",
  "100<=>200"
]


//-- testJsonToXml --
{content: 12} -> jsonToXml();##
[
  "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
  "<content>12</content>"
]

{content: {city: "Beijing", no: [1,2,3]}} -> jsonToXml();##
[
  "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
  "<content>",
  "  <city>Beijing</city>",
  "  <no>1</no>",
  "  <no>2</no>",
  "  <no>3</no>",
  "</content>"
]


// json format
[[1,2],[3,4]] -> write({type: 'jsonStream'});##
{
  "type": "jsonStream"
}

[{lang: 'lisp', no: 1},{lang: 'jaql', no: 2}] -> write({type: 'jsonStream'});##
{
  "type": "jsonStream"
}


// del format
[[1,2],[3,4]]->write({type: 'delStream'});##
{
  "type": "delStream"
}

[{lang: 'lisp', no: 1},{lang: 'jaql', no: 2}] -> write({type: 'delStream', outoptions: { schema: schema { lang, no }, delimiter: '='}});##
{
  "outoptions": {
    "delimiter": "=",
    "schema": schema {
             "lang",
             "no"
           }
  },
  "type": "delStream"
}


// xml format
[{root: {content: [1,2,3]}}] -> write({type: 'xmlStream'});##
{
  "type": "xmlStream"
}


// -- Remove all the temporary files created.
hdfsShell("-rm delimited.del") * 0;##
0

hdfsShell("-rm delimited-quoted.del") * 0;##
0

hdfsShell("-rm delimited-invalid1.del") * 0;##
0

hdfsShell("-rm delimited-invalid2.del") * 0;##
0

hdfsShell("-rm delimited-invalid3.del") * 0;##
0

hdfsShell("-rm lines.txt") * 0;##
0

hdfsShell("-rm lines-boolean.txt") * 0;##
0

hdfsShell("-rm lines-invalid.txt") * 0;##
0

hdfsShell("-rm lines-numeric.txt") * 0;##
0

hdfsShell("-rm lines-with-null.txt") * 0;##
0

hdfsShell("-rmr tmpout") * 0;##
0

