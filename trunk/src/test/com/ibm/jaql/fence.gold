
;//------------------- TEST-CASE -----------------
//
// Fence in stream mode
//

//
// 1. simple data

// a. simple function
range(1,100) -> fence( fn(i) i + 1 );

;//--------------------- RESULT ------------------

[
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101
]

;//------------------- TEST-CASE -----------------


range(1,100) -> write(hdfs("foo"));

;//--------------------- RESULT ------------------

{
  "location": "foo",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------


// b. map-reduce
read(hdfs("foo")) -> fence( fn(i) i + 1 );

;//--------------------- RESULT ------------------

[
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101
]

;//------------------- TEST-CASE -----------------


// c. captures
x = 3;
;//------------------- TEST-CASE -----------------

read(hdfs("foo")) -> fence( fn(i) i + x );

;//--------------------- RESULT ------------------

[
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  103
]

;//------------------- TEST-CASE -----------------


// d. use function from jar
test = javaudf("com.acme.extensions.fn.Split1");
;//------------------- TEST-CASE -----------------

data = ["hi,there", "bye,now"];
;//------------------- TEST-CASE -----------------

data -> fence( fn(i) ( test(i, ",") ) );

;//--------------------- RESULT ------------------

[
  [
    "hi",
    "there"
  ],
  [
    "bye",
    "now"
  ]
]

;//------------------- TEST-CASE -----------------


data -> write(hdfs("bar"));

;//--------------------- RESULT ------------------

{
  "location": "bar",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------

read(hdfs("bar")) -> fence( fn(i) ( test(i, ",") ) );

;//--------------------- RESULT ------------------

[
  [
    "hi",
    "there"
  ],
  [
    "bye",
    "now"
  ]
]

;//------------------- TEST-CASE -----------------


// e. use function from module
import fuzzy_join::fuzzy_join as m;
;//------------------- TEST-CASE -----------------

data -> fence( fn(i) m::qgram(i) ) -> expand -> count();

;//--------------------- RESULT ------------------

19

;//------------------- TEST-CASE -----------------

read(hdfs("bar")) -> fence( fn(i) m::qgram(i) ) -> expand -> count();

;//--------------------- RESULT ------------------

19

;//------------------- TEST-CASE -----------------


//
// 2. complex data

// a. simple function
data = [ { a: 1, b: "hi,there" }, { a: 2, b: "bye,now", c: 23.5 } ];
;//------------------- TEST-CASE -----------------

data -> fence( fn(i) i.c );

;//--------------------- RESULT ------------------

[
  null,
  23.5
]

;//------------------- TEST-CASE -----------------


// b. map-reduce
data -> write(hdfs("complex"));

;//--------------------- RESULT ------------------

{
  "location": "complex",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------

read(hdfs("complex")) -> fence( fn(i) i.c );

;//--------------------- RESULT ------------------

[
  null,
  23.5
]

;//------------------- TEST-CASE -----------------


// c. captures
read(hdfs("complex")) -> fence( fn(i) i.c + x );

;//--------------------- RESULT ------------------

[
  null,
  26.5
]

;//------------------- TEST-CASE -----------------


// d. use function from jar
data -> fence( fn(i) ( test(i.b, ",") ) );

;//--------------------- RESULT ------------------

[
  [
    "hi",
    "there"
  ],
  [
    "bye",
    "now"
  ]
]

;//------------------- TEST-CASE -----------------

read(hdfs("complex")) -> fence( fn(i) ( test(i.b, ",") ) );

;//--------------------- RESULT ------------------

[
  [
    "hi",
    "there"
  ],
  [
    "bye",
    "now"
  ]
]

;//------------------- TEST-CASE -----------------


// e. use function from module
data -> fence( fn(i) m::qgram(i.b) ) -> expand -> count();

;//--------------------- RESULT ------------------

19

;//------------------- TEST-CASE -----------------

read(hdfs("complex")) -> fence( fn(i) m::qgram(i.b) ) -> expand -> count();

;//--------------------- RESULT ------------------

19

;//------------------- TEST-CASE -----------------


//
// Fence in push mode
//

//
// 1. simple data

// a. simple function
range(1,100) -> transform fencePush( $, fn(i) i + 1 );

;//--------------------- RESULT ------------------

[
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101
]

;//------------------- TEST-CASE -----------------


// b. map-reduce
read(hdfs("foo")) -> transform fencePush( $, fn(i) i + 1 );

;//--------------------- RESULT ------------------

[
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101
]

;//------------------- TEST-CASE -----------------


// c. captures
x = 3;
;//------------------- TEST-CASE -----------------

read(hdfs("foo")) -> transform fencePush( $, fn(i) i + x );

;//--------------------- RESULT ------------------

[
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  43,
  44,
  45,
  46,
  47,
  48,
  49,
  50,
  51,
  52,
  53,
  54,
  55,
  56,
  57,
  58,
  59,
  60,
  61,
  62,
  63,
  64,
  65,
  66,
  67,
  68,
  69,
  70,
  71,
  72,
  73,
  74,
  75,
  76,
  77,
  78,
  79,
  80,
  81,
  82,
  83,
  84,
  85,
  86,
  87,
  88,
  89,
  90,
  91,
  92,
  93,
  94,
  95,
  96,
  97,
  98,
  99,
  100,
  101,
  102,
  103
]

;//------------------- TEST-CASE -----------------


// d. use function from jar
data = ["hi,there", "bye,now"];
;//------------------- TEST-CASE -----------------

data -> transform fencePush( $, fn(i) ( test(i, ",") ) );

;//--------------------- RESULT ------------------

[
  [
    "hi",
    "there"
  ],
  [
    "bye",
    "now"
  ]
]

;//------------------- TEST-CASE -----------------


read(hdfs("bar")) -> transform fencePush( $, fn(i) ( test(i, ",") ) );

;//--------------------- RESULT ------------------

[
  [
    "hi",
    "there"
  ],
  [
    "bye",
    "now"
  ]
]

;//------------------- TEST-CASE -----------------


// e. use function from module
data -> transform fencePush( $, fn(i) m::qgram(i) ) -> expand -> count();

;//--------------------- RESULT ------------------

19

;//------------------- TEST-CASE -----------------

read(hdfs("bar")) -> transform fencePush( $, fn(i) m::qgram(i) ) -> expand -> count();

;//--------------------- RESULT ------------------

19

;//------------------- TEST-CASE -----------------


//
// 2. complex data

// a. simple function
data = [ { a: 1, b: "hi,there" }, { a: 2, b: "bye,now", c: 23.5 } ];
;//------------------- TEST-CASE -----------------

data -> transform fencePush( $, fn(i) i.c );

;//--------------------- RESULT ------------------

[
  null,
  23.5
]

;//------------------- TEST-CASE -----------------


// b. map-reduce
read(hdfs("complex")) -> transform fencePush( $, fn(i) i.c );

;//--------------------- RESULT ------------------

[
  null,
  23.5
]

;//------------------- TEST-CASE -----------------


// c. captures
read(hdfs("complex")) -> transform fencePush( $, fn(i) i.c + x );

;//--------------------- RESULT ------------------

[
  null,
  26.5
]

;//------------------- TEST-CASE -----------------


// d. use function from jar
data -> transform fencePush( $, fn(i) ( test(i.b, ",") ) );

;//--------------------- RESULT ------------------

[
  [
    "hi",
    "there"
  ],
  [
    "bye",
    "now"
  ]
]

;//------------------- TEST-CASE -----------------

read(hdfs("complex")) -> transform fencePush( $, fn(i) ( test(i.b, ",") ) );

;//--------------------- RESULT ------------------

[
  [
    "hi",
    "there"
  ],
  [
    "bye",
    "now"
  ]
]

;//------------------- TEST-CASE -----------------


// e. use function from module
data -> transform fencePush( $, fn(i) m::qgram(i.b) ) -> expand -> count();

;//--------------------- RESULT ------------------

19

;//------------------- TEST-CASE -----------------

read(hdfs("complex")) -> transform fencePush( $, fn(i) m::qgram(i.b) ) -> expand -> count();

;//--------------------- RESULT ------------------

19

;//------------------- TEST-CASE -----------------


;//------------------- TEST-DONE -----------------
