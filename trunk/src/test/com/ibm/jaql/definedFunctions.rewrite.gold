
;//------------------- TEST-CASE -----------------
//1. agg
//1.1 exercise count function
//sanity testing
count([1,2,3,4]);

;//--------------------- RESULT ------------------

4

;//------------------- TEST-CASE -----------------

count([false, 12.34, "IBM", true, 21]);

;//--------------------- RESULT ------------------

5

;//------------------- TEST-CASE -----------------

count([{a:12, b:"IBM"}, false, "IBM", [1,2,3,4,5,6], null, "", 12.345]);

;//--------------------- RESULT ------------------

7

;//------------------- TEST-CASE -----------------

count([]);

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

count([null]);

;//--------------------- RESULT ------------------

1

;//------------------- TEST-CASE -----------------

count(null);

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

count([IBM, false, 12.34]);

;//----- EXCEPTION -----

// java.lang.IndexOutOfBoundsException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

[{a:12, b:"IBM"}, false, "IBM", [1,2,3,4,5,6], null, "", 12.345] -> count();

;//--------------------- RESULT ------------------

7

;//------------------- TEST-CASE -----------------

null -> count();

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

[null] -> count();

;//--------------------- RESULT ------------------

1

;//------------------- TEST-CASE -----------------

//error condition
count();

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

count(12);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

count("IBM");

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

count([false, 12.34, IBM]);

;//----- EXCEPTION -----

// java.lang.IndexOutOfBoundsException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

count({a:1, b:2, c:3});

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//1.2 exercise sum function
//sanity testing
sum([1,2,4]);

;//--------------------- RESULT ------------------

7

;//------------------- TEST-CASE -----------------

sum([]);

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

sum([0]);

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

[1,2,4] -> sum();

;//--------------------- RESULT ------------------

7

;//------------------- TEST-CASE -----------------

//error condition
sum(["IBM","SUN",4]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

[1,2,4] -> sum([1,3,6]);

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

sum({a:1, b:2});

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

sum([{a:1, b:2}, {c:23,d:12.3}]);

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//1.3 exercise max function
//sanity testing
max([1,2,4,-12, 8, 3]);

;//--------------------- RESULT ------------------

8

;//------------------- TEST-CASE -----------------

[1,2,4,-12, 8, 3] -> max();

;//--------------------- RESULT ------------------

8

;//------------------- TEST-CASE -----------------

max([1,2,4,-12, 8, null]);

;//--------------------- RESULT ------------------

8

;//------------------- TEST-CASE -----------------

max([]);

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

//error condition
max(["IBM","SUN",4);

;//----- EXCEPTION -----

// antlr.MismatchedTokenException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

max(["IBM","SUN",4]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

max([{a:12, b:"IBM"}, false, "IBM", [1,2,3,4,5,6], null, "", 12.345]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//1.4 exercise count/sum/max from hdfs file system
[
  range(1,200),
  range(300,1000),
  range(10000,12000),
  range(-1000,-700)
  ] -> write(hdfs("agg_test1"));

;//--------------------- RESULT ------------------

{
  "location": "agg_test1",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------

read(hdfs("agg_test1")) -> transform each k ({count: count(k), sum:sum(k), max:max(k)});

;//--------------------- RESULT ------------------

[
  {
    "count": 200,
    "max": 200,
    "sum": 20100
  },
  {
    "count": 701,
    "max": 1000,
    "sum": 455650
  },
  {
    "count": 2001,
    "max": 12000,
    "sum": 22011000
  },
  {
    "count": 301,
    "max": -700,
    "sum": -255850
  }
]

;//------------------- TEST-CASE -----------------

[
  {employee_id:1, dept: "Sales",     age: 20, income:12000, Address: "Wall Street 32"},
  {employee_id:2, dept: "Sales",     age: 28, income:13000, Address: "Washington Road 92"},
  {employee_id:3, dept: "PreSales",  age: 35, income:15000, Address: "Beijing Road 92"},
  {employee_id:4, dept: "Research",  age: 32, income:10000, Address: "East Road 92, Shangdi district"},
  {employee_id:5, dept: "HR",        age: 29, income:20000, Address: "West Road 120, Shangdi district"},
  {employee_id:6, dept: "PreSales",  age: 43, income:5000,  Address: "Xi'an Road 33"},
  {employee_id:7, dept: "Research",  age: 30, income:8000,  Address: "Heping Road 23"}
  ] -> write(hdfs("agg_test2"));

;//--------------------- RESULT ------------------

{
  "location": "agg_test2",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------

read(hdfs("agg_test2")) -> group by $dept_group = $.dept 
                           into {$dept_group, employee_count:count($[*].income), total_income:sum($[*].income), income_max:max($[*].income)};

;//--------------------- RESULT ------------------

[
  {
    "dept_group": "HR",
    "employee_count": 1,
    "income_max": 20000,
    "total_income": 20000
  },
  {
    "dept_group": "PreSales",
    "employee_count": 2,
    "income_max": 15000,
    "total_income": 20000
  },
  {
    "dept_group": "Research",
    "employee_count": 2,
    "income_max": 10000,
    "total_income": 18000
  },
  {
    "dept_group": "Sales",
    "employee_count": 2,
    "income_max": 13000,
    "total_income": 25000
  }
]

;//------------------- TEST-CASE -----------------

read(hdfs("agg_test2")) -> filter $.age >25 -> group by $dept_group = $.dept 
                           into {$dept_group, employee_count:count($[*].income), total_income:sum($[*].income), income_max:max($[*].income)};

;//--------------------- RESULT ------------------

[
  {
    "dept_group": "HR",
    "employee_count": 1,
    "income_max": 20000,
    "total_income": 20000
  },
  {
    "dept_group": "PreSales",
    "employee_count": 2,
    "income_max": 15000,
    "total_income": 20000
  },
  {
    "dept_group": "Research",
    "employee_count": 2,
    "income_max": 10000,
    "total_income": 18000
  },
  {
    "dept_group": "Sales",
    "employee_count": 1,
    "income_max": 13000,
    "total_income": 13000
  }
]

;//------------------- TEST-CASE -----------------


//2. array
//2.1 exists
exists([12,23]);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

exists(12);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

exists({a:12, b:"IBM"})
exists(false);

;//----- EXCEPTION -----

// antlr.NoViableAltException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

exists(["IBM","SUN",4]);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

["IBM","SUN",4] -> exists();

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

exists();

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

exists(null);

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

exists([null]);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

exists([null, "IBM"]);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

//2.2 distinct
distinct([1,22,3,4,3,22,7,8,7]);

;//--------------------- RESULT ------------------

[
  8,
  1,
  7,
  4,
  22,
  3
]

;//------------------- TEST-CASE -----------------

[1,22,3,4,3,22,7,8,7] -> distinct();

;//--------------------- RESULT ------------------

[
  8,
  1,
  7,
  4,
  22,
  3
]

;//------------------- TEST-CASE -----------------

distinct(["IBM", false, true, false, 123.34, 456, 809, 123.34, "sun", "ibm", "ibm"]);

;//--------------------- RESULT ------------------

[
  false,
  "sun",
  123.34,
  "ibm",
  "IBM",
  true,
  809,
  456
]

;//------------------- TEST-CASE -----------------

distinct([null, "", false, true]);

;//--------------------- RESULT ------------------

[
  false,
  null,
  true,
  ""
]

;//------------------- TEST-CASE -----------------

distinct([null, {a:12, b:21},{a:12, b:21}, {a:12, b:"IBM"}, {a:12, b:"IBM"}, ["ibm", "sun", 12.34], ["sun", "ibm", 12.34]]);

;//--------------------- RESULT ------------------

[
  null,
  {
    "a": 12,
    "b": 21
  },
  {
    "a": 12,
    "b": "IBM"
  },
  [
    "ibm",
    "sun",
    12.34
  ],
  [
    "sun",
    "ibm",
    12.34
  ]
]

;//------------------- TEST-CASE -----------------

distinct([{c:"ibm", d:"sun"}, {d:"sun",  c:"ibm"}]);

;//--------------------- RESULT ------------------

[
  {
    "c": "ibm",
    "d": "sun"
  }
]

;//------------------- TEST-CASE -----------------

distinct([["ibm", "sun"], ["sun",  "ibm"], ["SUN", "ibm"]]);

;//--------------------- RESULT ------------------

[
  [
    "SUN",
    "ibm"
  ],
  [
    "sun",
    "ibm"
  ],
  [
    "ibm",
    "sun"
  ]
]

;//------------------- TEST-CASE -----------------

distinct(12);

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

distinct({a:12, b:"IBM"});

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

distinct(null);

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

distinct([null]);

;//--------------------- RESULT ------------------

[
  null
]

;//------------------- TEST-CASE -----------------

//2.3 arrayToRecord
arrayToRecord(["SUN", "IBM"], [123,345]);

;//--------------------- RESULT ------------------

{
  "IBM": 345,
  "SUN": 123
}

;//------------------- TEST-CASE -----------------

arrayToRecord();

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"]);

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], 123);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM", ""], [1,2,3]);

;//--------------------- RESULT ------------------

{
  "": 3,
  "IBM": 2,
  "SUN": 1
}

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], [1, 2, 3]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], [1]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.AssertionError

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], [1, null]);

;//--------------------- RESULT ------------------

{
  "IBM": null,
  "SUN": 1
}

;//------------------- TEST-CASE -----------------

arrayToRecord(range(1,5)->transform(strcat("s",$)), range(1,5));

;//--------------------- RESULT ------------------

{
  "s1": 1,
  "s2": 2,
  "s3": 3,
  "s4": 4,
  "s5": 5
}

;//------------------- TEST-CASE -----------------

arrayToRecord(range(1,255)->transform(strcat("s",$)), range(1,255));

;//--------------------- RESULT ------------------

{
  "s1": 1,
  "s10": 10,
  "s100": 100,
  "s101": 101,
  "s102": 102,
  "s103": 103,
  "s104": 104,
  "s105": 105,
  "s106": 106,
  "s107": 107,
  "s108": 108,
  "s109": 109,
  "s11": 11,
  "s110": 110,
  "s111": 111,
  "s112": 112,
  "s113": 113,
  "s114": 114,
  "s115": 115,
  "s116": 116,
  "s117": 117,
  "s118": 118,
  "s119": 119,
  "s12": 12,
  "s120": 120,
  "s121": 121,
  "s122": 122,
  "s123": 123,
  "s124": 124,
  "s125": 125,
  "s126": 126,
  "s127": 127,
  "s128": 128,
  "s129": 129,
  "s13": 13,
  "s130": 130,
  "s131": 131,
  "s132": 132,
  "s133": 133,
  "s134": 134,
  "s135": 135,
  "s136": 136,
  "s137": 137,
  "s138": 138,
  "s139": 139,
  "s14": 14,
  "s140": 140,
  "s141": 141,
  "s142": 142,
  "s143": 143,
  "s144": 144,
  "s145": 145,
  "s146": 146,
  "s147": 147,
  "s148": 148,
  "s149": 149,
  "s15": 15,
  "s150": 150,
  "s151": 151,
  "s152": 152,
  "s153": 153,
  "s154": 154,
  "s155": 155,
  "s156": 156,
  "s157": 157,
  "s158": 158,
  "s159": 159,
  "s16": 16,
  "s160": 160,
  "s161": 161,
  "s162": 162,
  "s163": 163,
  "s164": 164,
  "s165": 165,
  "s166": 166,
  "s167": 167,
  "s168": 168,
  "s169": 169,
  "s17": 17,
  "s170": 170,
  "s171": 171,
  "s172": 172,
  "s173": 173,
  "s174": 174,
  "s175": 175,
  "s176": 176,
  "s177": 177,
  "s178": 178,
  "s179": 179,
  "s18": 18,
  "s180": 180,
  "s181": 181,
  "s182": 182,
  "s183": 183,
  "s184": 184,
  "s185": 185,
  "s186": 186,
  "s187": 187,
  "s188": 188,
  "s189": 189,
  "s19": 19,
  "s190": 190,
  "s191": 191,
  "s192": 192,
  "s193": 193,
  "s194": 194,
  "s195": 195,
  "s196": 196,
  "s197": 197,
  "s198": 198,
  "s199": 199,
  "s2": 2,
  "s20": 20,
  "s200": 200,
  "s201": 201,
  "s202": 202,
  "s203": 203,
  "s204": 204,
  "s205": 205,
  "s206": 206,
  "s207": 207,
  "s208": 208,
  "s209": 209,
  "s21": 21,
  "s210": 210,
  "s211": 211,
  "s212": 212,
  "s213": 213,
  "s214": 214,
  "s215": 215,
  "s216": 216,
  "s217": 217,
  "s218": 218,
  "s219": 219,
  "s22": 22,
  "s220": 220,
  "s221": 221,
  "s222": 222,
  "s223": 223,
  "s224": 224,
  "s225": 225,
  "s226": 226,
  "s227": 227,
  "s228": 228,
  "s229": 229,
  "s23": 23,
  "s230": 230,
  "s231": 231,
  "s232": 232,
  "s233": 233,
  "s234": 234,
  "s235": 235,
  "s236": 236,
  "s237": 237,
  "s238": 238,
  "s239": 239,
  "s24": 24,
  "s240": 240,
  "s241": 241,
  "s242": 242,
  "s243": 243,
  "s244": 244,
  "s245": 245,
  "s246": 246,
  "s247": 247,
  "s248": 248,
  "s249": 249,
  "s25": 25,
  "s250": 250,
  "s251": 251,
  "s252": 252,
  "s253": 253,
  "s254": 254,
  "s255": 255,
  "s26": 26,
  "s27": 27,
  "s28": 28,
  "s29": 29,
  "s3": 3,
  "s30": 30,
  "s31": 31,
  "s32": 32,
  "s33": 33,
  "s34": 34,
  "s35": 35,
  "s36": 36,
  "s37": 37,
  "s38": 38,
  "s39": 39,
  "s4": 4,
  "s40": 40,
  "s41": 41,
  "s42": 42,
  "s43": 43,
  "s44": 44,
  "s45": 45,
  "s46": 46,
  "s47": 47,
  "s48": 48,
  "s49": 49,
  "s5": 5,
  "s50": 50,
  "s51": 51,
  "s52": 52,
  "s53": 53,
  "s54": 54,
  "s55": 55,
  "s56": 56,
  "s57": 57,
  "s58": 58,
  "s59": 59,
  "s6": 6,
  "s60": 60,
  "s61": 61,
  "s62": 62,
  "s63": 63,
  "s64": 64,
  "s65": 65,
  "s66": 66,
  "s67": 67,
  "s68": 68,
  "s69": 69,
  "s7": 7,
  "s70": 70,
  "s71": 71,
  "s72": 72,
  "s73": 73,
  "s74": 74,
  "s75": 75,
  "s76": 76,
  "s77": 77,
  "s78": 78,
  "s79": 79,
  "s8": 8,
  "s80": 80,
  "s81": 81,
  "s82": 82,
  "s83": 83,
  "s84": 84,
  "s85": 85,
  "s86": 86,
  "s87": 87,
  "s88": 88,
  "s89": 89,
  "s9": 9,
  "s90": 90,
  "s91": 91,
  "s92": 92,
  "s93": 93,
  "s94": 94,
  "s95": 95,
  "s96": 96,
  "s97": 97,
  "s98": 98,
  "s99": 99
}

;//------------------- TEST-CASE -----------------

arrayToRecord(range(1,255)->transform(strcat("s",$)), range(1,255)->transform($/16.00));

;//--------------------- RESULT ------------------

{
  "s1": 0.0625,
  "s10": 0.625,
  "s100": 6.25,
  "s101": 6.3125,
  "s102": 6.375,
  "s103": 6.4375,
  "s104": 6.5,
  "s105": 6.5625,
  "s106": 6.625,
  "s107": 6.6875,
  "s108": 6.75,
  "s109": 6.8125,
  "s11": 0.6875,
  "s110": 6.875,
  "s111": 6.9375,
  "s112": 7.0,
  "s113": 7.0625,
  "s114": 7.125,
  "s115": 7.1875,
  "s116": 7.25,
  "s117": 7.3125,
  "s118": 7.375,
  "s119": 7.4375,
  "s12": 0.75,
  "s120": 7.5,
  "s121": 7.5625,
  "s122": 7.625,
  "s123": 7.6875,
  "s124": 7.75,
  "s125": 7.8125,
  "s126": 7.875,
  "s127": 7.9375,
  "s128": 8.0,
  "s129": 8.0625,
  "s13": 0.8125,
  "s130": 8.125,
  "s131": 8.1875,
  "s132": 8.25,
  "s133": 8.3125,
  "s134": 8.375,
  "s135": 8.4375,
  "s136": 8.5,
  "s137": 8.5625,
  "s138": 8.625,
  "s139": 8.6875,
  "s14": 0.875,
  "s140": 8.75,
  "s141": 8.8125,
  "s142": 8.875,
  "s143": 8.9375,
  "s144": 9.0,
  "s145": 9.0625,
  "s146": 9.125,
  "s147": 9.1875,
  "s148": 9.25,
  "s149": 9.3125,
  "s15": 0.9375,
  "s150": 9.375,
  "s151": 9.4375,
  "s152": 9.5,
  "s153": 9.5625,
  "s154": 9.625,
  "s155": 9.6875,
  "s156": 9.75,
  "s157": 9.8125,
  "s158": 9.875,
  "s159": 9.9375,
  "s16": 1.0,
  "s160": 10.0,
  "s161": 10.0625,
  "s162": 10.125,
  "s163": 10.1875,
  "s164": 10.25,
  "s165": 10.3125,
  "s166": 10.375,
  "s167": 10.4375,
  "s168": 10.5,
  "s169": 10.5625,
  "s17": 1.0625,
  "s170": 10.625,
  "s171": 10.6875,
  "s172": 10.75,
  "s173": 10.8125,
  "s174": 10.875,
  "s175": 10.9375,
  "s176": 11.0,
  "s177": 11.0625,
  "s178": 11.125,
  "s179": 11.1875,
  "s18": 1.125,
  "s180": 11.25,
  "s181": 11.3125,
  "s182": 11.375,
  "s183": 11.4375,
  "s184": 11.5,
  "s185": 11.5625,
  "s186": 11.625,
  "s187": 11.6875,
  "s188": 11.75,
  "s189": 11.8125,
  "s19": 1.1875,
  "s190": 11.875,
  "s191": 11.9375,
  "s192": 12.0,
  "s193": 12.0625,
  "s194": 12.125,
  "s195": 12.1875,
  "s196": 12.25,
  "s197": 12.3125,
  "s198": 12.375,
  "s199": 12.4375,
  "s2": 0.125,
  "s20": 1.25,
  "s200": 12.5,
  "s201": 12.5625,
  "s202": 12.625,
  "s203": 12.6875,
  "s204": 12.75,
  "s205": 12.8125,
  "s206": 12.875,
  "s207": 12.9375,
  "s208": 13.0,
  "s209": 13.0625,
  "s21": 1.3125,
  "s210": 13.125,
  "s211": 13.1875,
  "s212": 13.25,
  "s213": 13.3125,
  "s214": 13.375,
  "s215": 13.4375,
  "s216": 13.5,
  "s217": 13.5625,
  "s218": 13.625,
  "s219": 13.6875,
  "s22": 1.375,
  "s220": 13.75,
  "s221": 13.8125,
  "s222": 13.875,
  "s223": 13.9375,
  "s224": 14.0,
  "s225": 14.0625,
  "s226": 14.125,
  "s227": 14.1875,
  "s228": 14.25,
  "s229": 14.3125,
  "s23": 1.4375,
  "s230": 14.375,
  "s231": 14.4375,
  "s232": 14.5,
  "s233": 14.5625,
  "s234": 14.625,
  "s235": 14.6875,
  "s236": 14.75,
  "s237": 14.8125,
  "s238": 14.875,
  "s239": 14.9375,
  "s24": 1.5,
  "s240": 15.0,
  "s241": 15.0625,
  "s242": 15.125,
  "s243": 15.1875,
  "s244": 15.25,
  "s245": 15.3125,
  "s246": 15.375,
  "s247": 15.4375,
  "s248": 15.5,
  "s249": 15.5625,
  "s25": 1.5625,
  "s250": 15.625,
  "s251": 15.6875,
  "s252": 15.75,
  "s253": 15.8125,
  "s254": 15.875,
  "s255": 15.9375,
  "s26": 1.625,
  "s27": 1.6875,
  "s28": 1.75,
  "s29": 1.8125,
  "s3": 0.1875,
  "s30": 1.875,
  "s31": 1.9375,
  "s32": 2.0,
  "s33": 2.0625,
  "s34": 2.125,
  "s35": 2.1875,
  "s36": 2.25,
  "s37": 2.3125,
  "s38": 2.375,
  "s39": 2.4375,
  "s4": 0.25,
  "s40": 2.5,
  "s41": 2.5625,
  "s42": 2.625,
  "s43": 2.6875,
  "s44": 2.75,
  "s45": 2.8125,
  "s46": 2.875,
  "s47": 2.9375,
  "s48": 3.0,
  "s49": 3.0625,
  "s5": 0.3125,
  "s50": 3.125,
  "s51": 3.1875,
  "s52": 3.25,
  "s53": 3.3125,
  "s54": 3.375,
  "s55": 3.4375,
  "s56": 3.5,
  "s57": 3.5625,
  "s58": 3.625,
  "s59": 3.6875,
  "s6": 0.375,
  "s60": 3.75,
  "s61": 3.8125,
  "s62": 3.875,
  "s63": 3.9375,
  "s64": 4.0,
  "s65": 4.0625,
  "s66": 4.125,
  "s67": 4.1875,
  "s68": 4.25,
  "s69": 4.3125,
  "s7": 0.4375,
  "s70": 4.375,
  "s71": 4.4375,
  "s72": 4.5,
  "s73": 4.5625,
  "s74": 4.625,
  "s75": 4.6875,
  "s76": 4.75,
  "s77": 4.8125,
  "s78": 4.875,
  "s79": 4.9375,
  "s8": 0.5,
  "s80": 5.0,
  "s81": 5.0625,
  "s82": 5.125,
  "s83": 5.1875,
  "s84": 5.25,
  "s85": 5.3125,
  "s86": 5.375,
  "s87": 5.4375,
  "s88": 5.5,
  "s89": 5.5625,
  "s9": 0.5625,
  "s90": 5.625,
  "s91": 5.6875,
  "s92": 5.75,
  "s93": 5.8125,
  "s94": 5.875,
  "s95": 5.9375,
  "s96": 6.0,
  "s97": 6.0625,
  "s98": 6.125,
  "s99": 6.1875
}

;//------------------- TEST-CASE -----------------

//defect 9567
arrayToRecord(range(1,1000)->transform(strcat("s",$)), range(1,1000));

;//--------------------- RESULT ------------------

{
  "s1": 1,
  "s10": 10,
  "s100": 100,
  "s1000": 1000,
  "s101": 101,
  "s102": 102,
  "s103": 103,
  "s104": 104,
  "s105": 105,
  "s106": 106,
  "s107": 107,
  "s108": 108,
  "s109": 109,
  "s11": 11,
  "s110": 110,
  "s111": 111,
  "s112": 112,
  "s113": 113,
  "s114": 114,
  "s115": 115,
  "s116": 116,
  "s117": 117,
  "s118": 118,
  "s119": 119,
  "s12": 12,
  "s120": 120,
  "s121": 121,
  "s122": 122,
  "s123": 123,
  "s124": 124,
  "s125": 125,
  "s126": 126,
  "s127": 127,
  "s128": 128,
  "s129": 129,
  "s13": 13,
  "s130": 130,
  "s131": 131,
  "s132": 132,
  "s133": 133,
  "s134": 134,
  "s135": 135,
  "s136": 136,
  "s137": 137,
  "s138": 138,
  "s139": 139,
  "s14": 14,
  "s140": 140,
  "s141": 141,
  "s142": 142,
  "s143": 143,
  "s144": 144,
  "s145": 145,
  "s146": 146,
  "s147": 147,
  "s148": 148,
  "s149": 149,
  "s15": 15,
  "s150": 150,
  "s151": 151,
  "s152": 152,
  "s153": 153,
  "s154": 154,
  "s155": 155,
  "s156": 156,
  "s157": 157,
  "s158": 158,
  "s159": 159,
  "s16": 16,
  "s160": 160,
  "s161": 161,
  "s162": 162,
  "s163": 163,
  "s164": 164,
  "s165": 165,
  "s166": 166,
  "s167": 167,
  "s168": 168,
  "s169": 169,
  "s17": 17,
  "s170": 170,
  "s171": 171,
  "s172": 172,
  "s173": 173,
  "s174": 174,
  "s175": 175,
  "s176": 176,
  "s177": 177,
  "s178": 178,
  "s179": 179,
  "s18": 18,
  "s180": 180,
  "s181": 181,
  "s182": 182,
  "s183": 183,
  "s184": 184,
  "s185": 185,
  "s186": 186,
  "s187": 187,
  "s188": 188,
  "s189": 189,
  "s19": 19,
  "s190": 190,
  "s191": 191,
  "s192": 192,
  "s193": 193,
  "s194": 194,
  "s195": 195,
  "s196": 196,
  "s197": 197,
  "s198": 198,
  "s199": 199,
  "s2": 2,
  "s20": 20,
  "s200": 200,
  "s201": 201,
  "s202": 202,
  "s203": 203,
  "s204": 204,
  "s205": 205,
  "s206": 206,
  "s207": 207,
  "s208": 208,
  "s209": 209,
  "s21": 21,
  "s210": 210,
  "s211": 211,
  "s212": 212,
  "s213": 213,
  "s214": 214,
  "s215": 215,
  "s216": 216,
  "s217": 217,
  "s218": 218,
  "s219": 219,
  "s22": 22,
  "s220": 220,
  "s221": 221,
  "s222": 222,
  "s223": 223,
  "s224": 224,
  "s225": 225,
  "s226": 226,
  "s227": 227,
  "s228": 228,
  "s229": 229,
  "s23": 23,
  "s230": 230,
  "s231": 231,
  "s232": 232,
  "s233": 233,
  "s234": 234,
  "s235": 235,
  "s236": 236,
  "s237": 237,
  "s238": 238,
  "s239": 239,
  "s24": 24,
  "s240": 240,
  "s241": 241,
  "s242": 242,
  "s243": 243,
  "s244": 244,
  "s245": 245,
  "s246": 246,
  "s247": 247,
  "s248": 248,
  "s249": 249,
  "s25": 25,
  "s250": 250,
  "s251": 251,
  "s252": 252,
  "s253": 253,
  "s254": 254,
  "s255": 255,
  "s256": 256,
  "s257": 257,
  "s258": 258,
  "s259": 259,
  "s26": 26,
  "s260": 260,
  "s261": 261,
  "s262": 262,
  "s263": 263,
  "s264": 264,
  "s265": 265,
  "s266": 266,
  "s267": 267,
  "s268": 268,
  "s269": 269,
  "s27": 27,
  "s270": 270,
  "s271": 271,
  "s272": 272,
  "s273": 273,
  "s274": 274,
  "s275": 275,
  "s276": 276,
  "s277": 277,
  "s278": 278,
  "s279": 279,
  "s28": 28,
  "s280": 280,
  "s281": 281,
  "s282": 282,
  "s283": 283,
  "s284": 284,
  "s285": 285,
  "s286": 286,
  "s287": 287,
  "s288": 288,
  "s289": 289,
  "s29": 29,
  "s290": 290,
  "s291": 291,
  "s292": 292,
  "s293": 293,
  "s294": 294,
  "s295": 295,
  "s296": 296,
  "s297": 297,
  "s298": 298,
  "s299": 299,
  "s3": 3,
  "s30": 30,
  "s300": 300,
  "s301": 301,
  "s302": 302,
  "s303": 303,
  "s304": 304,
  "s305": 305,
  "s306": 306,
  "s307": 307,
  "s308": 308,
  "s309": 309,
  "s31": 31,
  "s310": 310,
  "s311": 311,
  "s312": 312,
  "s313": 313,
  "s314": 314,
  "s315": 315,
  "s316": 316,
  "s317": 317,
  "s318": 318,
  "s319": 319,
  "s32": 32,
  "s320": 320,
  "s321": 321,
  "s322": 322,
  "s323": 323,
  "s324": 324,
  "s325": 325,
  "s326": 326,
  "s327": 327,
  "s328": 328,
  "s329": 329,
  "s33": 33,
  "s330": 330,
  "s331": 331,
  "s332": 332,
  "s333": 333,
  "s334": 334,
  "s335": 335,
  "s336": 336,
  "s337": 337,
  "s338": 338,
  "s339": 339,
  "s34": 34,
  "s340": 340,
  "s341": 341,
  "s342": 342,
  "s343": 343,
  "s344": 344,
  "s345": 345,
  "s346": 346,
  "s347": 347,
  "s348": 348,
  "s349": 349,
  "s35": 35,
  "s350": 350,
  "s351": 351,
  "s352": 352,
  "s353": 353,
  "s354": 354,
  "s355": 355,
  "s356": 356,
  "s357": 357,
  "s358": 358,
  "s359": 359,
  "s36": 36,
  "s360": 360,
  "s361": 361,
  "s362": 362,
  "s363": 363,
  "s364": 364,
  "s365": 365,
  "s366": 366,
  "s367": 367,
  "s368": 368,
  "s369": 369,
  "s37": 37,
  "s370": 370,
  "s371": 371,
  "s372": 372,
  "s373": 373,
  "s374": 374,
  "s375": 375,
  "s376": 376,
  "s377": 377,
  "s378": 378,
  "s379": 379,
  "s38": 38,
  "s380": 380,
  "s381": 381,
  "s382": 382,
  "s383": 383,
  "s384": 384,
  "s385": 385,
  "s386": 386,
  "s387": 387,
  "s388": 388,
  "s389": 389,
  "s39": 39,
  "s390": 390,
  "s391": 391,
  "s392": 392,
  "s393": 393,
  "s394": 394,
  "s395": 395,
  "s396": 396,
  "s397": 397,
  "s398": 398,
  "s399": 399,
  "s4": 4,
  "s40": 40,
  "s400": 400,
  "s401": 401,
  "s402": 402,
  "s403": 403,
  "s404": 404,
  "s405": 405,
  "s406": 406,
  "s407": 407,
  "s408": 408,
  "s409": 409,
  "s41": 41,
  "s410": 410,
  "s411": 411,
  "s412": 412,
  "s413": 413,
  "s414": 414,
  "s415": 415,
  "s416": 416,
  "s417": 417,
  "s418": 418,
  "s419": 419,
  "s42": 42,
  "s420": 420,
  "s421": 421,
  "s422": 422,
  "s423": 423,
  "s424": 424,
  "s425": 425,
  "s426": 426,
  "s427": 427,
  "s428": 428,
  "s429": 429,
  "s43": 43,
  "s430": 430,
  "s431": 431,
  "s432": 432,
  "s433": 433,
  "s434": 434,
  "s435": 435,
  "s436": 436,
  "s437": 437,
  "s438": 438,
  "s439": 439,
  "s44": 44,
  "s440": 440,
  "s441": 441,
  "s442": 442,
  "s443": 443,
  "s444": 444,
  "s445": 445,
  "s446": 446,
  "s447": 447,
  "s448": 448,
  "s449": 449,
  "s45": 45,
  "s450": 450,
  "s451": 451,
  "s452": 452,
  "s453": 453,
  "s454": 454,
  "s455": 455,
  "s456": 456,
  "s457": 457,
  "s458": 458,
  "s459": 459,
  "s46": 46,
  "s460": 460,
  "s461": 461,
  "s462": 462,
  "s463": 463,
  "s464": 464,
  "s465": 465,
  "s466": 466,
  "s467": 467,
  "s468": 468,
  "s469": 469,
  "s47": 47,
  "s470": 470,
  "s471": 471,
  "s472": 472,
  "s473": 473,
  "s474": 474,
  "s475": 475,
  "s476": 476,
  "s477": 477,
  "s478": 478,
  "s479": 479,
  "s48": 48,
  "s480": 480,
  "s481": 481,
  "s482": 482,
  "s483": 483,
  "s484": 484,
  "s485": 485,
  "s486": 486,
  "s487": 487,
  "s488": 488,
  "s489": 489,
  "s49": 49,
  "s490": 490,
  "s491": 491,
  "s492": 492,
  "s493": 493,
  "s494": 494,
  "s495": 495,
  "s496": 496,
  "s497": 497,
  "s498": 498,
  "s499": 499,
  "s5": 5,
  "s50": 50,
  "s500": 500,
  "s501": 501,
  "s502": 502,
  "s503": 503,
  "s504": 504,
  "s505": 505,
  "s506": 506,
  "s507": 507,
  "s508": 508,
  "s509": 509,
  "s51": 51,
  "s510": 510,
  "s511": 511,
  "s512": 512,
  "s513": 513,
  "s514": 514,
  "s515": 515,
  "s516": 516,
  "s517": 517,
  "s518": 518,
  "s519": 519,
  "s52": 52,
  "s520": 520,
  "s521": 521,
  "s522": 522,
  "s523": 523,
  "s524": 524,
  "s525": 525,
  "s526": 526,
  "s527": 527,
  "s528": 528,
  "s529": 529,
  "s53": 53,
  "s530": 530,
  "s531": 531,
  "s532": 532,
  "s533": 533,
  "s534": 534,
  "s535": 535,
  "s536": 536,
  "s537": 537,
  "s538": 538,
  "s539": 539,
  "s54": 54,
  "s540": 540,
  "s541": 541,
  "s542": 542,
  "s543": 543,
  "s544": 544,
  "s545": 545,
  "s546": 546,
  "s547": 547,
  "s548": 548,
  "s549": 549,
  "s55": 55,
  "s550": 550,
  "s551": 551,
  "s552": 552,
  "s553": 553,
  "s554": 554,
  "s555": 555,
  "s556": 556,
  "s557": 557,
  "s558": 558,
  "s559": 559,
  "s56": 56,
  "s560": 560,
  "s561": 561,
  "s562": 562,
  "s563": 563,
  "s564": 564,
  "s565": 565,
  "s566": 566,
  "s567": 567,
  "s568": 568,
  "s569": 569,
  "s57": 57,
  "s570": 570,
  "s571": 571,
  "s572": 572,
  "s573": 573,
  "s574": 574,
  "s575": 575,
  "s576": 576,
  "s577": 577,
  "s578": 578,
  "s579": 579,
  "s58": 58,
  "s580": 580,
  "s581": 581,
  "s582": 582,
  "s583": 583,
  "s584": 584,
  "s585": 585,
  "s586": 586,
  "s587": 587,
  "s588": 588,
  "s589": 589,
  "s59": 59,
  "s590": 590,
  "s591": 591,
  "s592": 592,
  "s593": 593,
  "s594": 594,
  "s595": 595,
  "s596": 596,
  "s597": 597,
  "s598": 598,
  "s599": 599,
  "s6": 6,
  "s60": 60,
  "s600": 600,
  "s601": 601,
  "s602": 602,
  "s603": 603,
  "s604": 604,
  "s605": 605,
  "s606": 606,
  "s607": 607,
  "s608": 608,
  "s609": 609,
  "s61": 61,
  "s610": 610,
  "s611": 611,
  "s612": 612,
  "s613": 613,
  "s614": 614,
  "s615": 615,
  "s616": 616,
  "s617": 617,
  "s618": 618,
  "s619": 619,
  "s62": 62,
  "s620": 620,
  "s621": 621,
  "s622": 622,
  "s623": 623,
  "s624": 624,
  "s625": 625,
  "s626": 626,
  "s627": 627,
  "s628": 628,
  "s629": 629,
  "s63": 63,
  "s630": 630,
  "s631": 631,
  "s632": 632,
  "s633": 633,
  "s634": 634,
  "s635": 635,
  "s636": 636,
  "s637": 637,
  "s638": 638,
  "s639": 639,
  "s64": 64,
  "s640": 640,
  "s641": 641,
  "s642": 642,
  "s643": 643,
  "s644": 644,
  "s645": 645,
  "s646": 646,
  "s647": 647,
  "s648": 648,
  "s649": 649,
  "s65": 65,
  "s650": 650,
  "s651": 651,
  "s652": 652,
  "s653": 653,
  "s654": 654,
  "s655": 655,
  "s656": 656,
  "s657": 657,
  "s658": 658,
  "s659": 659,
  "s66": 66,
  "s660": 660,
  "s661": 661,
  "s662": 662,
  "s663": 663,
  "s664": 664,
  "s665": 665,
  "s666": 666,
  "s667": 667,
  "s668": 668,
  "s669": 669,
  "s67": 67,
  "s670": 670,
  "s671": 671,
  "s672": 672,
  "s673": 673,
  "s674": 674,
  "s675": 675,
  "s676": 676,
  "s677": 677,
  "s678": 678,
  "s679": 679,
  "s68": 68,
  "s680": 680,
  "s681": 681,
  "s682": 682,
  "s683": 683,
  "s684": 684,
  "s685": 685,
  "s686": 686,
  "s687": 687,
  "s688": 688,
  "s689": 689,
  "s69": 69,
  "s690": 690,
  "s691": 691,
  "s692": 692,
  "s693": 693,
  "s694": 694,
  "s695": 695,
  "s696": 696,
  "s697": 697,
  "s698": 698,
  "s699": 699,
  "s7": 7,
  "s70": 70,
  "s700": 700,
  "s701": 701,
  "s702": 702,
  "s703": 703,
  "s704": 704,
  "s705": 705,
  "s706": 706,
  "s707": 707,
  "s708": 708,
  "s709": 709,
  "s71": 71,
  "s710": 710,
  "s711": 711,
  "s712": 712,
  "s713": 713,
  "s714": 714,
  "s715": 715,
  "s716": 716,
  "s717": 717,
  "s718": 718,
  "s719": 719,
  "s72": 72,
  "s720": 720,
  "s721": 721,
  "s722": 722,
  "s723": 723,
  "s724": 724,
  "s725": 725,
  "s726": 726,
  "s727": 727,
  "s728": 728,
  "s729": 729,
  "s73": 73,
  "s730": 730,
  "s731": 731,
  "s732": 732,
  "s733": 733,
  "s734": 734,
  "s735": 735,
  "s736": 736,
  "s737": 737,
  "s738": 738,
  "s739": 739,
  "s74": 74,
  "s740": 740,
  "s741": 741,
  "s742": 742,
  "s743": 743,
  "s744": 744,
  "s745": 745,
  "s746": 746,
  "s747": 747,
  "s748": 748,
  "s749": 749,
  "s75": 75,
  "s750": 750,
  "s751": 751,
  "s752": 752,
  "s753": 753,
  "s754": 754,
  "s755": 755,
  "s756": 756,
  "s757": 757,
  "s758": 758,
  "s759": 759,
  "s76": 76,
  "s760": 760,
  "s761": 761,
  "s762": 762,
  "s763": 763,
  "s764": 764,
  "s765": 765,
  "s766": 766,
  "s767": 767,
  "s768": 768,
  "s769": 769,
  "s77": 77,
  "s770": 770,
  "s771": 771,
  "s772": 772,
  "s773": 773,
  "s774": 774,
  "s775": 775,
  "s776": 776,
  "s777": 777,
  "s778": 778,
  "s779": 779,
  "s78": 78,
  "s780": 780,
  "s781": 781,
  "s782": 782,
  "s783": 783,
  "s784": 784,
  "s785": 785,
  "s786": 786,
  "s787": 787,
  "s788": 788,
  "s789": 789,
  "s79": 79,
  "s790": 790,
  "s791": 791,
  "s792": 792,
  "s793": 793,
  "s794": 794,
  "s795": 795,
  "s796": 796,
  "s797": 797,
  "s798": 798,
  "s799": 799,
  "s8": 8,
  "s80": 80,
  "s800": 800,
  "s801": 801,
  "s802": 802,
  "s803": 803,
  "s804": 804,
  "s805": 805,
  "s806": 806,
  "s807": 807,
  "s808": 808,
  "s809": 809,
  "s81": 81,
  "s810": 810,
  "s811": 811,
  "s812": 812,
  "s813": 813,
  "s814": 814,
  "s815": 815,
  "s816": 816,
  "s817": 817,
  "s818": 818,
  "s819": 819,
  "s82": 82,
  "s820": 820,
  "s821": 821,
  "s822": 822,
  "s823": 823,
  "s824": 824,
  "s825": 825,
  "s826": 826,
  "s827": 827,
  "s828": 828,
  "s829": 829,
  "s83": 83,
  "s830": 830,
  "s831": 831,
  "s832": 832,
  "s833": 833,
  "s834": 834,
  "s835": 835,
  "s836": 836,
  "s837": 837,
  "s838": 838,
  "s839": 839,
  "s84": 84,
  "s840": 840,
  "s841": 841,
  "s842": 842,
  "s843": 843,
  "s844": 844,
  "s845": 845,
  "s846": 846,
  "s847": 847,
  "s848": 848,
  "s849": 849,
  "s85": 85,
  "s850": 850,
  "s851": 851,
  "s852": 852,
  "s853": 853,
  "s854": 854,
  "s855": 855,
  "s856": 856,
  "s857": 857,
  "s858": 858,
  "s859": 859,
  "s86": 86,
  "s860": 860,
  "s861": 861,
  "s862": 862,
  "s863": 863,
  "s864": 864,
  "s865": 865,
  "s866": 866,
  "s867": 867,
  "s868": 868,
  "s869": 869,
  "s87": 87,
  "s870": 870,
  "s871": 871,
  "s872": 872,
  "s873": 873,
  "s874": 874,
  "s875": 875,
  "s876": 876,
  "s877": 877,
  "s878": 878,
  "s879": 879,
  "s88": 88,
  "s880": 880,
  "s881": 881,
  "s882": 882,
  "s883": 883,
  "s884": 884,
  "s885": 885,
  "s886": 886,
  "s887": 887,
  "s888": 888,
  "s889": 889,
  "s89": 89,
  "s890": 890,
  "s891": 891,
  "s892": 892,
  "s893": 893,
  "s894": 894,
  "s895": 895,
  "s896": 896,
  "s897": 897,
  "s898": 898,
  "s899": 899,
  "s9": 9,
  "s90": 90,
  "s900": 900,
  "s901": 901,
  "s902": 902,
  "s903": 903,
  "s904": 904,
  "s905": 905,
  "s906": 906,
  "s907": 907,
  "s908": 908,
  "s909": 909,
  "s91": 91,
  "s910": 910,
  "s911": 911,
  "s912": 912,
  "s913": 913,
  "s914": 914,
  "s915": 915,
  "s916": 916,
  "s917": 917,
  "s918": 918,
  "s919": 919,
  "s92": 92,
  "s920": 920,
  "s921": 921,
  "s922": 922,
  "s923": 923,
  "s924": 924,
  "s925": 925,
  "s926": 926,
  "s927": 927,
  "s928": 928,
  "s929": 929,
  "s93": 93,
  "s930": 930,
  "s931": 931,
  "s932": 932,
  "s933": 933,
  "s934": 934,
  "s935": 935,
  "s936": 936,
  "s937": 937,
  "s938": 938,
  "s939": 939,
  "s94": 94,
  "s940": 940,
  "s941": 941,
  "s942": 942,
  "s943": 943,
  "s944": 944,
  "s945": 945,
  "s946": 946,
  "s947": 947,
  "s948": 948,
  "s949": 949,
  "s95": 95,
  "s950": 950,
  "s951": 951,
  "s952": 952,
  "s953": 953,
  "s954": 954,
  "s955": 955,
  "s956": 956,
  "s957": 957,
  "s958": 958,
  "s959": 959,
  "s96": 96,
  "s960": 960,
  "s961": 961,
  "s962": 962,
  "s963": 963,
  "s964": 964,
  "s965": 965,
  "s966": 966,
  "s967": 967,
  "s968": 968,
  "s969": 969,
  "s97": 97,
  "s970": 970,
  "s971": 971,
  "s972": 972,
  "s973": 973,
  "s974": 974,
  "s975": 975,
  "s976": 976,
  "s977": 977,
  "s978": 978,
  "s979": 979,
  "s98": 98,
  "s980": 980,
  "s981": 981,
  "s982": 982,
  "s983": 983,
  "s984": 984,
  "s985": 985,
  "s986": 986,
  "s987": 987,
  "s988": 988,
  "s989": 989,
  "s99": 99,
  "s990": 990,
  "s991": 991,
  "s992": 992,
  "s993": 993,
  "s994": 994,
  "s995": 995,
  "s996": 996,
  "s997": 997,
  "s998": 998,
  "s999": 999
}

;//------------------- TEST-CASE -----------------

//defect 9379
arrayToRecord([null,"ibm"],[1,2]);

;//--------------------- RESULT ------------------

{

;//----- EXCEPTION -----

// java.lang.NullPointerException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], [{price:123},{address:"Beijing"}]);

;//--------------------- RESULT ------------------

{
  "IBM": {
    "address": "Beijing"
  },
  "SUN": {
    "price": 123
  }
}

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], {a:1, b:2});

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord({a:1, b:2}, ["SUN", "IBM"]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//2.4 asArray
//this function only alow array or null as the parameter
words=asArray([{w:'a'},{w:'b'},{w:'c'}]->transform {$.w});
;//------------------- TEST-CASE -----------------

//first word
words[0].w;

;//--------------------- RESULT ------------------

"a"

;//------------------- TEST-CASE -----------------

asArray([]);

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

asArray(null);

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

//2.5 columnwise
pinfo=[{name:'john',age:23, hobbies: {A:'basketball',b:'football',c:'swimming'}},{name:'mike',age:24,hobbies:{A:'jogging',B:'combat'}}];
;//------------------- TEST-CASE -----------------

result=columnwise(pinfo);
;//------------------- TEST-CASE -----------------

result;

;//--------------------- RESULT ------------------

{
  "age": [
    23,
    24
  ],
  "hobbies": [
    {
      "A": "basketball",
      "b": "football",
      "c": "swimming"
    },
    {
      "A": "jogging",
      "B": "combat"
    }
  ],
  "name": [
    "john",
    "mike"
  ]
}

;//------------------- TEST-CASE -----------------

typeof(columnwise([]))=="record";

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

//2.6 rowwise
rowwise(result)==pinfo;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

typeof(rowwise({}))=="array";

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

//2.7 deempty
null->deempty();

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

[]->deempty();

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

[{type:'array',value:[1,23,4]},{type:'record',value:{a:'a record'}}] -> deempty();

;//--------------------- RESULT ------------------

[
  {
    "type": "array",
    "value": [
      1,
      23,
      4
    ]
  },
  {
    "type": "record",
    "value": {
      "a": "a record"
    }
  }
]

;//------------------- TEST-CASE -----------------

//2.8 lag1
range(1,5) -> lag1();

;//--------------------- RESULT ------------------

[
  {
    "cur": 2,
    "prev": 1
  },
  {
    "cur": 3,
    "prev": 2
  },
  {
    "cur": 4,
    "prev": 3
  },
  {
    "cur": 5,
    "prev": 4
  }
]

;//------------------- TEST-CASE -----------------

//2.9 pair
pair('a','b')==['a','b'];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

pair(1,-1)==[1,-1];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

pair(3.14,-3.14)==[3.14,-3.14];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

pair(true,false)==[true,false];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

pair(null,1)==[null,1];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

pair(null,null)==[null,null];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

//2.10 nextElement
//normal use
range(1,3)->nextElement();

;//--------------------- RESULT ------------------

[
  {
    "cur": 1,
    "next": 2
  },
  {
    "cur": 2,
    "next": 3
  },
  {
    "cur": 3
  }
]

;//------------------- TEST-CASE -----------------

//only one element
[1]->nextElement();

;//--------------------- RESULT ------------------

[
  {
    "cur": 1
  }
]

;//------------------- TEST-CASE -----------------

//array with record elements 
[{n:1,v:'n1'},{n:2,v:'n2'},{n:3,v:'n3'}]->nextElement();

;//--------------------- RESULT ------------------

[
  {
    "cur": {
      "n": 1,
      "v": "n1"
    },
    "next": {
      "n": 2,
      "v": "n2"
    }
  },
  {
    "cur": {
      "n": 2,
      "v": "n2"
    },
    "next": {
      "n": 3,
      "v": "n3"
    }
  },
  {
    "cur": {
      "n": 3,
      "v": "n3"
    }
  }
]

;//------------------- TEST-CASE -----------------

//2.11 prevAndNextElement
range(1,3)->prevAndNextElement();

;//--------------------- RESULT ------------------

[
  {
    "cur": 1,
    "next": 2
  },
  {
    "cur": 2,
    "next": 3,
    "prev": 1
  },
  {
    "cur": 3,
    "prev": 2
  }
]

;//------------------- TEST-CASE -----------------

[1]->prevAndNextElement();

;//--------------------- RESULT ------------------

[
  {
    "cur": 1
  }
]

;//------------------- TEST-CASE -----------------

[1,2]->prevAndNextElement();

;//--------------------- RESULT ------------------

[
  {
    "cur": 1,
    "next": 2
  },
  {
    "cur": 2,
    "prev": 1
  }
]

;//------------------- TEST-CASE -----------------

//2.12 prevElement
range(1,3)->prevElement();

;//--------------------- RESULT ------------------

[
  {
    "cur": 1
  },
  {
    "cur": 2,
    "prev": 1
  },
  {
    "cur": 3,
    "prev": 2
  }
]

;//------------------- TEST-CASE -----------------

[1]->prevElement();

;//--------------------- RESULT ------------------

[
  {
    "cur": 1
  }
]

;//------------------- TEST-CASE -----------------

//2.13 removeElement
removeElement([1,2,3],0)==[2,3];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

//out of index
removeElement([1,2,3],3)==[1,2,3];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

removeElement([1,2,null],2)==[1,2];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

//2.14 replaceElement
replaceElement([1,2,3],2,100)==[1,2,100];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

replaceElement(['a','b','c'],2,'d')==['a','b','d'];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

//out of index
replaceElement(['a','b','c'],3,'d')==['a','b','c','d'];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

replaceElement(['a','b','c'],4,'d')==['a','b','c',null,'d'];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------
 
replaceElement(['a','b','c'],-1,'d')==['a','b','c'];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------
 
//2.15 reverse
[1,2,3]->reverse();

;//--------------------- RESULT ------------------

[
  3,
  2,
  1
]

;//------------------- TEST-CASE -----------------

null->reverse();

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

[[1],[2,3],[3,4,5],[6,7,8,9]] -> transform reverse($);

;//--------------------- RESULT ------------------

[
  [
    1
  ],
  [
    3,
    2
  ],
  [
    5,
    4,
    3
  ],
  [
    9,
    8,
    7,
    6
  ]
]

;//------------------- TEST-CASE -----------------

[[1],[2,3],[3,4,5],[6,7,8,9]] -> transform reverse($)->reverse();

;//--------------------- RESULT ------------------

[
  [
    9,
    8,
    7,
    6
  ],
  [
    5,
    4,
    3
  ],
  [
    3,
    2
  ],
  [
    1
  ]
]

;//------------------- TEST-CASE -----------------

//2.16 shift
//input, number before, number after
//no before(after) number is specified.
shift(range(1,5),0,0);

;//--------------------- RESULT ------------------

[
  [
    1
  ],
  [
    2
  ],
  [
    3
  ],
  [
    4
  ],
  [
    5
  ]
]

;//------------------- TEST-CASE -----------------

//specify before number
shift(range(1,5),1,0);

;//--------------------- RESULT ------------------

[
  [
    null,
    1
  ],
  [
    1,
    2
  ],
  [
    2,
    3
  ],
  [
    3,
    4
  ],
  [
    4,
    5
  ]
]

;//------------------- TEST-CASE -----------------

//specify after number
shift(range(1,5),0,1);

;//--------------------- RESULT ------------------

[
  [
    1,
    2
  ],
  [
    2,
    3
  ],
  [
    3,
    4
  ],
  [
    4,
    5
  ],
  [
    5,
    null
  ]
]

;//------------------- TEST-CASE -----------------

//if null
shift([],0,0);

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

//2.17 toArray
[]->toArray();

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

{}->toArray();

;//--------------------- RESULT ------------------

[
  {}
]

;//------------------- TEST-CASE -----------------

null->toArray();

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

[1,2,3]->toArray();

;//--------------------- RESULT ------------------

[
  1,
  2,
  3
]

;//------------------- TEST-CASE -----------------

{rcd:1}->toArray();

;//--------------------- RESULT ------------------

[
  {
    "rcd": 1
  }
]

;//------------------- TEST-CASE -----------------

1->toArray();

;//--------------------- RESULT ------------------

[
  1
]

;//------------------- TEST-CASE -----------------

"letter"->toArray();

;//--------------------- RESULT ------------------

[
  "letter"
]

;//------------------- TEST-CASE -----------------

3.14->toArray();

;//--------------------- RESULT ------------------

[
  3.14
]

;//------------------- TEST-CASE -----------------

true->toArray();

;//--------------------- RESULT ------------------

[
  true
]

;//------------------- TEST-CASE -----------------

//2.18 union
union(null)==[];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

union([1,2],[3,4],[5,6])==[1,2,3,4,5,6];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

union([1,2],null,[5,6])==[1,2,5,6];

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------


//3. core
//3.1 MathExpr
12*12-(4+10.1)*(-2.01) + 12.2/2 + 234.12 * 0 / 2;

;//--------------------- RESULT ------------------

178.441

;//------------------- TEST-CASE -----------------

[1,2,3] * [3,4,5];

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

[1,2,3] + [3,4,5];

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//defect 9394
10 * 2 + null - 18.23;

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

{a:1}+{b:2};

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" + " "+ "SUN" + " " + "Google" + " " + "Microsoft";

;//--------------------- RESULT ------------------

"IBM SUN Google Microsoft"

;//------------------- TEST-CASE -----------------

"IBM" + " "+ "SUN" + null ;

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

"IBM" * "SUN";

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" + 12;

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" * "SUN";

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" + "";

;//--------------------- RESULT ------------------

"IBM"

;//------------------- TEST-CASE -----------------

//3.2 not
//defect 9393
not true;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

not isnull(null);

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

//3.3 or
true or false;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

false or false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

true of true;

;//----- EXCEPTION -----

// antlr.NoViableAltException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

false or false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

12 or false;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

12 or true;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

null or true;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

null or false
"IBM" or "SUN";

;//----- EXCEPTION -----

// antlr.NoViableAltException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" or true;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//3.4 and
true and false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

false and false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

true and true;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

false and false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

12 and false;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

12 and true;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

null and true;

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

null and false
"IBM" and "SUN";

;//----- EXCEPTION -----

// antlr.NoViableAltException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" and true;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//3.5 exercise composition of or, and
false or true and false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

(false or true) and false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------
 
false or (true and false);

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

false or true or false;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

(false or true) or false;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

false or (true or false);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------


//4. number
//4.1 toNumber
toNumber(false);

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

toNumber(true);

;//--------------------- RESULT ------------------

1

;//------------------- TEST-CASE -----------------

toNumber("1234");

;//--------------------- RESULT ------------------

1234

;//------------------- TEST-CASE -----------------

toNumber("12.34");

;//--------------------- RESULT ------------------

12.34m

;//------------------- TEST-CASE -----------------

toNumber(null);

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

toNumber("IBM");

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.NumberFormatException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

toNumber("12" + "34");

;//--------------------- RESULT ------------------

1234

;//------------------- TEST-CASE -----------------

toNumber("12.IBM");

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.NumberFormatException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

toNumber(false and true);

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------


//5. record
//5.1 remap
remap({a:12, b:22}, {a:1, b:2});

;//--------------------- RESULT ------------------

{
  "a": 1,
  "b": 2
}

;//------------------- TEST-CASE -----------------

remap({a:1, b:2}, {a:3, d:4, e:5});

;//--------------------- RESULT ------------------

{
  "a": 3,
  "b": 2,
  "d": 4,
  "e": 5
}

;//------------------- TEST-CASE -----------------

remap({a:null, b:"SUN"}, {a:"IBM", d:4, e:5});

;//--------------------- RESULT ------------------

{
  "a": "IBM",
  "b": "SUN",
  "d": 4,
  "e": 5
}

;//------------------- TEST-CASE -----------------

//names of remap
names(remap({a:null, b:"SUN"}, {a:"IBM", d:4, e:5}));

;//--------------------- RESULT ------------------

[
  "a",
  "b",
  "d",
  "e"
]

;//------------------- TEST-CASE -----------------

fields(remap({a:null, b:"SUN"}, {a:"IBM", d:4, e:5}));

;//--------------------- RESULT ------------------

[
  [
    "a",
    "IBM"
  ],
  [
    "b",
    "SUN"
  ],
  [
    "d",
    4
  ],
  [
    "e",
    5
  ]
]

;//------------------- TEST-CASE -----------------

values(remap({a:null, b:"SUN"}, {a:"IBM", d:4, e:5}));

;//--------------------- RESULT ------------------

[
  "IBM",
  "SUN",
  4,
  5
]

;//------------------- TEST-CASE -----------------

//remap of remap
remap(remap({a:null, b:"SUN"}, {a:"IBM", d:4, e:5}), {d:4, e:9, f:"SUN"});

;//--------------------- RESULT ------------------

{
  "a": "IBM",
  "b": "SUN",
  "d": 4,
  "e": 9,
  "f": "SUN"
}

;//------------------- TEST-CASE -----------------

[remap(remap({a:null, b:"SUN"}, {a:"IBM", d:4, e:5}), {c: "Google", d:4, e:9, f:"SUN"})]-> transform (strcat($.a, " ", $.b, " ", $.c, " ", $.d, " ", $.e));

;//--------------------- RESULT ------------------

[
  "IBM SUN Google 4 9"
]

;//------------------- TEST-CASE -----------------

//exercise transform, group by of remap
[{Company:"Microsoft", StockPrice:12.54}, {Company: "IBM", StockPrice: 123.21}, {Company:"Apple", StockPrice: 432.98},
  remap({Company: "IBM", StockPrice: 123.21}, {Company: "IBM", StockPrice: 1221.32}),
  remap({Company: "Apple", StockPrice: 34.56}, {Company: "Apple", StockPrice: 891.43})
  ]
 -> group by $Name=$.Company into {$Name, MaxValue:max($[*].StockPrice)};

;//--------------------- RESULT ------------------

[
  {
    "MaxValue": 891.43,
    "Name": "Apple"
  },
  {
    "MaxValue": 1221.32,
    "Name": "IBM"
  },
  {
    "MaxValue": 12.54,
    "Name": "Microsoft"
  }
]

;//------------------- TEST-CASE -----------------

//exercise combination remap, hdfs, max and group by
[{Company:"Microsoft", StockPrice:12.54}, {Company: "IBM", StockPrice: 123.21}, {Company:"Apple", StockPrice: 432.98},
  remap({Company: "IBM", StockPrice: 123.21}, {Company: "IBM", StockPrice: 1221.32}),
  remap({Company: "Apple", StockPrice: 34.56}, {Company: "Apple", StockPrice: 891.43})
  ] -> write(hdfs("remap_test1"));

;//--------------------- RESULT ------------------

{
  "location": "remap_test1",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------

read(hdfs("remap_test1"))-> group by $Name=$.Company into {$Name, MaxValue:max($[*].StockPrice)};

;//--------------------- RESULT ------------------

[
  {
    "MaxValue": 891.43,
    "Name": "Apple"
  },
  {
    "MaxValue": 1221.32,
    "Name": "IBM"
  },
  {
    "MaxValue": 12.54,
    "Name": "Microsoft"
  }
]

;//------------------- TEST-CASE -----------------

remap({a:null, b:2, c:3}, {});

;//--------------------- RESULT ------------------

{
  "a": null,
  "b": 2,
  "c": 3
}

;//------------------- TEST-CASE -----------------

remap({}, {a:null, b:2, c:3});

;//--------------------- RESULT ------------------

{
  "a": null,
  "b": 2,
  "c": 3
}

;//------------------- TEST-CASE -----------------

remap({}, {a:null, b:2, c:3}, {d:4, e:5});

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

remap({a:null, b:2, c:3});

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

remap([], {a:null, b:2, c:3});

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

remap(null, {a:null, b:2, c:3});

;//--------------------- RESULT ------------------

{
  "a": null,
  "b": 2,
  "c": 3
}

;//------------------- TEST-CASE -----------------

remap({a:null, b:2, c:3}, null);

;//--------------------- RESULT ------------------

{
  "a": null,
  "b": 2,
  "c": 3
}

;//------------------- TEST-CASE -----------------

remap({}, {a:null, b:2, c:3}, {d:4, e:5});

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------


//5.2 values
values({a:1, b:2, c:3});

;//--------------------- RESULT ------------------

[
  1,
  2,
  3
]

;//------------------- TEST-CASE -----------------

values ({d:1, e:2, f:3});

;//--------------------- RESULT ------------------

[
  1,
  2,
  3
]

;//------------------- TEST-CASE -----------------

values({a:"IBM", b:"SUN", c:12});

;//--------------------- RESULT ------------------

[
  "IBM",
  "SUN",
  12
]

;//------------------- TEST-CASE -----------------

values({a:"IBM", b:["SUN","GOOGLE", "MICROSOFT"], c:{c:12, d:"LOGO", e:"ADDRESS"}, f:null});

;//--------------------- RESULT ------------------

[
  "IBM",
  [
    "SUN",
    "GOOGLE",
    "MICROSOFT"
  ],
  {
    "c": 12,
    "d": "LOGO",
    "e": "ADDRESS"
  },
  null
]

;//------------------- TEST-CASE -----------------

//5.3 names
names({a:1, b:2, c:3});

;//--------------------- RESULT ------------------

[
  "a",
  "b",
  "c"
]

;//------------------- TEST-CASE -----------------

names ({d:1, e:2, f:3});

;//--------------------- RESULT ------------------

[
  "d",
  "e",
  "f"
]

;//------------------- TEST-CASE -----------------

names({a:"IBM", b:"SUN", c:12});

;//--------------------- RESULT ------------------

[
  "a",
  "b",
  "c"
]

;//------------------- TEST-CASE -----------------

names({a:"IBM", b:["SUN","GOOGLE", "MICROSOFT"], c:{c:12, d:"LOGO", e:"ADDRESS"}, f:null});

;//--------------------- RESULT ------------------

[
  "a",
  "b",
  "c",
  "f"
]

;//------------------- TEST-CASE -----------------

//5.4 fields
fields({a:1, b:2, c:3});

;//--------------------- RESULT ------------------

[
  [
    "a",
    1
  ],
  [
    "b",
    2
  ],
  [
    "c",
    3
  ]
]

;//------------------- TEST-CASE -----------------

fields ({d:1, e:2, f:3});

;//--------------------- RESULT ------------------

[
  [
    "d",
    1
  ],
  [
    "e",
    2
  ],
  [
    "f",
    3
  ]
]

;//------------------- TEST-CASE -----------------

fields({a:"IBM", b:"SUN", c:12});

;//--------------------- RESULT ------------------

[
  [
    "a",
    "IBM"
  ],
  [
    "b",
    "SUN"
  ],
  [
    "c",
    12
  ]
]

;//------------------- TEST-CASE -----------------

fields({a:"IBM", b:["SUN","GOOGLE", "MICROSOFT"], c:{c:12, d:"LOGO", e:"ADDRESS"}, f:null});

;//--------------------- RESULT ------------------

[
  [
    "a",
    "IBM"
  ],
  [
    "b",
    [
      "SUN",
      "GOOGLE",
      "MICROSOFT"
    ]
  ],
  [
    "c",
    {
      "c": 12,
      "d": "LOGO",
      "e": "ADDRESS"
    }
  ],
  [
    "f",
    null
  ]
]

;//------------------- TEST-CASE -----------------


//6. regex
//6.1 regexExtract
regex_extract( regex("hi"), "bye, hi, bye, hi" );

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

regex_extract( regex(" "), "bye hi bye hi" );

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

regex_extract( regex("good"), "good morning everybody, goode afternoon everybody" );

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

regex_extract( regex("byebye"), "good morning everybody, goode afternoon everybody" );

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

regex_extract( regex(","), "good morning everybody, goode afternoon everybody" );

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------


//7. span
//7.1 spanExtract
span_extract("some big string", span(2,4));

;//--------------------- RESULT ------------------

"me"

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2,100));

;//--------------------- RESULT ------------------

"me big string"

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2,-20));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2,2));

;//--------------------- RESULT ------------------

""

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2,12.20));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2, "IBM"));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2));

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(0,10));

;//--------------------- RESULT ------------------

"some big s"

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(-2,10));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//defect
span_extract("some big string", span(null,10));

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2,10,20));

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(null));

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract(12445, span(2,4));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------


//8. string
//8.1 strSplit
strSplit("I love the game", " ");

;//--------------------- RESULT ------------------

[
  "I",
  "love",
  "the",
  "game"
]

;//------------------- TEST-CASE -----------------

strSplit("I love, the game", ",");

;//--------------------- RESULT ------------------

[
  "I love",
  " the game"
]

;//------------------- TEST-CASE -----------------

strSplit("I love basketball and football", "e");

;//--------------------- RESULT ------------------

[
  "I lov",
  " bask",
  "tball and football"
]

;//------------------- TEST-CASE -----------------

strSplit("Iaa loveaa basketballaa andaa footballaa", "aa");

;//--------------------- RESULT ------------------

[
  "I",
  " love",
  " basketball",
  " and",
  " football"
]

;//------------------- TEST-CASE -----------------

strSplit("I love 'basketball' and football", "'");

;//--------------------- RESULT ------------------

[
  "I love ",
  "basketball",
  " and football"
]

;//------------------- TEST-CASE -----------------

strSplit("I love the game", null);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.NullPointerException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

strSplit("����,����,����,", ",");

;//--------------------- RESULT ------------------

[
  "����",
  "����",
  "����"
]

;//------------------- TEST-CASE -----------------

strSplit("������������������", "��");

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------


//8.2 strJoin
strJoin(["I","love", "the","game","!"], " ");

;//--------------------- RESULT ------------------

"I love the game !"

;//------------------- TEST-CASE -----------------

strJoin(["I","love", "the","game","!"], " ", 123);

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

strJoin(["I","love", "the","game","!"]);

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

strJoin(["I","love", "the","game","!"], {a:12});

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.Exception

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

strJoin(["����","����", "����"], " ");

;//--------------------- RESULT ------------------

"���� ���� ����"

;//------------------- TEST-CASE -----------------

strJoin(["��a��","��b��", "��c��"], "��");

;//--------------------- RESULT ------------------

"��a������b������c��"

;//------------------- TEST-CASE -----------------

strJoin(["��a��","��b��", "��c��"], "��!");

;//--------------------- RESULT ------------------

"��a����!��b����!��c��"

;//------------------- TEST-CASE -----------------

//test unsupported separator type
strJoin(["I","love", "the","game","!"], {a:1});

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.Exception

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

strJoin(["I","love", "the","game","!"], [" "]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.Exception

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//8.3 substring
substring("I love the game", 2, 7);

;//--------------------- RESULT ------------------

"love "

;//------------------- TEST-CASE -----------------

substring("I love the game", 2);

;//--------------------- RESULT ------------------

"love the game"

;//------------------- TEST-CASE -----------------

substring("I love the game");

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", -4);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.StringIndexOutOfBoundsException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", 2.4);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ArithmeticException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", 2, 100);

;//--------------------- RESULT ------------------

"love the game"

;//------------------- TEST-CASE -----------------

substring("I love the game", "I", 2);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", 2, "M");

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", 0, 7);

;//--------------------- RESULT ------------------

"I love "

;//------------------- TEST-CASE -----------------

substring("��2��4��6��8��10��12��14��16��18��20��22��24", 0, 1);

;//--------------------- RESULT ------------------

"�"

;//------------------- TEST-CASE -----------------

substring("��2��4��6��8��10��12��14��16��18��20��22��24", 0, 2);

;//--------------------- RESULT ------------------

"��"

;//------------------- TEST-CASE -----------------

substring("��2��4��6��8��10��12��14��16��18��20��22��24", 0, 3);

;//--------------------- RESULT ------------------

"��2"

;//------------------- TEST-CASE -----------------

substring("��2��4��6��8��10��12��14��16��18��20��22��24", 0, 4);

;//--------------------- RESULT ------------------

"��2�"

;//------------------- TEST-CASE -----------------

substring("��2��4��6��8��10��12��14��16��18��20��22��24", 16, 22);

;//--------------------- RESULT ------------------

"��12��"

;//------------------- TEST-CASE -----------------

substring("��2��4��6��8��10��12��14��16��18��20��22��24", 15, 22);

;//--------------------- RESULT ------------------

"0��12��"

;//------------------- TEST-CASE -----------------

substring("���������������ִ���", 7, 11);

;//--------------------- RESULT ------------------

"����"

;//------------------- TEST-CASE -----------------


//9. system
//9.1 ls
//prepare some testing files
hdfsShell("-rm ls_test*") * 0;

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test1.lsa");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test2.lsb");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test3.lsb");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test3.lsc");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test4.lsc");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test5.lsc");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test6.lsd");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

count(ls(""));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

count(ls("."));

;//--------------------- RESULT ------------------

1

;//------------------- TEST-CASE -----------------

count(ls("./ls_test*"));

;//--------------------- RESULT ------------------

7

;//------------------- TEST-CASE -----------------

count(ls("./*.lsc"));

;//--------------------- RESULT ------------------

3

;//------------------- TEST-CASE -----------------

count(ls("./*.lsa"));

;//--------------------- RESULT ------------------

1

;//------------------- TEST-CASE -----------------

count(ls("*.lsc"));

;//--------------------- RESULT ------------------

3

;//------------------- TEST-CASE -----------------

count(ls("*.lsb"));

;//--------------------- RESULT ------------------

2

;//------------------- TEST-CASE -----------------

count(ls("*ls_non_existing*"));

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

ls("*test?.lsc") -> transform each k ({fieldCount: count(names(k)), fieldName:names(k)});

;//--------------------- RESULT ------------------

[
  {
    "fieldCount": 9,
    "fieldName": [
      "accessTime",
      "blockSize",
      "group",
      "length",
      "modifyTime",
      "owner",
      "path",
      "permission",
      "replication"
    ]
  },
  {
    "fieldCount": 9,
    "fieldName": [
      "accessTime",
      "blockSize",
      "group",
      "length",
      "modifyTime",
      "owner",
      "path",
      "permission",
      "replication"
    ]
  },
  {
    "fieldCount": 9,
    "fieldName": [
      "accessTime",
      "blockSize",
      "group",
      "length",
      "modifyTime",
      "owner",
      "path",
      "permission",
      "replication"
    ]
  }
]

;//------------------- TEST-CASE -----------------

//file doesn't exist
count(ls("./*.noexisting"));

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

//path doesn't exist
count(ls("noexisting/"));

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

//remove all testing files
hdfsShell("-rm ls_test*") * 0;

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------


//10. top
//10.1 top
[1,3,2] -> top 2 by [$ desc];

;//--------------------- RESULT ------------------

[
  3,
  2
]

;//------------------- TEST-CASE -----------------

[1,3,2] -> top 2 by [$ asc];

;//--------------------- RESULT ------------------

[
  1,
  2
]

;//------------------- TEST-CASE -----------------

[1,3,2] -> top 1.5 by [$ desc];

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ArithmeticException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

[1,3,2] -> top 0 by [$ asc];

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

[1,3,2] -> top -2 by [$ asc];

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

[1,3,2] -> top 100 by [$ asc];

;//--------------------- RESULT ------------------

[
  1,
  2,
  3
]

;//------------------- TEST-CASE -----------------

//record as input, invalidated
{a:23, b:34} -> top 1;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//for number
[1,2,2,3,6,5,8] -> top 2 by [$ asc];

;//--------------------- RESULT ------------------

[
  1,
  2
]

;//------------------- TEST-CASE -----------------

//for string
["IBM","Google","Microsoft","Apple","Intel", "ATT", "", null] -> top 5 by [$ asc];

;//--------------------- RESULT ------------------

[
  null,
  "",
  "ATT",
  "Apple",
  "Google"
]

;//------------------- TEST-CASE -----------------

//composition of number and string
["IBM","Google","Microsoft","Apple","Intel", "ATT", "", null, 12, 34.3, -12, 0] -> top 8 by [$ asc];

;//--------------------- RESULT ------------------

[
  null,
  "",
  "ATT",
  "Apple",
  "Google",
  "IBM",
  "Intel",
  "Microsoft"
]

;//------------------- TEST-CASE -----------------

["IBM","Google","Microsoft","Apple","Intel", "ATT", "", null, 12, 34.3, -12, 0] -> top 28 by [$ asc];

;//--------------------- RESULT ------------------

[
  null,
  "",
  "ATT",
  "Apple",
  "Google",
  "IBM",
  "Intel",
  "Microsoft",
  -12,
  0,
  12,
  34.3
]

;//------------------- TEST-CASE -----------------

//composition of number, string, boolean, record and array
["IBM","Google","Microsoft","", null, 12, 34.3, -12, 0, ["a","bb","bc"], [12,34,-23],{a:23, b:"IPHONE", c:"New York"}, false, true] -> top 14 by [$ asc];

;//--------------------- RESULT ------------------

[
  null,
  [
    "a",
    "bb",
    "bc"
  ],
  [
    12,
    34,
    -23
  ],
  {
    "a": 23,
    "b": "IPHONE",
    "c": "New York"
  },
  false,
  true,
  "",
  "Google",
  "IBM",
  "Microsoft",
  -12,
  0,
  12,
  34.3
]

;//------------------- TEST-CASE -----------------


//10.2 explain
explain [{a:'a'},{a:'b'}]->transform $.a;
;//------------------- TEST-CASE -----------------

explain val:=1;
;//------------------- TEST-CASE -----------------

explain extern ext:=1;
;//------------------- TEST-CASE -----------------

;//------------------- TEST-DONE -----------------
