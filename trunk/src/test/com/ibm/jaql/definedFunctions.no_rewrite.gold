
;//------------------- TEST-CASE -----------------
//1. agg
//1.1 exercise count function
//sanity testing
count([1,2,3,4]);

;//--------------------- RESULT ------------------

4

;//------------------- TEST-CASE -----------------

count([false, 12.34, "IBM", true, 21]);

;//--------------------- RESULT ------------------

5

;//------------------- TEST-CASE -----------------

count([{a:12, b:"IBM"}, false, "IBM", [1,2,3,4,5,6], null, "", 12.345]);

;//--------------------- RESULT ------------------

7

;//------------------- TEST-CASE -----------------

count([]);

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

count([null]);

;//--------------------- RESULT ------------------

1

;//------------------- TEST-CASE -----------------

count(null);

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

count([IBM, false, 12.34]);

;//----- EXCEPTION -----

// java.lang.IndexOutOfBoundsException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

[{a:12, b:"IBM"}, false, "IBM", [1,2,3,4,5,6], null, "", 12.345] -> count();

;//--------------------- RESULT ------------------

7

;//------------------- TEST-CASE -----------------

null -> count();

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

[null] -> count();

;//--------------------- RESULT ------------------

1

;//------------------- TEST-CASE -----------------

//error condition
count();

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

count(12);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

count("IBM");

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

count([false, 12.34, IBM]);

;//----- EXCEPTION -----

// java.lang.IndexOutOfBoundsException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

count({a:1, b:2, c:3});

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//1.2 exercise sum function
//sanity testing
sum([1,2,4]);

;//--------------------- RESULT ------------------

7

;//------------------- TEST-CASE -----------------

sum([]);

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

sum([0]);

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

[1,2,4] -> sum();

;//--------------------- RESULT ------------------

7

;//------------------- TEST-CASE -----------------

//error condition
sum(["IBM","SUN",4]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

[1,2,4] -> sum([1,3,6]);

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

sum({a:1, b:2});

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

sum([{a:1, b:2}, {c:23,d:12.3}]);

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//1.3 exercise max function
//sanity testing
max([1,2,4,-12, 8, 3]);

;//--------------------- RESULT ------------------

8

;//------------------- TEST-CASE -----------------

[1,2,4,-12, 8, 3] -> max();

;//--------------------- RESULT ------------------

8

;//------------------- TEST-CASE -----------------

max([1,2,4,-12, 8, null]);

;//--------------------- RESULT ------------------

8

;//------------------- TEST-CASE -----------------

max([]);

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

//error condition
max(["IBM","SUN",4);

;//----- EXCEPTION -----

// antlr.MismatchedTokenException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

max(["IBM","SUN",4]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

max([{a:12, b:"IBM"}, false, "IBM", [1,2,3,4,5,6], null, "", 12.345]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//1.4 exercise count/sum/max from hdfs file system
[
  range(1,200),
  range(300,1000),
  range(10000,12000),
  range(-1000,-700)
  ] -> write(hdfs("agg_test1"));

;//--------------------- RESULT ------------------

{
  "location": "agg_test1",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------

read(hdfs("agg_test1")) -> transform each k ({count: count(k), sum:sum(k), max:max(k)});

;//--------------------- RESULT ------------------

[
  {
    "count": 200,
    "max": 200,
    "sum": 20100
  },
  {
    "count": 701,
    "max": 1000,
    "sum": 455650
  },
  {
    "count": 2001,
    "max": 12000,
    "sum": 22011000
  },
  {
    "count": 301,
    "max": -700,
    "sum": -255850
  }
]

;//------------------- TEST-CASE -----------------

[
  {employee_id:1, dept: "Sales",     age: 20, income:12000, Address: "Wall Street 32"},
  {employee_id:2, dept: "Sales",     age: 28, income:13000, Address: "Washington Road 92"},
  {employee_id:3, dept: "PreSales",  age: 35, income:15000, Address: "Beijing Road 92"},
  {employee_id:4, dept: "Research",  age: 32, income:10000, Address: "East Road 92, Shangdi district"},
  {employee_id:5, dept: "HR",        age: 29, income:20000, Address: "West Road 120, Shangdi district"},
  {employee_id:6, dept: "PreSales",  age: 43, income:5000,  Address: "Xi'an Road 33"},
  {employee_id:7, dept: "Research",  age: 30, income:8000,  Address: "Heping Road 23"}
  ] -> write(hdfs("agg_test2"));

;//--------------------- RESULT ------------------

{
  "location": "agg_test2",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------

read(hdfs("agg_test2")) -> group by $dept_group = $.dept 
                           into {$dept_group, employee_count:count($[*].income), total_income:sum($[*].income), income_max:max($[*].income)};

;//--------------------- RESULT ------------------

[
  {
    "dept_group": "Sales",
    "employee_count": 2,
    "income_max": 13000,
    "total_income": 25000
  },
  {
    "dept_group": "HR",
    "employee_count": 1,
    "income_max": 20000,
    "total_income": 20000
  },
  {
    "dept_group": "Research",
    "employee_count": 2,
    "income_max": 10000,
    "total_income": 18000
  },
  {
    "dept_group": "PreSales",
    "employee_count": 2,
    "income_max": 15000,
    "total_income": 20000
  }
]

;//------------------- TEST-CASE -----------------

read(hdfs("agg_test2")) -> filter $.age >25 -> group by $dept_group = $.dept 
                           into {$dept_group, employee_count:count($[*].income), total_income:sum($[*].income), income_max:max($[*].income)};

;//--------------------- RESULT ------------------

[
  {
    "dept_group": "Sales",
    "employee_count": 1,
    "income_max": 13000,
    "total_income": 13000
  },
  {
    "dept_group": "HR",
    "employee_count": 1,
    "income_max": 20000,
    "total_income": 20000
  },
  {
    "dept_group": "Research",
    "employee_count": 2,
    "income_max": 10000,
    "total_income": 18000
  },
  {
    "dept_group": "PreSales",
    "employee_count": 2,
    "income_max": 15000,
    "total_income": 20000
  }
]

;//------------------- TEST-CASE -----------------


//2. array
//2.1 exists
exists([12,23]);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

exists(12);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

exists({a:12, b:"IBM"})
exists(false);

;//----- EXCEPTION -----

// antlr.NoViableAltException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

exists(["IBM","SUN",4]);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

["IBM","SUN",4] -> exists();

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

exists();

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

exists(null);

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

exists([null]);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

exists([null, "IBM"]);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

//2.2 distinct
distinct([1,22,3,4,3,22,7,8,7]);

;//--------------------- RESULT ------------------

[
  8,
  1,
  7,
  4,
  22,
  3
]

;//------------------- TEST-CASE -----------------

[1,22,3,4,3,22,7,8,7] -> distinct();

;//--------------------- RESULT ------------------

[
  8,
  1,
  7,
  4,
  22,
  3
]

;//------------------- TEST-CASE -----------------

distinct(["IBM", false, true, false, 123.34, 456, 809, 123.34, "sun", "ibm", "ibm"]);

;//--------------------- RESULT ------------------

[
  false,
  "sun",
  123.34,
  "ibm",
  "IBM",
  true,
  809,
  456
]

;//------------------- TEST-CASE -----------------

distinct([null, "", false, true]);

;//--------------------- RESULT ------------------

[
  false,
  null,
  true,
  ""
]

;//------------------- TEST-CASE -----------------

distinct([null, {a:12, b:21},{a:12, b:21}, {a:12, b:"IBM"}, {a:12, b:"IBM"}, ["ibm", "sun", 12.34], ["sun", "ibm", 12.34]]);

;//--------------------- RESULT ------------------

[
  null,
  {
    "a": 12,
    "b": 21
  },
  {
    "a": 12,
    "b": "IBM"
  },
  [
    "ibm",
    "sun",
    12.34
  ],
  [
    "sun",
    "ibm",
    12.34
  ]
]

;//------------------- TEST-CASE -----------------

distinct([{c:"ibm", d:"sun"}, {d:"sun",  c:"ibm"}]);

;//--------------------- RESULT ------------------

[
  {
    "c": "ibm",
    "d": "sun"
  }
]

;//------------------- TEST-CASE -----------------

distinct([["ibm", "sun"], ["sun",  "ibm"], ["SUN", "ibm"]]);

;//--------------------- RESULT ------------------

[
  [
    "SUN",
    "ibm"
  ],
  [
    "sun",
    "ibm"
  ],
  [
    "ibm",
    "sun"
  ]
]

;//------------------- TEST-CASE -----------------

distinct(12);

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

distinct({a:12, b:"IBM"});

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

distinct(null);

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

distinct([null]);

;//--------------------- RESULT ------------------

[
  null
]

;//------------------- TEST-CASE -----------------

//2.3 arrayToRecord
arrayToRecord(["SUN", "IBM"], [123,345]);

;//--------------------- RESULT ------------------

{
  "IBM": 345,
  "SUN": 123
}

;//------------------- TEST-CASE -----------------

arrayToRecord();

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"]);

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], 123);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM", ""], [1,2,3]);

;//--------------------- RESULT ------------------

{
  "": 3,
  "IBM": 2,
  "SUN": 1
}

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], [1, 2, 3]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], [1]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.AssertionError

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], [1, null]);

;//--------------------- RESULT ------------------

{
  "IBM": null,
  "SUN": 1
}

;//------------------- TEST-CASE -----------------

//defect 9379
arrayToRecord([null,"ibm"],[1,2]);

;//--------------------- RESULT ------------------

{

;//----- EXCEPTION -----

// java.lang.NullPointerException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], [{price:123},{address:"Beijing"}]);

;//--------------------- RESULT ------------------

{
  "IBM": {
    "address": "Beijing"
  },
  "SUN": {
    "price": 123
  }
}

;//------------------- TEST-CASE -----------------

arrayToRecord(["SUN", "IBM"], {a:1, b:2});

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

arrayToRecord({a:1, b:2}, ["SUN", "IBM"]);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------


//3. core
//3.1 MathExpr
12*12-(4+10.1)*(-2.01) + 12.2/2 + 234.12 * 0 / 2;

;//--------------------- RESULT ------------------

178.441

;//------------------- TEST-CASE -----------------

[1,2,3] * [3,4,5];

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

[1,2,3] + [3,4,5];

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//defect 9394
10 * 2 + null - 18.23;

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

{a:1}+{b:2};

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" + " "+ "SUN" + " " + "Google" + " " + "Microsoft";

;//--------------------- RESULT ------------------

"IBM SUN Google Microsoft"

;//------------------- TEST-CASE -----------------

"IBM" + " "+ "SUN" + null ;

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

"IBM" * "SUN";

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" + 12;

;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" * "SUN";

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.RuntimeException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" + "";

;//--------------------- RESULT ------------------

"IBM"

;//------------------- TEST-CASE -----------------

//3.2 not
//defect 9393
not true;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

not isnull(null);

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

//3.3 or
true or false;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

false or false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

true of true;

;//----- EXCEPTION -----

// antlr.NoViableAltException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

false or false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

12 or false;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

12 or true;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

null or true;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

null or false
"IBM" or "SUN";

;//----- EXCEPTION -----

// antlr.NoViableAltException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" or true;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//3.4 and
true and false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

false and false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

true and true;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

false and false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

12 and false;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

12 and true;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

null and true;

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

null and false
"IBM" and "SUN";

;//----- EXCEPTION -----

// antlr.NoViableAltException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

"IBM" and true;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//3.5 exercise composition of or, and
false or true and false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

(false or true) and false;

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------
 
false or (true and false);

;//--------------------- RESULT ------------------

false

;//------------------- TEST-CASE -----------------

false or true or false;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

(false or true) or false;

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------

false or (true or false);

;//--------------------- RESULT ------------------

true

;//------------------- TEST-CASE -----------------


//4. number
//4.1 toNumber
toNumber(false);

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

toNumber(true);

;//--------------------- RESULT ------------------

1

;//------------------- TEST-CASE -----------------

toNumber("1234");

;//--------------------- RESULT ------------------

1234

;//------------------- TEST-CASE -----------------

toNumber("12.34");

;//--------------------- RESULT ------------------

12.34m

;//------------------- TEST-CASE -----------------

toNumber(null);

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

toNumber("IBM");

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.NumberFormatException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

toNumber("12" + "34");

;//--------------------- RESULT ------------------

1234

;//------------------- TEST-CASE -----------------

toNumber("12.IBM");

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.NumberFormatException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

toNumber(false and true);

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------


//5. record
//5.1 remap
remap({a:12, b:22}, {a:1, b:2});

;//--------------------- RESULT ------------------

{
  "a": 1,
  "b": 2
}

;//------------------- TEST-CASE -----------------

remap({a:1, b:2}, {a:3, d:4, e:5});

;//--------------------- RESULT ------------------

{
  "a": 3,
  "b": 2,
  "d": 4,
  "e": 5
}

;//------------------- TEST-CASE -----------------

remap({a:null, b:"SUN"}, {a:"IBM", d:4, e:5});

;//--------------------- RESULT ------------------

{
  "a": "IBM",
  "b": "SUN",
  "d": 4,
  "e": 5
}

;//------------------- TEST-CASE -----------------

remap({a:null, b:2, c:3}, {});

;//--------------------- RESULT ------------------

{
  "a": null,
  "b": 2,
  "c": 3
}

;//------------------- TEST-CASE -----------------

remap({}, {a:null, b:2, c:3});

;//--------------------- RESULT ------------------

{
  "a": null,
  "b": 2,
  "c": 3
}

;//------------------- TEST-CASE -----------------

remap({}, {a:null, b:2, c:3}, {d:4, e:5});

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

remap({a:null, b:2, c:3});

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

remap([], {a:null, b:2, c:3});

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

remap(null, {a:null, b:2, c:3});

;//--------------------- RESULT ------------------

{
  "a": null,
  "b": 2,
  "c": 3
}

;//------------------- TEST-CASE -----------------

remap({a:null, b:2, c:3}, null);

;//--------------------- RESULT ------------------

{
  "a": null,
  "b": 2,
  "c": 3
}

;//------------------- TEST-CASE -----------------

remap({}, {a:null, b:2, c:3}, {d:4, e:5});

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//5.2 values
values({a:1, b:2, c:3});

;//--------------------- RESULT ------------------

[
  1,
  2,
  3
]

;//------------------- TEST-CASE -----------------

values ({d:1, e:2, f:3});

;//--------------------- RESULT ------------------

[
  1,
  2,
  3
]

;//------------------- TEST-CASE -----------------

values({a:"IBM", b:"SUN", c:12});

;//--------------------- RESULT ------------------

[
  "IBM",
  "SUN",
  12
]

;//------------------- TEST-CASE -----------------

values({a:"IBM", b:["SUN","GOOGLE", "MICROSOFT"], c:{c:12, d:"LOGO", e:"ADDRESS"}, f:null});

;//--------------------- RESULT ------------------

[
  "IBM",
  [
    "SUN",
    "GOOGLE",
    "MICROSOFT"
  ],
  {
    "c": 12,
    "d": "LOGO",
    "e": "ADDRESS"
  },
  null
]

;//------------------- TEST-CASE -----------------

//5.3 names
names({a:1, b:2, c:3});

;//--------------------- RESULT ------------------

[
  "a",
  "b",
  "c"
]

;//------------------- TEST-CASE -----------------

names ({d:1, e:2, f:3});

;//--------------------- RESULT ------------------

[
  "d",
  "e",
  "f"
]

;//------------------- TEST-CASE -----------------

names({a:"IBM", b:"SUN", c:12});

;//--------------------- RESULT ------------------

[
  "a",
  "b",
  "c"
]

;//------------------- TEST-CASE -----------------

names({a:"IBM", b:["SUN","GOOGLE", "MICROSOFT"], c:{c:12, d:"LOGO", e:"ADDRESS"}, f:null});

;//--------------------- RESULT ------------------

[
  "a",
  "b",
  "c",
  "f"
]

;//------------------- TEST-CASE -----------------

//5.4 fields
fields({a:1, b:2, c:3});

;//--------------------- RESULT ------------------

[
  [
    "a",
    1
  ],
  [
    "b",
    2
  ],
  [
    "c",
    3
  ]
]

;//------------------- TEST-CASE -----------------

fields ({d:1, e:2, f:3});

;//--------------------- RESULT ------------------

[
  [
    "d",
    1
  ],
  [
    "e",
    2
  ],
  [
    "f",
    3
  ]
]

;//------------------- TEST-CASE -----------------

fields({a:"IBM", b:"SUN", c:12});

;//--------------------- RESULT ------------------

[
  [
    "a",
    "IBM"
  ],
  [
    "b",
    "SUN"
  ],
  [
    "c",
    12
  ]
]

;//------------------- TEST-CASE -----------------

fields({a:"IBM", b:["SUN","GOOGLE", "MICROSOFT"], c:{c:12, d:"LOGO", e:"ADDRESS"}, f:null});

;//--------------------- RESULT ------------------

[
  [
    "a",
    "IBM"
  ],
  [
    "b",
    [
      "SUN",
      "GOOGLE",
      "MICROSOFT"
    ]
  ],
  [
    "c",
    {
      "c": 12,
      "d": "LOGO",
      "e": "ADDRESS"
    }
  ],
  [
    "f",
    null
  ]
]

;//------------------- TEST-CASE -----------------


//6. regex
//6.1 regexExtract

//7. span
//7.1 spanExtract
span_extract("some big string", span(2,4));

;//--------------------- RESULT ------------------

"me"

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2,100));

;//--------------------- RESULT ------------------

"me big string"

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2,-20));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2,2));

;//--------------------- RESULT ------------------

""

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2,12.20));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2, "IBM"));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2));

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(0,10));

;//--------------------- RESULT ------------------

"some big s"

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(-2,10));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//defect ???????????????
span_extract("some big string", span(null,10));

;//--------------------- RESULT ------------------

null

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(2,10,20));

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract("some big string", span(null));

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

span_extract(12445, span(2,4));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------


//8. string
//8.1 strSplit
strSplit("I love the game", " ");

;//--------------------- RESULT ------------------

[
  "I",
  "love",
  "the",
  "game"
]

;//------------------- TEST-CASE -----------------

strSplit("I love, the game", ",");

;//--------------------- RESULT ------------------

[
  "I love",
  " the game"
]

;//------------------- TEST-CASE -----------------

strSplit("I love basketball and football", "e");

;//--------------------- RESULT ------------------

[
  "I lov",
  " bask",
  "tball and football"
]

;//------------------- TEST-CASE -----------------

strSplit("I love 'basketball' and football", "'");

;//--------------------- RESULT ------------------

[
  "I love ",
  "basketball",
  " and football"
]

;//------------------- TEST-CASE -----------------

strSplit("I love the game", null);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.NullPointerException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//8.2 strJoin
strJoin(["I","love", "the","game","!"], " ");

;//--------------------- RESULT ------------------

"I love the game !"

;//------------------- TEST-CASE -----------------

strJoin(["I","love", "the","game","!"], " ", 123);

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

strJoin(["I","love", "the","game","!"]);

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

strJoin(["I","love", "the","game","!"], {a:12});

;//--------------------- RESULT ------------------

"I{\n  \"a\": 12\n}love{\n  \"a\": 12\n}the{\n  \"a\": 12\n}game{\n  \"a\": 12\n}!"

;//------------------- TEST-CASE -----------------

//defect 9395
strJoin(["I","love", "the","game","!"], {a:1});

;//--------------------- RESULT ------------------

"I{\n  \"a\": 1\n}love{\n  \"a\": 1\n}the{\n  \"a\": 1\n}game{\n  \"a\": 1\n}!"

;//------------------- TEST-CASE -----------------

strJoin(["I","love", "the","game","!"], [" "]);

;//--------------------- RESULT ------------------

"I[\n  \" \"\n]love[\n  \" \"\n]the[\n  \" \"\n]game[\n  \" \"\n]!"

;//------------------- TEST-CASE -----------------

//8.3 substring
substring("I love the game", 2, 7);

;//--------------------- RESULT ------------------

"love "

;//------------------- TEST-CASE -----------------

substring("I love the game", 2);

;//--------------------- RESULT ------------------

"love the game"

;//------------------- TEST-CASE -----------------

substring("I love the game");

;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", -4);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.StringIndexOutOfBoundsException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", 2.4);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ArithmeticException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", 2, 100);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.StringIndexOutOfBoundsException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", "I", 2);

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", 2, "M");

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

substring("I love the game", 0, 7);

;//--------------------- RESULT ------------------

"I love "

;//------------------- TEST-CASE -----------------


//9. system
//9.1 ls
//prepare some testing files
hdfsShell("-rm ls_test*") * 0;

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test1.lsa");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test2.lsb");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test3.lsb");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test3.lsc");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test4.lsc");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test5.lsc");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

hdfsShell("-touchz ls_test6.lsd");

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

count(ls(""));

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.IllegalArgumentException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

count(ls("."));

;//--------------------- RESULT ------------------

1

;//------------------- TEST-CASE -----------------

count(ls("./ls_test*"));

;//--------------------- RESULT ------------------

7

;//------------------- TEST-CASE -----------------

count(ls("./*.lsc"));

;//--------------------- RESULT ------------------

3

;//------------------- TEST-CASE -----------------

count(ls("./*.lsa"));

;//--------------------- RESULT ------------------

1

;//------------------- TEST-CASE -----------------

count(ls("*.lsc"));

;//--------------------- RESULT ------------------

3

;//------------------- TEST-CASE -----------------

count(ls("*.lsb"));

;//--------------------- RESULT ------------------

2

;//------------------- TEST-CASE -----------------

count(ls("*ls_non_existing*"));

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

ls("*test?.lsc") -> transform each k ({fieldCount: count(names(k)), fieldName:names(k)});

;//--------------------- RESULT ------------------

[
  {
    "fieldCount": 9,
    "fieldName": [
      "accessTime",
      "blockSize",
      "group",
      "length",
      "modifyTime",
      "owner",
      "path",
      "permission",
      "replication"
    ]
  },
  {
    "fieldCount": 9,
    "fieldName": [
      "accessTime",
      "blockSize",
      "group",
      "length",
      "modifyTime",
      "owner",
      "path",
      "permission",
      "replication"
    ]
  },
  {
    "fieldCount": 9,
    "fieldName": [
      "accessTime",
      "blockSize",
      "group",
      "length",
      "modifyTime",
      "owner",
      "path",
      "permission",
      "replication"
    ]
  }
]

;//------------------- TEST-CASE -----------------

//file doesn't exist
count(ls("./*.noexisting"));

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

//path doesn't exist
count(ls("noexisting/"));

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------

//remove all testing files
hdfsShell("-rm ls_test*") * 0;

;//--------------------- RESULT ------------------

0

;//------------------- TEST-CASE -----------------


//10. top
//10.1 top
[1,3,2] -> top 2 by [$ desc];

;//--------------------- RESULT ------------------

[
  3,
  2
]

;//------------------- TEST-CASE -----------------

[1,3,2] -> top 2 by [$ asc];

;//--------------------- RESULT ------------------

[
  1,
  2
]

;//------------------- TEST-CASE -----------------

[1,3,2] -> top 1.5 by [$ desc];

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ArithmeticException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

[1,3,2] -> top 0 by [$ asc];

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

[1,3,2] -> top -2 by [$ asc];

;//--------------------- RESULT ------------------

[]

;//------------------- TEST-CASE -----------------

[1,3,2] -> top 100 by [$ asc];

;//--------------------- RESULT ------------------

[
  1,
  2,
  3
]

;//------------------- TEST-CASE -----------------

//record as input, invalidated
{a:23, b:34} -> top 1;

;//--------------------- RESULT ------------------



;//----- EXCEPTION -----

// java.lang.ClassCastException

;//------------------- TEST-CASE -----------------

;//------------------- TEST-CASE -----------------

//for number
[1,2,2,3,6,5,8] -> top 2 by [$ asc];

;//--------------------- RESULT ------------------

[
  1,
  2
]

;//------------------- TEST-CASE -----------------

//for string
["IBM","Google","Microsoft","Apple","Intel", "ATT", "", null] -> top 5 by [$ asc];

;//--------------------- RESULT ------------------

[
  null,
  "",
  "ATT",
  "Apple",
  "Google"
]

;//------------------- TEST-CASE -----------------

//composition of number and string
["IBM","Google","Microsoft","Apple","Intel", "ATT", "", null, 12, 34.3, -12, 0] -> top 8 by [$ asc];

;//--------------------- RESULT ------------------

[
  null,
  "",
  "ATT",
  "Apple",
  "Google",
  "IBM",
  "Intel",
  "Microsoft"
]

;//------------------- TEST-CASE -----------------

["IBM","Google","Microsoft","Apple","Intel", "ATT", "", null, 12, 34.3, -12, 0] -> top 28 by [$ asc];

;//--------------------- RESULT ------------------

[
  null,
  "",
  "ATT",
  "Apple",
  "Google",
  "IBM",
  "Intel",
  "Microsoft",
  -12,
  0,
  12,
  34.3
]

;//------------------- TEST-CASE -----------------

//composition of number, string, boolean, record and array
["IBM","Google","Microsoft","", null, 12, 34.3, -12, 0, ["a","bb","bc"], [12,34,-23],{a:23, b:"IPHONE", c:"New York"}, false, true] -> top 14 by [$ asc];

;//--------------------- RESULT ------------------

[
  null,
  [
    "a",
    "bb",
    "bc"
  ],
  [
    12,
    34,
    -23
  ],
  {
    "a": 23,
    "b": "IPHONE",
    "c": "New York"
  },
  false,
  true,
  "",
  "Google",
  "IBM",
  "Microsoft",
  -12,
  0,
  12,
  34.3
]

;//------------------- TEST-CASE -----------------


























;//------------------- TEST-DONE -----------------
