=Embedding Jaql=
_Embedding Jaql in java and python tutorial_
<wiki:toc max_depth="3" />
It is possible to embed Jaql in programs written by different languages, e.g Java and python. Jaql provides very simple api for both java and python programmers, if you have some knowledge of Jaql syntax, you can easily embed Jaql in your program. This document introduces how to setup jaql environment when developing embedding programs, and some examples to demonstrate how one could work with Jaql. 

==Embedding Jaql in Java==

===Setup environment===
Typically, Jaql runs on a hadoop cluster, which we called cluster model, this requires you have a hadoop cluster (and hbase, if use any hbase related functions) environment, otherwise, you can launch Jaql in local model, which means all the tasks run locally.
We are not going to discuss how to setup a hadoop cluster(hbase) here, below links maybe useful. 
  * http://hadoop.apache.org/common/docs/current/cluster_setup.html
  * http://wiki.apache.org/hadoop/Hbase/10Minutes
Let's assume you've installed Hadoop 0.20.1 and hbase 0.20.0. Follow below steps, you can launch Jaql on a running hadoop cluster and connect to a hbase server. 

 # Create a Java project
 # Add the following jar files into the project's build path
    * jaql.jar
    * hadoop-0.20.1-core.jar
    * log4j-1.2.15.jar
    * commons-logging-1.0.4.jar
    * commons-logging-api-1.0.4.jar
    * hbase-0.20.0-core.jar
    * zookeeper-r785019-hbase-1329.jar
 # Add the following folder into the project's build path
           conf folder from Jaql source 
 # Add you hadoop conf folder into the project's build path, which includs hadoop configuration files, like core-site.xml, hdfs-site.xml and mapred-site.xml.

Note : Launch Jaql in local model, simply remove hadoop conf folder from project's build path. 
 
===Examples===
This chapter introduces you several simple example using Jaql for you to start with, more examples can be found in Jaql source.
Typically, first you are going to initialize a JaqlQuery instance by its constructor `JaqlQuery()`, then use `setQueryString()` to set input for jaql context, at last use `evaluate()` to evaluate the query statement, this function will return you a JsonValue. Alternatively, `iterator()` can also evaluate the statement but return you a JsonIterator.
Notice that, you can set variable holders in the input parameter,  by means of Jaql syntax, it's $varname, then use `setVar()` to set its value at runtime.
You can try out with below examples.
==== Write data into HDFS ====
{{{
package myclazz;

import com.ibm.jaql.json.type.JsonValue;
import com.ibm.jaql.json.util.JsonIterator;
import com.ibm.jaql.lang.JaqlQuery;

/**
 * This sample program demonstrates how to persist data into HDFS.
 * */
public class MyClazz1 implements IConstants{
	
	public static void main(String[] args) {
		try{
			MyClazz1 mc = new MyClazz1();
			mc.writePublishers();
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	/**
	 * persists publishers data into HDFS
	 * */
	public void writePublishers() throws Exception {
		JaqlQuery jaql = new JaqlQuery();
		jaql.setQueryString(publisher + " -> write(hdfs('publishers'));");
		JsonIterator it = jaql.iterate();
		while(it.moveNext()){
			JsonValue v = it.current();
			System.out.println(v);
		}
		jaql.close();
	}
}
}}}

==== Read data from HDFS, and retrieve JsonValue data ====
{{{
package myclazz;

import com.ibm.jaql.json.type.JsonValue;
import com.ibm.jaql.lang.JaqlQuery;

/**
 * This sample program finds the country of a specified 
 * publishing house.
 * */
public class MyClazz2 {

	public static void main(String[] args) {
		try{
			MyClazz2 mc = new MyClazz2();
			JsonValue v = mc.getCountry("Scholastic");
			System.out.println(v);
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	
	/**
	 * returns the country name of the specified publisher.
	 * 
	 * @param publisher The name of publishing house
	 * @return JsonValue
	 * */
	private JsonValue getCountry(String publisher) throws Exception {
		JaqlQuery jaql = new JaqlQuery();
		jaql.setQueryString("read(hdfs('publishers')) -> filter $.name == $name -> transform $.country;");
		jaql.setVar("$name", publisher);
		JsonValue jv = jaql.evaluate();
		jaql.close();
		return jv;
	}
}
}}}

----

==Embedding Jaql in Python==

===Introduction===
PyJaql is an effort to enable python programmers work with Jaql, it's achieved not through re-implementing Jaql in python, but rather through bridging jaql and python by the using of [http://jpype.sourceforge.net/ jpype], it provides a few simple and clean functions for python programmers to take the advantage of jaql's capability. This document introduces you how to setup pyJaql environment and few examples for you to start with.
===Ubuntu Installer===
This chapter introduces you pyJaql installation and configuration steps.
====Pyton====
By default, [http://www.python.org/ python] is installed on ubuntu. If not, please read guide introduced by python official site to install. The recommended version is python 2.6.
====jpype====
[http://sourceforge.net/projects/jpype/files/ Download] source from sourceforge, the latest version of jpype 0.5.4.1 is recommended.
 # Make sure you have all of the necessary tools for compiling C code installed:
  {{{
  sudo apt-get install build-essential
  }}}
 # Make sure you have python2.6-dev package installed:
  {{{
  sudo apt-get install python2.6-dev
  }}}
 # Extract jpype package and enter into jpype dir, run the following command:
  {{{
  sudo python setup.py install
  }}}
 # Put the newly installed jpype into your PYTHONPATH by putting the following into you /etc/environment , or other system wide variable:
  {{{
  PYTHONPATH=$PYTHONPATH:/usr/local/lib/python2.6/dist-packages
  }}}
 # Check your install by running the following commands:
  {{{
  $ python
  [GCC 4.2.3 (Ubuntu 4.2.3-2ubuntu7)] on linux2
  Type "help", "copyright", "credits" or "license" for more information.
  >>> import jpype
  >>>
  }}}
If you don't get an ImportError, you're done!
====pyJaql====
 # Download pyJaql installer, namely pyJaql-0.1.tar.gz. Extract this package and enter into pyJaql dir, run following command:
   {{{ 
   sudo python setup.py install
   }}}
 # Open python command line, and check your install by below command:
   {{{ 
   import pyJaql
   }}}
If you don't get an ImportError, the installation is done.

===Usage===
====Launch Jaql in different models====
There are two models to run jaql, one is "local" model, in this situation, pyJaql will launch a mini-cluster on your local machine; On the other hand, if you want to luanch pyJaql on an existing hadoop cluster, use "hadoop-cluster" model.
 * Launch Jaql in local model
  Unset hadoop related environment variables, eg HADOOP_HOME, HADOOP_CONF_DIR
 * Launch Jaql in hadoop-cluster model
  _This model requires a running hadoop cluster environment._
  Set required environment variables, HADOOP_HOME and HADOOP_CONF_DIR. Make sure HADOOP_HOME points to the right path
  || export HADOOP_HOME= "yourHadoopHome"
  export HADOOP_CONF_DIR= "yourHadoopHome/conf" ||

====pyJaql's HelloWorld====
Basically, there are several steps to get started First, import PyJaql module

 {{{
 from pyJaql import *
 }}}

Second, initialize jaql engine

 {{{
 jaql=Jaql()
 }}}

Third, execute a jaql expression, one can execute any valid jaql expression by using execute(), which will return a python generator.
 
 {{{
  it=jaql.execute("jaql expression",{'variable name':'variable value',...})
 }}}
An alternative way to do evaluation is jaql.evaluate(). The usage of evaluate() is very same with execute(), but different in how to retrieve data from jaql, by which means, evaluate() maintain whole result, sometimes a very big block of data, in memory, it cost much more space but consuming less time when retrieving data, however, one must consider that, when the result set is very big, evaluate() cost a long time, sometimes intolerable, to process and return the data. In comparison, execute() does not return us all data in one time, its strategy is to retrieve specific data only when you iterate the result set. They are designed for satisfying different scenarios.

Then iterate the result set, and manipulate the return data as you like, depending on the output of jaql expresion, there are 3 kinds of data type of the iterating result, list, dict or primitive types(str,int,etc), there are kinds of ways to manipulate these data easily and conveniently.

{{{
for item in it:
	# manipulate item as a list, dict or primitive type
	# which depends on the return data format
	# possible ways:
	#1. item type is dict: use item["key"] to retrieve specific key value.
	#2. item type is list: use item[index] to retrieve list element
	#3. item type is python primitive type: directly manipulate item
}}}
A alternative way to execute a jaql expression is, using *evaluate()*, this function takes exactly same arguments with *excecute()*, however, it returns a list holding all the result data in memory.
Following examples will show you ways to embed pyJaql in your python program.

===Examples===
 * Ex1. write data to Hadoop HDFS
  {{{
#Write the books collection from data below to hadoop hdfs. 
	hdfswrite="[{publisher: 'Scholastic',author: 'J. K. Rowling',title: 'Deathly Hallows',year: 2007},{publisher: 'Scholastic',author: 'J. K. Rowling',title: 'Chamber of Secrets',year: 1999, reviews: [{rating: 10, user: 'joe', review: 'The best ...'},{rating: 6, user: 'mary', review: 'Average ...'}]}] -> write(hdfs('books'));" 
	try: 
		jaql=Jaql() 
		jaql.execute(hdfswrite) 
	except JAQLRuntimeException,err: 
		print err.msg 
		#handle exception
	except JVMException,err: 
		print err.msg
		#handle exception
 	finally: 
		jaql.close()	 
  }}}

 * Ex2. Read data from HDFS, use "filter" to filtrate result and use "transform" to format output data.
  {{{

#Read data from HDFS, use "filter" to filtrate result and use "transform" to format output data.
	try: 
		jaql=Jaql() 
		it=jaql.execute("read(hdfs('books'))->filter $.title=='Chamber of Secrets' and $.year==1999 - > transform {$.title,$.year}" ) 
		for record in it: 
			print record
	except JAQLRuntimeException,err: 
		print err.msg 
		#handle exception
	except JVMException,err: 
		print err.msg 
		#handle exception
	finally: 
		jaql.close() 
  }}}
More examples can be found in docs folder under pyJaql package. 

===Known Limitation===
After calling jaql.close(), it will shutdown JVM, if you attempt calling Jaql() again a JVMException will be raised. This dues to SUN's JVM (by now is 1.6.0_16) doesn't allow uploading, though JNI API defines a method to destroy JVM named destroyJVM(), it doesn't work1.So, pyJaql shares a unique JVM through program's life cycle, there is no problem if you use several times of jaql=Jaql() to get different jaql engine references, because JVM will only be initialized in the first time, but when you invoke jaql.close(), it's required that to make sure no one will use JVM again^(1)^.

*Reference*

(1). http://jpype.sourceforge.net/doc/user-guide/userguide.html