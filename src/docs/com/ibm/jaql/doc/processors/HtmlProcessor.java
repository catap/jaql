package com.ibm.jaql.doc.processors;

import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import com.ibm.jaql.doc.FnTextTag;
import com.ibm.jaql.doc.UDFDesc;

public class HtmlProcessor implements DataProcessor {
	public HashMap<String, ArrayList<UDFDesc>> categories;
	public String htmlOutputPath = null;
	
	public HtmlProcessor() {
		categories = new HashMap<String, ArrayList<UDFDesc>>();
	}
	
	@Override
	public void process(List<UDFDesc> list, HashMap<String, String> options) {
		htmlOutputPath = options.get("-htmlout");
		
		for (UDFDesc desc : list) {
			categorizeUDF(desc);
		}
		
		generateHtmlDoc();
	}
	
	void categorizeUDF(UDFDesc udf) {
		ArrayList<UDFDesc> category =  categories.get(udf.getPackageName());
		if(category == null) {
			category = new ArrayList<UDFDesc>();
			categories.put(udf.getPackageName(), category);
		}
		category.add(udf);
	}
	
	PrintStream createOutputStream() {
		if(htmlOutputPath == null) {
			return System.out;
		} else {
			try {
				File f = new File(htmlOutputPath);
				if(!f.exists()) f.createNewFile();
				if(!f.isFile() || !f.canWrite()) {
					throw new IllegalArgumentException("-htmlout argument is not a file or not writable");
				}
				return new PrintStream(f);
			} catch (IOException e) {
				throw new IllegalArgumentException("Problem while creating output stream from -htlmout argument", e);
			}
		}
		
	}
	void generateHtmlDoc() {
		PrintStream out = createOutputStream();
		out.println("<html><title> JAQL built-in function list - autogenerated </title><body>");
		
		for (String category : categories.keySet()) {
			printCategory(category, out);
		}
		
		out.println("</tbody></tgroup></table></body></html>");
	}
	
	void printCategory(String category, PrintStream out) {
		
		out.println("<table><title>"+category+"</title><tgroup cols=\"4\">"+
				"<colspec colname=\"col1\"/>"+
				"<colspec colname=\"col2\"/>"+		
				"<colspec colname=\"col3\"/>"+
				"<colspec colname=\"col4\"/>"+
				"<thead>		" +
				"<row valign=\"bottom\">"+
				"<entry colname=\"col1\">Function</entry>"+
				"<entry colname=\"col2\">Description</entry>"+
				"<entry colname=\"col3\">Parameters</entry>"+
				"<entry colname=\"col4\">Examples</entry>"+
				"</row>"+
				"</thead>"+
				"<tbody>");
		
		ArrayList<UDFDesc> functions = categories.get(category);
		for (UDFDesc desc : functions) {
			printFunction(desc, out);
		}
		out.println("</tbody></tgroup></table>");
	}
	
	void printFunction(UDFDesc desc, PrintStream out) {
		
		out.println("<row><entry colname=\"col1\">"+desc.getName()+"() </entry>");
		out.println();
		
		//Print description
		out.println("<entry colname=\"col2\"><p>");
		if(!desc.DESCRIPTION.isEmpty()) {
			out.println(desc.DESCRIPTION.get(0).getText());
		}
		out.println("</p></entry>");
		
		//Print Parameters with number of arguments
		out.println("<entry colname=\"col3\">");
		if(desc.getMinArgs() == desc.getMaxArgs()) {
			out.println("(" + desc.getMinArgs()+")");
		} else {
			if(desc.getMaxArgs() == Integer.MAX_VALUE) {
				out.println("(" + desc.getMinArgs() + " - ...)");
			} else {
				out.println("(" + desc.getMinArgs() + " - " + desc.getMaxArgs() +")");
			}
		}
		
		out.println("</entry>");
		
		//Print Examples
		out.println("<entry colname=\"col4\">");
		if(!desc.EXAMPLES.isEmpty()) {
			
			for (FnTextTag example : desc.EXAMPLES) {
				out.println("jaql> "+example.getText());
				out.println();
			}
		}
		out.println("</entry>");
	}
}
