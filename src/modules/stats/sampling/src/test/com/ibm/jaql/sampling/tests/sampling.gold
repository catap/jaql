
;//------------------- TEST-CASE -----------------
import sampling;
;//------------------- TEST-CASE -----------------


registerRNG('r1', fn() 17);

;//--------------------- RESULT ------------------

"r1"

;//------------------- TEST-CASE -----------------

registerRNG('r2', fn() 23);

;//--------------------- RESULT ------------------

"r2"

;//------------------- TEST-CASE -----------------

registerRNG('r3', fn() 19);

;//--------------------- RESULT ------------------

"r3"

;//------------------- TEST-CASE -----------------


range(1,100) -> sampling::uniformSampler(0.1, 'r1') -> count();

;//--------------------- RESULT ------------------

11

;//------------------- TEST-CASE -----------------


raw = [ { key: 1, values: range(1,200) }, { key: 2, values: range(1,10) }, { key: 3, values: range(1,2) } ];
;//------------------- TEST-CASE -----------------


data = raw -> expand unroll $.values;
;//------------------- TEST-CASE -----------------


data -> sampling::groupSampler( (fn(r) r.key), 0.20, 2, 'r2' ) 
     -> group by g = $.key into { key: g, num: count($) };

;//--------------------- RESULT ------------------

[
  {
    "key": 2,
    "num": 3
  },
  {
    "key": 1,
    "num": 38
  },
  {
    "key": 3,
    "num": 2
  }
]

;//------------------- TEST-CASE -----------------

     
data -> write(hdfs("data"));

;//--------------------- RESULT ------------------

{
  "location": "data",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------


read(hdfs("data")) -> sampling::groupSampler( (fn(r) r.key), 0.20, 2, 'r3' ) 
     -> group by g = $.key into { key: g, num: count($) }
     -> sort by [$.key];

;//--------------------- RESULT ------------------

[
  {
    "key": 1,
    "num": 41
  },
  {
    "key": 2,
    "num": 2
  },
  {
    "key": 3,
    "num": 2
  }
]

;//------------------- TEST-CASE -----------------

;//------------------- TEST-DONE -----------------