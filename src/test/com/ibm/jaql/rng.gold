
;//------------------- TEST-CASE -----------------
registerRNG('r1', fn() 17);

;//--------------------- RESULT ------------------

"r1"

;//------------------- TEST-CASE -----------------


registerRNG('r2', fn() 5);

;//--------------------- RESULT ------------------

"r2"

;//------------------- TEST-CASE -----------------


range(1,5) -> transform sampleRNG('r1');

;//--------------------- RESULT ------------------

[
  -4937981208836185383,
  -5582529378488325032,
  1530270151771565451,
  -3389839389802268617,
  818775917343865025
]

;//------------------- TEST-CASE -----------------

  
range(1,10) -> transform sampleRNG('r2');

;//--------------------- RESULT ------------------

[
  -4971030886054769832,
  1628080142987304160,
  9018696937790626762,
  8519392794254051655,
  8275179822514474066,
  -5576223184683215057,
  5123902406589080641,
  -4427941369665934060,
  4044347177351347406,
  -1468102548290959518
]

;//------------------- TEST-CASE -----------------

  
[1,2,3,4,5] -> write(hdfs('test'));

;//--------------------- RESULT ------------------

{
  "location": "test",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------


registerRNG('r3', fn() 17);

;//--------------------- RESULT ------------------

"r3"

;//------------------- TEST-CASE -----------------


// test map-reduce using the same seed per-split
read(hdfs('test')) -> transform sampleRNG('r3');

;//--------------------- RESULT ------------------

[
  -4937981208836185383,
  -5582529378488325032,
  1530270151771565451,
  -3389839389802268617,
  818775917343865025
]

;//------------------- TEST-CASE -----------------

  
registerRNG('r4', fn() 5);

;//--------------------- RESULT ------------------

"r4"

;//------------------- TEST-CASE -----------------
  

// test map-reduce using the same seed per-split
read(hdfs('test')) -> transform sampleRNG('r4');

;//--------------------- RESULT ------------------

[
  -4971030886054769832,
  1628080142987304160,
  9018696937790626762,
  8519392794254051655,
  8275179822514474066
]

;//------------------- TEST-CASE -----------------

  
// test map-reduce and reading a variable from the jobConf
read({type:'hdfs', location:'test', inoptions:
                  {seed: 17, adapter: 'com.acme.extensions.data.SeedingHadoopAdapter', 
                             format: 'org.apache.hadoop.mapred.SequenceFileInputFormat',
	              configurator : 'com.ibm.jaql.io.hadoop.FileInputConfigurator'}})
-> transform readConf("seed", 17);

;//--------------------- RESULT ------------------

[
  "-4937981208836185383",
  "-4937981208836185383",
  "-4937981208836185383",
  "-4937981208836185383",
  "-4937981208836185383"
]

;//------------------- TEST-CASE -----------------

  
// seed based on the value in the jobConf named "seed"
registerRNG('r5', fn() readConf("seed", 17));

;//--------------------- RESULT ------------------

"r5"

;//------------------- TEST-CASE -----------------


// test map-reduce using a variable seed per-split. this example has one split
// so expect repeated value
read({type:'hdfs', location:'test', inoptions:{seed: 17, adapter: 'com.acme.extensions.data.SeedingHadoopAdapter', 
                             format: 'org.apache.hadoop.mapred.SequenceFileInputFormat',
                      configurator : 'com.ibm.jaql.io.hadoop.FileInputConfigurator'}})
-> transform sampleRNG('r5');

;//--------------------- RESULT ------------------

[
  532182518298471973,
  1794509825941162386,
  3246151381995469705,
  9074336781408775578,
  5272732885952040446
]

;//------------------- TEST-CASE -----------------

  
// test seeding adapter with composite split
$a = 
  read({type:'hdfs', location:'test', inoptions:{seed: 17, adapter: 'com.acme.extensions.data.SeedingHadoopAdapter'}})
  -> transform {k:$};
;//------------------- TEST-CASE -----------------


[ {k:2}, {k:2}, {k:3} ] -> write(hdfs('test2'));

;//--------------------- RESULT ------------------

{
  "location": "test2",
  "type": "hdfs"
}

;//------------------- TEST-CASE -----------------


join $a, $j in read(hdfs('test2'))
where $a.k == $j.k
into $a -> sort by [$];

;//--------------------- RESULT ------------------

[
  {
    "k": 2
  },
  {
    "k": 2
  },
  {
    "k": 3
  }
]

;//------------------- TEST-CASE -----------------


;//------------------- TEST-DONE -----------------
