//-------------------------- ATOMS --------------------------------
typeof([]);##
"array"


typeof({});##
"record"


typeof("foo");##
"string"


typeof(true);##
"boolean"


typeof(1);##
"long"


1;##
1

1d;##
1.0

1m;##
1m


1.5;##
1.5

1.5d;##
1.5

1.5m;##
1.5m


100e-2;##
1.0


d'2001-07-04T12:08:56Z';##
date('2001-07-04T12:08:56Z')


// an invalid date format
d'12/10/1999'##
FAILURE
;

'a string';##
"a string"


'a string
with a newline';##
"a string\nwith a newline"


true;##
true


false;##
false


null;##
null


//-------------------------- ARRAYS -------------------------------
[];##
[]


[ 1, 2, 3 ];##
[
  1,
  2,
  3
]


[ 'a', 2, 'c' ];##
[
  "a",
  2,
  "c"
]


// this one caused a bug with int/long serialization
[d'2007-12-31T16:00:10Z'];##
[
  date('2007-12-31T16:00:10Z')
]


// nulls are fine elements of an array
[ 1, null, 3 ];##
[
  1,
  null,
  3
]


//-------------------------- RECORDS ------------------------------
{};##
{}


{ x: 1, y: 'b' };##
{
  "x": 1,
  "y": "b"
}


// nulls are fine values of a field
{ x: 1, y: null };##
{
  "x": 1,
  "y": null
}


// Field names must be strings or ids
{ x: 1, 3: 2 };##
FAILURE


// every field must be named
{a: 1 ,2,##
FAILURE
3};

// a field can be specified to disappear if its value is null
{a:'foo', b?:null};##
{
  "a": "foo"
}


//-------------------------- NESTING ------------------------------
[[[[[[[[[[[[]]]]]]]]]]]];##
[
  [
    [
      [
        [
          [
            [
              [
                [
                  [
                    [
                      []
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]
    ]
  ]
]


[{a:'some string', b:[{},{y:1, z:42},['a', 'b']]},1,'a string',['another string']];##
[
  {
    "a": "some string",
    "b": [
      {},
      {
        "y": 1,
        "z": 42
      },
      [
        "a",
        "b"
      ]
    ]
  },
  1,
  "a string",
  [
    "another string"
  ]
]


//-------------------------- ARITH/LOGIC OPS-----------------------

1+2;##
3

1+2d;##
3.0

1+2m;##
3m

1d+2d;##
3.0

1d+2m;##
3m

1m+2m;##
3m


1/2;##
0

1/2d;##
0.5

1/2m;##
0.5m

1d/2d;##
0.5

1d/2m;##
0.5m

1m/2m;##
0.5m


true or false;##
true


true and true;##
true


true and false;##
false


true or null;##
true


true and null;##
null


false or not null;##
null


// all values are comparable, if not by value then by their type code
'a' > {};##
null


// comparisons are deep 
[1,2,3,{a:'foo', b:['bar']}] == [1,2,3,{a:'foo', b:['bar']}];##
true


// make sure numeric encodings hash and compare properly
distinct( [1, 1d, 1m, 1.5d, 1.5m, 1.50d, 1.50m ] ) -> sort by [$];##
[
  1,
  1.5
]
 // 2 items

1 == 1d;##
true
 // true
1 == 1m;##
true
 // true
1d == 1m;##
true
 // true

1 == 1.5;##
false
 // false
1 == 1.5m;##
false
 // false

1.5 == 1.5m;##
true
 // true

1.11 != 1.10;##
true
 // true

// make sure array encodings hash and compare properly
distinct( [
  [1,2], 
  range(1,2) -> filter $ > 0,  // [1,2]
  [1,2,3], 
  range(1,3) -> filter $ != 2, // [1,3]
  range(1,3) -> filter $ > 0,  // [1,2,3]
  [1,3]
] ) -> sort by [$];##
[
  [
    1,
    2
  ],
  [
    1,
    2,
    3
  ],
  [
    1,
    3
  ]
]
 // 3 items

[1,2] == ( range(1,2) -> filter $ > 0 );##
true
 // true

[1,2] == ( range(1,3) -> filter $ != 2 );##
false
 // false

[1,3] == ( range(1,3) -> filter $ != 2 );##
true
 // true

[1,2] != ( range(1,3) -> filter $ > 0 );##
true
 // true

typeof([]) == "array";##
true


typeof("foo") == "record";##
false


//-------------------------- CONDITIONAL --------------------------
if( true ) 1 else 'really?';##
1


// expecting null when the false branch is empty
if( false ) 1;##
null


//-------------------------- ARRAY OPS ----------------------------

// group by field a, returning all records in each group
group [ {a:1, b:'1x'}, {a:2, b:'2x'}, {a:1, b:'1y'}, {a:2, b:'2y'} ] 
   by a = ($.a) as i
 into { a:a, i:i };##
[
  {
    "a": 2,
    "i": [
      {
        "a": 2,
        "b": "2x"
      },
      {
        "a": 2,
        "b": "2y"
      }
    ]
  },
  {
    "a": 1,
    "i": [
      {
        "a": 1,
        "b": "1x"
      },
      {
        "a": 1,
        "b": "1y"
      }
    ]
  }
]


// same as above - default 'as' is input expression
i = [ {a:1, b:'1x'}, {a:2, b:'2x'}, {a:1, b:'1y'}, {a:2, b:'2y'} ] ;##
"i"

group i by a = ($.a) into { a:a, i:i };##
[
  {
    "a": 2,
    "i": [
      {
        "a": 2,
        "b": "2x"
      },
      {
        "a": 2,
        "b": "2y"
      }
    ]
  },
  {
    "a": 1,
    "i": [
      {
        "a": 1,
        "b": "1x"
      },
      {
        "a": 1,
        "b": "1y"
      }
    ]
  }
]


// same as above - default 'as' is $
[ {a:1, b:'1x'}, {a:2, b:'2x'}, {a:1, b:'1y'}, {a:2, b:'2y'} ] 
-> group by a = ($.a) into { a:a, i:$ };##
[
  {
    "a": 2,
    "i": [
      {
        "a": 2,
        "b": "2x"
      },
      {
        "a": 2,
        "b": "2y"
      }
    ]
  },
  {
    "a": 1,
    "i": [
      {
        "a": 1,
        "b": "1x"
      },
      {
        "a": 1,
        "b": "1y"
      }
    ]
  }
]


// group by field a, returning b's from each group
group [ {a:1, b:'1x'}, {a:2, b:'2x'}, {a:1, b:'1y'}, {a:2, b:'2y'} ] 
   by a = ($.a) as i
 into { a:a, bs: i[*].b };##
[
  {
    "a": 2,
    "bs": [
      "2x",
      "2y"
    ]
  },
  {
    "a": 1,
    "bs": [
      "1x",
      "1y"
    ]
  }
]


// Count each distinct value
group [ 1, 1, 1, 2, 2, 3, 3, 3, 3 ] 
   by unique = ($) as i
   into { val: unique, n: count(i) };##
[
  {
    "n": 2,
    "val": 2
  },
  {
    "n": 3,
    "val": 1
  },
  {
    "n": 4,
    "val": 3
  }
]


// List distinct values
group [ 1, 1, 1, 2, 2, 3, 3, 3, 3 ] 
   by unique = ($) as i
   into unique;##
[
  2,
  1,
  3
]


// Count how many evens and odds - use explicit input variable name
group each i in [ 1, 1, 1, 2, 2, 3, 3, 3, 3 ] 
   by g = (mod(i,2)) as j
   into { val:g, n: count(j) };##
[
  {
    "n": 2,
    "val": 0
  },
  {
    "n": 7,
    "val": 1
  }
]


// cogroup (generalizes inner/outer join for equality predicates)
group
  [ {a:1, b:'b1x'}, {a:2, b:'b2x'}, {a:3, b:'b3x'}, {a:1, b:'b1y'}, {a:2, b:'b2y'} ] 
     by g = ($.a) as i,
  [ {c:1, d:'d1x'}, {c:2, d:'d2x'}, {c:4, d:'d4x'}, {c:1, d:'d1y'}, {c:2, d:'d2y'} ]
     by g = ($.c) as j
  into { g:g, bs:i[*].b, ds:j[*].d };##
[
  {
    "bs": [
      "b2x",
      "b2y"
    ],
    "ds": [
      "d2x",
      "d2y"
    ],
    "g": 2
  },
  {
    "bs": [
      "b1x",
      "b1y"
    ],
    "ds": [
      "d1x",
      "d1y"
    ],
    "g": 1
  },
  {
    "bs": [],
    "ds": [
      "d4x"
    ],
    "g": 4
  },
  {
    "bs": [
      "b3x"
    ],
    "ds": [],
    "g": 3
  }
]


// cogroup and tagging 
group [ {a:1, b:1} ] by k#1=$.a as x#0, [ {a:1, b:2} ] by k#1=$.a as x#1 into { k, x, x0: x#0, x1: x#1 };##
[
  {
    "k": 1,
    "x": [
      {
        "a": 1,
        "b": 2
      }
    ],
    "x0": [
      {
        "a": 1,
        "b": 1
      }
    ],
    "x1": [
      {
        "a": 1,
        "b": 2
      }
    ]
  }
]
 // ok
group [ 1 ] by k=$ as x, [ 1 ] by k#1=$ as y##
FAILURE
 into { x, y };  // should fail 

// This will generate a semantic error because the 'by' names must be unique.
group
  [] by g = ($.a) as is,
  [] by h = ($.c) as j##
FAILURE
s,
  into { g:g, bs:is[*].b, ds:js[*].d };


[ {a:1, b:'1x'}, {a:2, b:'2x'}, {a:1, b:'1y'}, {a:2, b:'2y'} ] 
-> sort by [$.a];##
[
  {
    "a": 1,
    "b": "1x"
  },
  {
    "a": 1,
    "b": "1y"
  },
  {
    "a": 2,
    "b": "2x"
  },
  {
    "a": 2,
    "b": "2y"
  }
]


[ {a:2, b:1}, {a:1, b:2}, {a:2, b:2}, {a:1, b:1} ] 
-> sort by [$.a, $.b];##
[
  {
    "a": 1,
    "b": 1
  },
  {
    "a": 1,
    "b": 2
  },
  {
    "a": 2,
    "b": 1
  },
  {
    "a": 2,
    "b": 2
  }
]


[ {a:2, b:1}, {a:1, b:2}, {a:2, b:2}, {a:1, b:1} ] 
-> sort by [$.b, $.a];##
[
  {
    "a": 1,
    "b": 1
  },
  {
    "a": 2,
    "b": 1
  },
  {
    "a": 1,
    "b": 2
  },
  {
    "a": 2,
    "b": 2
  }
]


[ {a:2, b:1}, {a:1, b:2}, {a:2, b:2}, {a:1, b:1} ] 
-> sort by [ $ ];##
[
  {
    "a": 1,
    "b": 1
  },
  {
    "a": 1,
    "b": 2
  },
  {
    "a": 2,
    "b": 1
  },
  {
    "a": 2,
    "b": 2
  }
]


range(1,10000) -> transform {x: [-$,$]} -> top 1 by [$];##
[
  {
    "x": [
      -10000,
      10000
    ]
  }
]

range(1,1000) -> top 1 by [{x:[-$,$],y:[$,$]}];##
[
  1000
]

range(1,1000) -> top 1 by [-$,$];##
[
  1000
]

range(1,100) -> top 1 by [{x:[-$,$]}];##
[
  100
]


//-------------------------- RECORD OPS ---------------------------

pivot = (
   -> transform { $.label: $.value }
   -> record()
   // -> combine( fn($a,$b) remap( $a, $b ) )
);##
"pivot"


input = [ { label: "name", value: "joe" },
           { label: "work", value: "acme plumbing" },
           { label: "office", value: "b1" } ];##
"input"


input -> pivot();##
{
  "name": "joe",
  "office": "b1",
  "work": "acme plumbing"
}


//-------------------------- LET ---------------------------------

( r = { x:1, y:2 },

  { r.x, z: r.y, t: r.x+r.y, r.nope } );##
{
  "t": 3,
  "x": 1,
  "z": 2
}


( r = { x:1, y:2 },
  s = {z:3},

  [ r, s ] );##
[
  {
    "x": 1,
    "y": 2
  },
  {
    "z": 3
  }
]


( r = 1,
  r = ( r = r + 10, // 11
        r + 100 ) // 111
      + r, // 112
  r );##
112


//-------------------------- EXPAND ---------------------------------

[ {x:[{a:1},{a:2}], y:2}, {y:3}, {x:[{a:1}]} ]
-> expand $.x;##
[
  {
    "a": 1
  },
  {
    "a": 2
  },
  {
    "a": 1
  }
]


[ {x:[{a:1},{a:2}], y:2}, {y:3}, {x:[{a:1}]} ]
-> expand [ $.x ];##
[
  [
    {
      "a": 1
    },
    {
      "a": 2
    }
  ],
  null,
  [
    {
      "a": 1
    }
  ]
]


[ {x:[{a:1},{a:2}], y:2}, {y:3}, {x:[{a:1}]} ]
-> expand $.x
-> transform $.a;##
[
  1,
  2,
  1
]


//-------------------------- JOIN ---------------------------------

equijoin i in [ 1, 2, 3 ] on (i),
         j in [ 1, 2, 4 ] on (j) 
into {i, j};##
[
  {
    "i": 2,
    "j": 2
  },
  {
    "i": 1,
    "j": 1
  }
]


equijoin          i in [ 1, 2, 3 ] on i,
         preserve j in [ 1, 2, 4 ] on j
into {i, j};##
[
  {
    "i": 2,
    "j": 2
  },
  {
    "i": 1,
    "j": 1
  },
  {
    "i": null,
    "j": 4
  }
]


equijoin preserve i in [ 1, 2, 3 ] on i,
                  j in [ 1, 2, 4 ] on j
into {i, j};##
[
  {
    "i": 2,
    "j": 2
  },
  {
    "i": 1,
    "j": 1
  },
  {
    "i": 3,
    "j": null
  }
]


equijoin preserve i in [ 1, 2, 3 ] on i,
         preserve j in [ 1, 2, 4 ] on j
into {i, j};##
[
  {
    "i": 2,
    "j": 2
  },
  {
    "i": 1,
    "j": 1
  },
  {
    "i": null,
    "j": 4
  },
  {
    "i": 3,
    "j": null
  }
]


join i in [ 1, 2, 3 ],
     j in [ 1, 2, 4 ]
where i == j
into {i, j};##
[
  {
    "i": 2,
    "j": 2
  },
  {
    "i": 1,
    "j": 1
  }
]


join          i in [ 1, 2, 3 ],
     preserve j in [ 1, 2, 4 ]
where i == j
into {i, j};##
[
  {
    "i": 2,
    "j": 2
  },
  {
    "i": 1,
    "j": 1
  },
  {
    "i": null,
    "j": 4
  }
]


join preserve i in [ 1, 2, 3 ],
              j in [ 1, 2, 4 ]
where i == j
into {i, j};##
[
  {
    "i": 2,
    "j": 2
  },
  {
    "i": 1,
    "j": 1
  },
  {
    "i": 3,
    "j": null
  }
]


join preserve i in [ 1, 2, 3 ],
     preserve j in [ 1, 2, 4 ]
where i == j
into {i, j};##
[
  {
    "i": 2,
    "j": 2
  },
  {
    "i": 1,
    "j": 1
  },
  {
    "i": null,
    "j": 4
  },
  {
    "i": 3,
    "j": null
  }
]


//-------------------------- FUNCTIONS ----------------------------

// built-ins and call-by-name
compare(1,2);##
-1

compare(1,y=2);##
-1

compare(x=1,y=2);##
-1

compare(y=2,x=1);##
-1

compare(1);##
FAILURE
 // fails
compare(1,2,3);##
FAILURE
 // fails
compare(1,x=1);##
FAILURE
 // fails
compare(1,2,x=1);##
FAILURE
 // fails

// jaql functions and call-by-name
f = fn($) $;##
"f"

f(1);##
1

f($=1);##
1


f = fn(x) x;##
"f"

f(1);##
1

f(x=1);##
1


f = fn(x,y) compare(x,y);##
"f"

f(1,2);##
-1

f(1,y=2);##
-1

f(x=1,y=2);##
-1

f(y=2,x=1);##
-1

f(1);##
FAILURE
 // fails
f(1,2,3);##
FAILURE
 // fails
f(1,x=1);##
FAILURE
 // fails
f(1,2,x=1);##
FAILURE
 // fails


// default values
f = fn(a="a",b="b") [ a, b ];##
"f"

f();##
[
  "a",
  "b"
]

f("A");##
[
  "A",
  "b"
]

f(a="A");##
[
  "A",
  "b"
]

f("A", "B");##
[
  "A",
  "B"
]

f(b="B");##
[
  "a",
  "B"
]


f = fn(a, b="b", c="c") [ a, b, c ];##
"f"

f("A");##
[
  "A",
  "b",
  "c"
]

f(b="B", a="A");##
[
  "A",
  "B",
  "c"
]


// captures and tagging
z=randomLong()*0+100;##
"z"

f = fn(x) z+x;##
"f"

f(10);##
110

f = fn(x=z) z+x;##
"f"

f();##
200

f(10);##
110

f = fn(z=::z) z+::z;##
"f"

f();##
200

f(10);##
110

f = (z=randomLong()*0+1000, y=z, fn(x=z, z=1) x+y+z+::z);##
"f"

f();##
2101

f(10);##
1111

f(10, -1);##
1109

(fn(x) (y=x, fn(x) x+y))(x=1)(x=2);##
3

(fn(x#0) (fn(x) x+x#0))(x=1)(x=2);##
3


// continuations & multiple call sites
f = fn(i) [i,i];##
"f"

(a = f(3), b = f(5), [b,a]);##
[
  [
    5,
    5
  ],
  [
    3,
    3
  ]
]
 // [ [5,5],[3,3] ]
f(3) -> f();##
[
  [
    3,
    3
  ],
  [
    3,
    3
  ]
]
 // [ [3,3], [3,3] ]

// pushing calls down thru do blocks
(x = 1+2,
 y = x + x,
 fn(z) z + y + y)(1);##
13


// captures
for(i in range(1,10))
   [[i, fn(j) i + j]]
-> sort by [$[0] desc]
-> transform ($[1])(10);##
[
  20,
  19,
  18,
  17,
  16,
  15,
  14,
  13,
  12,
  11
]

// [20..11]

( fns = 
   for(i in range(1,3))
     [( j = range(1,9) -> filter $ > 7, 
        fn(k) j -> transform i*100+$*10+k 
     )],
   for( i in (fns[1])(4), 
        j in (fns[2])(5),
        k in (fns[0])(6) )
     [{i,j,k}]
);##
[
  {
    "i": 284,
    "j": 385,
    "k": 186
  },
  {
    "i": 284,
    "j": 385,
    "k": 196
  },
  {
    "i": 284,
    "j": 395,
    "k": 186
  },
  {
    "i": 284,
    "j": 395,
    "k": 196
  },
  {
    "i": 294,
    "j": 385,
    "k": 186
  },
  {
    "i": 294,
    "j": 385,
    "k": 196
  },
  {
    "i": 294,
    "j": 395,
    "k": 186
  },
  {
    "i": 294,
    "j": 395,
    "k": 196
  }
]

// 8 records where x,y,z in [8,9]
// [ { i: 2x4, j:3y5, k:1z6 } ]

// recursion
search1 = fn(list, item, search2) (
  if( not exists(list) ) null
  else (
    n = count(list),
    m = long(n / 2),
    c = compare(item, list[ m ]),
    if     ( c < 0 ) search2( list[*:m-1], item, search2 )
    else if( c > 0 ) 1 + m + search2( list[m+1:*], item, search2 )
    else             m
  )
);##
"search1"


search = fn(list, item) search1(list, item, search1);##
"search"


range(1,20) -> search(21);##
null
 // null
range(1,20) -> search(10);##
9
 // 9
range(1,20) -> search(1);##
0
  // 0
range(1,20) -> search(20);##
19
 // 19
range(1,20) -> search(0);##
null
  // null

reverse1 = fn(list, reverse2) (
  if( exists(list) ) (
    first = list[0],
    rest =  list[1:*],
    append( rest -> reverse2(reverse2), [first] )
  )
);##
"reverse1"


reverse = fn(list) list -> reverse1(reverse1);##
"reverse"


range(1,10) -> reverse();##
[
  10,
  9,
  8,
  7,
  6,
  5,
  4,
  3,
  2,
  1
]
 // 10..1

range(1,10) -> reverse() -> reverse();##
[
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10
]
 // 1..10

sieve1 = fn(list, sieve2) (
  if( exists(list) ) (
    first = list[0],
    rest =  list[1:*],
    append( [first], rest -> filter mod($,first) != 0 -> sieve2(sieve2) )
  )
);##
"sieve1"


primes = fn(max) append([1], range(2,max) -> sieve1(sieve1));##
"primes"


primes(100);##
[
  1,
  2,
  3,
  5,
  7,
  11,
  13,
  17,
  19,
  23,
  29,
  31,
  37,
  41,
  43,
  47,
  53,
  59,
  61,
  67,
  71,
  73,
  79,
  83,
  89,
  97
]


fib1 = fn(i,fib2) if( i <= 1 ) i else fib2(i-1,fib2) + fib2(i-2,fib2);##
"fib1"

fib = fn(i) fib1(i,fib1);##
"fib"

range(0,11) -> transform fib($);##
[
  0,
  1,
  1,
  2,
  3,
  5,
  8,
  13,
  21,
  34,
  55,
  89
]



//-------------------------- MATERIALIZE --------------------------

// FIXME: currently breaks w/ decompile
// array will spill at 256 items by default; see SpilledJsonArray
// data = range(1,300);
// materialize data;
// data;

//-------------------------- KEYWORDS (do not move) ---------------

// strict keywords
null = ##
FAILURE
1;                              // fails

// weak keywords
f = fn(x) x -> transform (1);##
"f"

#transform ##
FAILURE
= fn(x,y) "test";           // fails
transform = fn(x,y) "test";##
"transform"
            // OK
[1, 2, 3] -> transform (1);##
"test"

[1, 2, 3] -> #transform (1);##
[
  1,
  1,
  1
]

[1, 2, 3] -> f();##
[
  1,
  1,
  1
]


// soft keywords
#sort ##
FAILURE
= fn(x) x;                       // fails
sort = fn(x) x;##
"sort"
                        // OK
[2, 1, 3] -> sort();##
[
  2,
  1,
  3
]

[2, 1, 3] -> #sort(##
FAILURE
);  // fails
[2, 1, 3] -> sort using [$];##
[
  1,
  2,
  3
]


//-------------------------- QUIT ---------------------------------

quit;