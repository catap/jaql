//-- test user defined storage registration

registerAdapter({type: 'myAdapter1', 
                 inoptions: {adapter: 'com.foobar.store.MyInputAdapter1', 
                             format: 'org.apache.hadoop.mapred.SequenceFileInputFormat', 
                             configurator: 'com.ibm.jaql.io.hadoop.FileInputConfigurator'}, 
                 outoptions: {adapter: 'com.foobar.store.MyOutputAdapter1', 
                             format: 'org.apache.hadoop.mapred.SequenceFileOutputFormat', 
                             configurator: 'com.ibm.jaql.io.hadoop.FileOutputConfigurator'} });

stWrite({type: 'myAdapter1', location: 'jaqlTest/test10.dat'}, [
  { key: 0, g:0, text: 'zero' },
  { key: 1, g:1, text: 'one' },
  { key: 2, g:0, text: 'two' },
  { key: 3, g:1, text: 'three' },
  { key: 4, g:0, text: 'four' },
  { key: 5, g:1, text: 'five' },
  { key: 6, g:0, text: 'six' },
  { key: 7, g:1, text: 'seven' },
  { key: 8, g:0, text: 'eight' },
]);

stRead({type: 'myAdapter1', location: 'jaqlTest/test10.dat'});

writeAdapterRegistry('build/test/cache/registryTest1.dat');

readAdapterRegistry('registryTest1.dat');

stWrite({type: 'hdfs', location: 'jaqlTest/test1.dat'},
        [1,2,3]);
        
stRead({type: 'hdfs', location: 'jaqlTest/test1.dat'});

stRead({type: 'myAdapter1', location: 'jaqlTest/test10.dat'});

readAdapterRegistry('registryTest2.dat');

stWrite({type: 'myAdapter2', location: 'jaqlTest/test11.dat'}, [
  { key: 0, g:0, text: 'zero' },
  { key: 1, g:1, text: 'one' },
  { key: 2, g:0, text: 'two' },
  { key: 3, g:1, text: 'three' },
  { key: 4, g:0, text: 'four' },
  { key: 5, g:1, text: 'five' },
  { key: 6, g:0, text: 'six' },
  { key: 7, g:1, text: 'seven' },
  { key: 8, g:0, text: 'eight' },
]);

stRead({type: 'myAdapter2', location: 'jaqlTest/test11.dat'});

unregisterAdapter('myAdapter2');

stRead({type: 'myAdapter2', location: 'jaqlTest/test11.dat'});

stRead(
  mapReduce( {
    'input': {type: 'myAdapter1', location: 'jaqlTest/test10.dat'},
    'map'   : fn($i) [ [ $i.g, 1 ] ],
    'reduce': fn($key, $values) [{ g: $key, n: count($values) }],
    'output': {type: 'hdfs', location: 'jaqlTest/test10out.dat'}
  })
);

registerAdapter({type: 'myAdapter3', 
                 inoptions: {adapter: 'com.foobar.store.MyInputAdapter3', 
                             format: 'org.apache.hadoop.mapred.SequenceFileInputFormat', 
                             configurator: 'com.ibm.jaql.io.hadoop.FileInputConfigurator'}, 
                 outoptions: {adapter: 'com.foobar.store.MyOutputAdapter3', 
                             format: 'org.apache.hadoop.mapred.SequenceFileOutputFormat', 
                             configurator: 'com.ibm.jaql.io.hadoop.FileOutputConfigurator'} });

stWrite({type: 'myAdapter3', location: 'jaqlTest/test12.dat'}, [
  { key: 0, g:0, text: 'zero' },
  { key: 1, g:1, text: 'one' },
  { key: 2, g:0, text: 'two' },
  { key: 3, g:1, text: 'three' },
  { key: 4, g:0, text: 'four' },
  { key: 5, g:1, text: 'five' },
  { key: 6, g:0, text: 'six' },
  { key: 7, g:1, text: 'seven' },
  { key: 8, g:0, text: 'eight' },
]);

stRead({type: 'myAdapter3', location: 'jaqlTest/test12.dat'});

stRead(
  mapReduce( {
    'input': {type: 'myAdapter3', location: 'jaqlTest/test12.dat'},
    'map'   : fn($i) [ [ $i.g, 1 ] ],
    'reduce': fn($key, $values) [{ g: $key, n: count($values) }],
    'output': {type: 'hdfs', location: 'jaqlTest/test12out.dat'}
  })
);

//-- test user defined storage registration
registerFunction('heyya', 'com.foobar.function.MyNewFunction');

heyya('world');

stRead(
mapReduce( {
    'input': {type: 'myAdapter3', location: 'jaqlTest/test12.dat'},
    'map'   : fn($i) [ [ heyya('world'), 1 ] ],
    'reduce': fn($key, $values) [{ g: $key, n: count($values) }],
    'output': {type: 'hdfs', location: 'jaqlTest/test13out.dat'}
  })
);