// -- parsing and matching: simple schemata -------------------------------------------------------

x = schema null;##
"x"

x;##
schema null

null instanceof x;##
true

1 instanceof x;##
false
   // incompatible

x = schema nonnull;##
"x"

x;##
schema nonnull

null instanceof x;##
false

1 instanceof x;##
true


x = schema any;##
"x"

x;##
schema any

null instanceof x;##
true

1 instanceof x;##
true


x = schema function;##
"x"

x;##
schema function

(fn(x) x) instanceof x;##
true

1 instanceof x;##
false
  // incompatible

// -- parsing and matching: schema ----------------------------------------------------------------

x = schema schematype;##
"x"

schema long instanceof x;##
true

1 instanceof x;##
false
  // incompatible

x = schema schematype(value=schema long);##
"x"

schema long instanceof x;##
true
   
schema boolean instanceof x;##
false
 // incompatible


// -- parsing and matching: boolean ---------------------------------------------------------------

x = schema boolean;##
"x"

x;##
schema boolean

true instanceof x;##
true

false instanceof x;##
true

1 instanceof x;##
false
        // incompatible

x = schema boolean(true);##
"x"

x;##
schema boolean(value=true)

true instanceof x;##
true

false instanceof x;##
false
    // incompatible

x = schema boolean(false);##
"x"

x;##
schema boolean(value=false)

true instanceof x;##
false
     // incompatible
false instanceof x;##
true
 



// -- parsing and matching: long ------------------------------------------------------------------

x = schema long;##
"x"

x;##
schema long

5 instanceof x;##
true

5m instanceof x;##
false
  // incompatible
5d instanceof x;##
false
  // incompatible
"a" instanceof x;##
false
 // incompatible

x = schema long(5);##
"x"

x;##
schema long(value=5)

4 instanceof x;##
false
  // incompatible
5 instanceof x;##
true

5d instanceof x;##
false
 // incompatible
5m instanceof x;##
false
 // incompatible
6 instanceof x;##
false
  // incompatible

schema long(5d)##
FAILURE
; // must fail: invalid argument
schema long(5m)##
FAILURE
; // must fail: invalid argument
schema long(5.1)##
FAILURE
; // must fail: invalid argument


// -- parsing and matching: double ----------------------------------------------------------------

x = schema double;##
"x"

x;##
schema double

5d instanceof x;##
true

5.5 instanceof x;##
true
  
5 instanceof x;##
false
    // incompatible
5.5m instanceof x;##
false
 // incompatible
"a" instanceof x;##
false
 // incompatible

x = schema double(5d);##
"x"

x;##
schema double(value=5.0)

4.99d instanceof x;##
false
   // incompatible
5d instanceof x;##
true

5 instanceof x;##
false
  // incompatible
5m instanceof x;##
false
 // incompatible
5.01d instanceof x;##
false
 // incompatible

schema double(5)##
FAILURE
;     // must fail: invalid argument
schema double(5.0);##
schema double(value=5.0)
  // should be ok
schema double(5.1m)##
FAILURE
; // must fail: invalid argument


// -- parsing and matching: decfloat --------------------------------------------------------------

x = schema decfloat;##
"x"

x;##
schema decfloat

5m instanceof x;##
true

5.5m instanceof x;##
true
  
5 instanceof x;##
false
    // incompatible
5.5 instanceof x;##
false
  // incompatible
"a" instanceof x;##
false
  // incompatible

x = schema decfloat(5m);##
"x"

x;##
schema decfloat(value=5m)

4.99m instanceof x;##
false
   // incompatible
5m instanceof x;##
true

5 instanceof x;##
false
       // incompatible
5d instanceof x;##
false
      // incompatible
5.01m instanceof x;##
false
 // incompatible

schema decfloat(5)##
FAILURE
;    // must fail: invalid argument
schema decfloat(5.0)##
FAILURE
;  // must fail: invalid argument
schema decfloat(5d)##
FAILURE
;   // must fail: invalid argument

// -- parsing and matching: date ------------------------------------------------------------------

x = schema date;##
"x"

x;##
schema date

date('2000-01-01T12:00:00Z') instanceof x;##
true

'2000-01-01T12:00:00Z' instanceof x;##
false
 // incompatible, that's a string

x = schema date(date('2000-01-01T12:00:00Z'));##
"x"

x;##
schema date(value=date('2000-01-01T12:00:00Z'))

date('2000-01-01T11:59:59Z') instanceof x;##
false
   // incompatible
date('2000-01-01T12:00:00Z') instanceof x;##
true

date('2000-01-01T12:00:01Z') instanceof x;##
false
   // incompatible


// -- parsing and matching: string ----------------------------------------------------------------

x = schema string;##
"x"

x;##
schema string

"1" instanceof x;##
true

1 instanceof x;##
false
        // incompatible

x = schema string(5);##
"x"

x;##
schema string(length=5)

"1234" instanceof x;##
false
   // incompatible
"12345" instanceof x;##
true

"123456" instanceof x;##
false
 // incompatible

x = schema string(value="ba*b");##
"x"

x;##
schema string(length=4, value="ba*b")

"ba*b" instanceof x;##
true

"baab" instanceof x;##
false
   // incompatible

schema string(-1)##
FAILURE
;      // must fail: invalid length
schema string(1, "ab")##
FAILURE
; // must fail: length does not match


// -- parsing and matching: binary ----------------------------------------------------------------

x = schema binary;##
"x"

x;##
schema binary

hex('00') instanceof x;##
true

"1" instanceof x;##
false
      // incompatible
1 instanceof x;##
false
        // incompatible

x = schema binary(5);##
"x"

x;##
schema binary(length=5)

hex('11223344') instanceof x;##
false
   // incompatible
hex('1122334455') instanceof x;##
true

hex('112233445566') instanceof x;##
false
 // incompatible

x = schema binary(value=hex('001122'));##
"x"

x;##
schema binary(length=3, value=hex('001122'))

hex('001122') instanceof x;##
true

hex('001123') instanceof x;##
false
   // incompatible

schema binary(-1)##
FAILURE
;      // must fail: invalid length
schema binary(2, hex('11'))##
FAILURE
; // must fail: length does not match


// -- parsing and matching: arrays ----------------------------------------------------------------

x = schema [];##
"x"

x;##
schema []

[] instanceof x;##
true

[ null ] instanceof x;##
false
    // incompatible
1 instanceof x;##
false
           // incompatible
{} instanceof x;##
false
          // incompatible

x = schema [ null ];##
"x"

x;##
schema [
         null
       ]

[ null ] instanceof x;##
true

null instanceof x;##
false
       // incompatible
[] instanceof x;##
false
       // incompatible
[ 1 ] instanceof x;##
false
    // incompatible

x = schema [ long(value=1), string(value="a"), boolean ];##
"x"

x;##
schema [
         long(value=1),
         string(length=1, value="a"),
         boolean
       ]

[ 1, "a", true ] instanceof x;##
true

[ 1, "a", true, 1 ] instanceof x;##
false
  // incompatible
[ 11, "a", true ] instanceof x;##
false
  // incompatible
[ 1, "b", true ] instanceof x;##
false
   // incompatible
[ 1, "a", null ] instanceof x;##
false
   // incompatible

x = schema [ long, boolean ... ];##
"x"

x;##
schema [
         long,
         boolean ...
       ]

[ 1 ] instanceof x;##
true
 
[ 1, true ] instanceof x;##
true

[ 1, true, true ] instanceof x;##
true
  
[ 1, 1 ] instanceof x;##
false
 // incompatible

schema [ null ... ];##
schema [
         null ...
       ]

schema [ long(0) ... ];##
schema [
         long(value=0) ...
       ]


// -- parsing and matching: records ---------------------------------------------------------------

x = schema {};##
"x"

x;##
schema {}

{} instanceof x;##
true

[] instanceof x;##
false
               // incompatible
{ a: null } instanceof x;##
false
      // incompatible
1 instanceof x;##
false
                // incompatible

x = schema { a };##
"x"

x;##
schema {
         "a": any
       }

{ a: 1 } instanceof x;##
true

{ "a": 1 } instanceof x;##
true

{ } instanceof x;##
false
              // incompatible
{ a: 1, b: 1 } instanceof x;##
false
   // incompatible
{ b: 1 } instanceof x;##
false
         // incompatible

x = schema { "a" };##
"x"

x;##
schema {
         "a": any
       }

{ a: 1 } instanceof x;##
true

{ "a": 1 } instanceof x;##
true

{ } instanceof x;##
false
              // incompatible
{ b: 1 } instanceof x;##
false
         // incompatible

x = schema { a? };##
"x"

x;##
schema {
         "a"?: any
       }

{ } instanceof x;##
true
 
{ a: 1 } instanceof x;##
true
 
{ b: 1 } instanceof x;##
false
         // incompatible

x = schema { a: long };##
"x"

x;##
schema {
         "a": long
       }

{ a: 1 } instanceof x;##
true

{ a: "1" } instanceof x;##
false
       // incompatible

x = schema { a: nonnull };##
"x"

x;##
schema {
         "a": nonnull
       }

{ a: 1 } instanceof x;##
true

{ a: "1" } instanceof x;##
true


x = schema { * };##
"x"

x;##
schema {
         *: any
       }

{ } instanceof x;##
true

{ a: 1 } instanceof x;##
true

{ a: 1, b: 1 } instanceof x;##
true


x = schema { a: long, * };##
"x"

x;##
schema {
         "a": long,
         *: any
       }

{ a: 1 } instanceof x;##
true

{ a: 1, b: 1 } instanceof x;##
true

{ b: 1 } instanceof x;##
false
         // incompatible

x = schema { a?: long, * };##
"x"

x;##
schema {
         "a"?: long,
         *: any
       }

{ a: 1 } instanceof x;##
true

{ a: 1, b: 1 } instanceof x;##
true

{ b: 1 } instanceof x;##
true

{ a: "1" } instanceof x;##
false
       // incompatible

x = schema { a: long, *: long };##
"x"

x;##
schema {
         "a": long,
         *: long
       }

{ a: 1 } instanceof x;##
true

{ a: 1, b: 1 } instanceof x;##
true

{ a: 1, b: "1" } instanceof x;##
false
 // incompatible

x = schema { a?: long, *: string };##
"x"

x;##
schema {
         "a"?: long,
         *: string
       }

{ a: 1 } instanceof x;##
true

{ a: 1, b: "1" } instanceof x;##
true

{ b: "1" } instanceof x;##
true

{ a: "1" } instanceof x;##
false
       // incompatible

// keyword checks (disabled; enable when soft keyword implemented)
// schema { for }; // does not work currently
schema { for: nonnull };##
schema {
         "for": nonnull
       }

schema { "for" };##
schema {
         "for": any
       }

// schema { null }; // does not work currently
schema { null: nonnull };##
schema {
         "null": nonnull
       }
 // treated as "null"

schema { "1" };##
schema {
         "1": any
       }

schema { 1:##
FAILURE
 nonnull }; // must fail: invalid field name (numbers must be quoted)
schema { *, * }##
FAILURE
; // must fail: wildcard field occurs twice
schema { a, b, c, a, * }##
FAILURE
; // must fail: field name occurs twice


// -- parsing and matching: alternatives ----------------------------------------------------------

x = schema null?;##
"x"

x;##
schema null

null instanceof x;##
true

1 instanceof x;##
false
        // incompatible

x = schema long?;##
"x"

x;##
schema long?

null instanceof x;##
true

1 instanceof x;##
true
        
"1" instanceof x;##
false
      // incompatible

x = schema null | long;##
"x"

x;##
schema long?

null instanceof x;##
true

1 instanceof x;##
true
        
"1" instanceof x;##
false
      // incompatible

x = schema string(value="a") | string(value="b") | long;##
"x"

x;##
schema long | string(length=1, value="a") | string(length=1, value="b")

"a" instanceof x;##
true

"b" instanceof x;##
true

1 instanceof x;##
true

null instanceof x;##
false
     // incompatible
"c" instanceof x;##
false
      // incompatible


x = schema string(value="a") | string(value="b") | long?;##
"x"

x;##
schema long | string(length=1, value="a") | string(length=1, value="b") | null

"a" instanceof x;##
true

"b" instanceof x;##
true

1 instanceof x;##
true

null instanceof x;##
true

"c" instanceof x;##
false
      // incompatible


//-------------------------- SCHEMAOF -----------------------------

schemaof(null);##
schema null

schemaof(false);##
schema boolean(value=false)

schemaof(1);##
schema long(value=1)

schemaof(1d);##
schema double(value=1.0)

schemaof(1.0);##
schema double(value=1.0)

schemaof("a string");##
schema string(value="a string")

schemaof(date('2001-07-04T12:08:56Z'));##
schema date(value=date('2001-07-04T12:08:56Z'))

schemaof({ a: 1, b: "2" });##
schema {
         "a": long(value=1),
         "b": string(value="2")
       }

schemaof([ 1, "2" ]);##
schema [
         long(value=1),
         string(value="2")
       ]



// -- schema comparison ---------------------------------------------------------------------------

x = [ schema nonnull, 
       schema [], schema [ long ], schema [ long, decfloat ], schema [ long, decfloat, string ... ],
       schema binary, 
       schema boolean, 
       schema date, 
       schema decfloat, 
       schema double, 
       schema long, 
       schema null, 
       schema {}, schema { a: long }, schema { a?: long }, schema { b: long }, schema { *: long },  
       schema string,
       schema any,
       schema decfloat | long, schema date | double  
];##
"x"

x -> sort by [$];##
[
  schema boolean,
  schema long,
  schema double,
  schema decfloat,
  schema string,
  schema binary,
  schema date,
  schema [],
  schema [
           long
         ],
  schema [
           long,
           decfloat,
           string ...
         ],
  schema [
           long,
           decfloat
         ],
  schema {
           *: long
         },
  schema {},
  schema {
           "a": long
         },
  schema {
           "a"?: long
         },
  schema {
           "b": long
         },
  schema long | decfloat,
  schema double | date,
  schema any,
  schema nonnull,
  schema null
]

x -> sort by [$ desc];##
[
  schema null,
  schema nonnull,
  schema any,
  schema double | date,
  schema long | decfloat,
  schema {
           "b": long
         },
  schema {
           "a"?: long
         },
  schema {
           "a": long
         },
  schema {},
  schema {
           *: long
         },
  schema [
           long,
           decfloat
         ],
  schema [
           long,
           decfloat,
           string ...
         ],
  schema [
           long
         ],
  schema [],
  schema date,
  schema binary,
  schema string,
  schema decfloat,
  schema double,
  schema long,
  schema boolean
]



// -- schema merging ------------------------------------------------------------------------------

mergeSchemata = javaudf('com.ibm.jaql.udf.MergeSchemataUdf');##
"mergeSchemata"


mergeSchemata(schema binary, schema binary);##
schema binary

mergeSchemata(schema binary(1), schema binary);##
schema binary

mergeSchemata(schema binary(value=hex('11')), schema binary);##
schema binary

mergeSchemata(schema binary(1), schema binary(value=hex('11')));##
schema binary(length=1)


mergeSchemata(schema boolean, schema boolean);##
schema boolean

mergeSchemata(schema boolean, schema boolean(false));##
schema boolean

mergeSchemata(schema boolean, schema boolean(true));##
schema boolean

mergeSchemata(schema boolean(false), schema boolean(true));##
schema boolean

mergeSchemata(schema boolean(false), schema boolean(false));##
schema boolean(value=false)

mergeSchemata(schema boolean(true), schema boolean(true));##
schema boolean(value=true)


mergeSchemata(schema date, schema date);##
schema date

mergeSchemata(schema date, schema date(date('2001-07-04T12:08:56Z')));##
schema date


mergeSchemata(schema decfloat, schema decfloat);##
schema decfloat

mergeSchemata(schema decfloat, schema decfloat(value=1m));##
schema decfloat


mergeSchemata(schema double, schema double);##
schema double

mergeSchemata(schema double, schema double(value=1.0));##
schema double


mergeSchemata(schema long, schema long);##
schema long

mergeSchemata(schema long, schema long(value=1));##
schema long


mergeSchemata(schema null, schema null);##
schema null


mergeSchemata(schema string, schema string);##
schema string

mergeSchemata(schema string(1), schema string);##
schema string

mergeSchemata(schema string(value="a"), schema string);##
schema string

mergeSchemata(schema string(1), schema string(value="a"));##
schema string(length=1)


mergeSchemata(schema null, schema string);##
schema string?

mergeSchemata(schema null, schema string|long);##
schema long | string | null

mergeSchemata(schema null, schema string|null);##
schema string?

mergeSchemata(schema long(1)|string(8)|null, schema date|long(2)|string(8));##
schema long | string(length=8) | date | null


mergeSchemata(schema nonnull, schema nonnull);##
schema nonnull

mergeSchemata(schema nonnull, schema long);##
schema nonnull

mergeSchemata(schema nonnull, schema long|date);##
schema nonnull

mergeSchemata(schema nonnull, schema null);##
schema any

mergeSchemata(schema nonnull, schema long|null);##
schema any


mergeSchemata(schema [], schema []);##
schema []

mergeSchemata(schema [ long, boolean, date ], schema [ long, string, null ]);##
schema [
         long,
         boolean | string,
         date?
       ]

mergeSchemata(schema [ long, decfloat ], schema [ long ]);##
schema [
         long,
         decfloat ...
       ]

mergeSchemata(schema [ long, decfloat ... ], schema [ long ]);##
schema [
         long,
         decfloat ...
       ]

mergeSchemata(schema [ long, decfloat ... ], schema [ long, decfloat ]);##
schema [
         long,
         decfloat ...
       ]

mergeSchemata(schema [ long, decfloat ... ], schema [ long, date ]);##
schema [
         long,
         decfloat | date ...
       ]


mergeSchemata(schema {}, schema {});##
schema {}

mergeSchemata(schema { c: null, a: long, b:long }, schema { a:long, b:long, c:null });##
schema {
         "a": long,
         "b": long,
         "c": null
       }

mergeSchemata(schema { a: long, b:long, c:null, e?: date }, schema { a: long, b:string, d:null, e:date });##
schema {
         "a": long,
         "b": long | string,
         "c"?: null,
         "d"?: null,
         "e"?: date
       }

mergeSchemata(schema { a: long, *:date }, schema { a: long });##
schema {
         "a": long,
         *: date
       }

mergeSchemata(schema { a: long, *:date }, schema { a: long, *:null });##
schema {
         "a": long,
         *: date?
       }


// -- schema compaction ---------------------------------------------------------------------------

compactSchemata = javaudf('com.ibm.jaql.udf.CompactSchemataUdf');##
"compactSchemata"


compactSchemata(schema binary, schema binary);##
schema binary

compactSchemata(schema binary(1), schema binary);##
schema binary

compactSchemata(schema binary(value=hex('11')), schema binary);##
schema binary

compactSchemata(schema binary(1), schema binary(value=hex('11')));##
schema binary(length=1)


compactSchemata(schema boolean, schema boolean);##
schema boolean

compactSchemata(schema boolean, schema boolean(false));##
schema boolean

compactSchemata(schema boolean, schema boolean(true));##
schema boolean

compactSchemata(schema boolean(false), schema boolean(true));##
schema boolean

compactSchemata(schema boolean(false), schema boolean(false));##
schema boolean(value=false)

compactSchemata(schema boolean(true), schema boolean(true));##
schema boolean(value=true)


compactSchemata(schema date, schema date);##
schema date

compactSchemata(schema date, schema date(date('2001-07-04T12:08:56Z')));##
schema date


compactSchemata(schema decfloat, schema decfloat);##
schema decfloat

compactSchemata(schema decfloat, schema decfloat(value=1m));##
schema decfloat


compactSchemata(schema double, schema double);##
schema double

compactSchemata(schema double, schema double(value=1.0));##
schema double


compactSchemata(schema long, schema long);##
schema long

compactSchemata(schema long, schema long(value=1));##
schema long


compactSchemata(schema null, schema null);##
schema null


compactSchemata(schema string, schema string);##
schema string

compactSchemata(schema string(1), schema string);##
schema string

compactSchemata(schema string(value="a"), schema string);##
schema string

compactSchemata(schema string(1), schema string(value="a"));##
schema string(length=1)


compactSchemata(schema null, schema string);##
schema string?

compactSchemata(schema null, schema string|long);##
schema long | string | null

compactSchemata(schema null, schema string|null);##
schema string?

compactSchemata(schema long(1)|string(8)|null, schema date|long(2)|string(8));##
schema long | string(length=8) | date | null


compactSchemata(schema nonnull, schema nonnull);##
schema nonnull

compactSchemata(schema nonnull, schema long);##
schema long | nonnull

compactSchemata(schema nonnull, schema long|date);##
schema long | date | nonnull

compactSchemata(schema nonnull, schema null);##
schema any

compactSchemata(schema nonnull, schema long|null);##
schema long | any


compactSchemata(schema [], schema []);##
schema []

compactSchemata(schema [ long, boolean, date ], schema [ long, string, null ]);##
schema [
         long,
         boolean | string,
         date?
       ]

compactSchemata(schema [ long, decfloat ], schema [ long ]);##
schema [
         long,
         decfloat ...
       ]

compactSchemata(schema [ long, decfloat ... ], schema [ long ]);##
schema [
         long,
         decfloat ...
       ]

compactSchemata(schema [ long, decfloat ... ], schema [ long, decfloat ]);##
schema [
         long,
         decfloat ...
       ]

compactSchemata(schema [ long, decfloat ... ], schema [ long, date ]);##
schema [
         long,
         decfloat | date ...
       ]


compactSchemata(schema {}, schema {});##
schema {}

compactSchemata(schema { c: null, a: long, b:long }, schema { a:long, b:long, c:null });##
schema {
         "a": long,
         "b": long,
         "c": null
       }

compactSchemata(schema { a: long, b:long, c:null, e?: date }, schema { a: long, b:string, d:null, e:date });##
schema {
         "a": long,
         "b": long | string,
         "c"?: null,
         "d"?: null,
         "e"?: date
       }

compactSchemata(schema { a: long, *:date }, schema { a: long });##
schema {
         "a": long,
         *: date
       }

compactSchemata(schema { a: long, *:date }, schema { a: long, *:null });##
schema {
         "a": long,
         *: date?
       }



// -- path expressions and schemata --------------------------------------------------------------

// records
schemaof ({ a: "yes", b: 0 }.a);##
schema string(value="yes")

schemaof ({ a: "yes", b: 0 }.c);##
schema null

schemaof ({ a: { c: "yes" }, b: 0 }.a.c) ;##
schema string(value="yes")

schemaof ({ a: "yes", b: 0 }{*});##
schema {
         "a": string(value="yes"),
         "b": long(value=0)
       }

schemaof ({ a: "yes", b: 0 }{*-.b});##
schema {
         "a": string(value="yes")
       }

schemaof ({ a: "yes", b: 0, c:2 }{*-.b,.c});##
schema {
         "a": string(value="yes")
       }

schemaof ({ a:"yes", { b: 0, c: 2 }.*});##
schema {
         "a": string(value="yes"),
         "b": long(value=0),
         "c": long(value=2)
       }


// arrays
schemaof ([ "yes", 0, 1][0]);##
schema string(value="yes")

schemaof ([ "yes", 0, 1][1]);##
schema long(value=0)

schemaof ([ "yes", 0, 1][4]);##
schema any

schemaof ([ "yes", 0, 1][0:1]);##
schema [
         long | string(value="yes") ...
       ]

schemaof ([ "yes", 0, 1][1:*]);##
schema [
         long | string(value="yes") ...
       ]

schemaof ([ "yes", 0, 1][*:1]);##
schema [
         long | string(value="yes") ...
       ]

schemaof ([ "yes", 0, 1][*:*]);##
schema [
         long | string(value="yes") ...
       ]


// arrays: nulls
schemaof ([ "yes", [ 0 ], 1, null] [?]);##
schema [
         long(value=1) | string(value="yes") | [
           long(value=0)
         ] | null ...
       ]

schemaof ([ "yes", [ 0 ], 1, [ null ]] [?]);##
schema [
         long(value=1) | string(value="yes") | [
           long(value=0)?
         ] ...
       ]

schemaof ([ null ] [?]);##
schema [
         null ...
       ]


// arrays: expanding
schemaof ([ "yes", [ 0 ], 1, null] []);##
schema [
         long(value=0) | long(value=1) | string(value="yes") ...
       ]

schemaof ([ "yes", [ 0 ], 1, [ null ]] []);##
schema [
         long(value=0) | long(value=1) | string(value="yes") | null ...
       ]

schemaof ([ null ] []);##
schema []



// -- transforms ---------------------------------------------------------------------------------

schemaof(null -> transform $);##
schema []

schemaof([]  -> transform $);##
schema []

schemaof([ 1, 2, 3]  -> transform $);##
schema [
         long ...
       ]


// records
schemaof ([{ a: "yes", b: 0 }] -> transform $.a) ;##
schema [
         string(value="yes") ...
       ]

schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform $.a) ;##
schema [
         string(value="yes")? ...
       ]

schemaof ([{ a: "yes", b: 0}] -> transform { $.a });##
schema [
         {
           "a": string(value="yes")
         } ...
       ]

schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform { $.a }) ;##
schema [
         {
           "a"?: string(value="yes")
         } ...
       ]

schemaof ([{ a: "yes", b: 0 }] -> transform { b: $.a }) ;##
schema [
         {
           "b": string(value="yes")
         } ...
       ]

schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform { b: $.a }) ;##
schema [
         {
           "b": string(value="yes")?
         } ...
       ]

schemaof ([{ a: "yes", b: 0}] -> transform ${.a});##
schema [
         {
           "a": string(value="yes")
         } ...
       ]

schemaof ([{ a: "yes", b: 0 }, {b:1} ] -> transform ${.a});##
schema [
         {
           "a"?: string(value="yes")
         } ...
       ]


// records with copying
schemaof ([{ a: "yes", b: 0 }] -> transform { $.* }) ;##
schema [
         {
           "a": string(value="yes"),
           "b": long(value=0)
         } ...
       ]

schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform  { $.* }) ;##
schema [
         {
           "a"?: string(value="yes"),
           "b": long
         } ...
       ]

schemaof ([{ a: "yes", b: 0 }] -> transform { c:1, $.* });##
schema [
         {
           "a": string(value="yes"),
           "b": long(value=0),
           "c": long(value=1)
         } ...
       ]

schemaof ([{ a: "yes", b: 0 }] -> transform ${*});##
schema [
         {
           "a": string(value="yes"),
           "b": long(value=0)
         } ...
       ]

schemaof ([{ a: "yes", b: 0 }] -> transform ${*-.a});##
schema [
         {
           "b": long(value=0)
         } ...
       ]

schemaof ([{ a: "yes", b: 0, c:2 }] -> transform ${*-.a,.c});##
schema [
         {
           "b": long(value=0)
         } ...
       ]


// arrays
schemaof ([ [ 0, "yes" ] ] -> transform $[1]);##
schema [
         string(value="yes") ...
       ]

schemaof ([ [ 0, "yes" ], [ 1 ] ] -> transform $[1]);##
schema [
         string(value="yes")? ...
       ]

schemaof ([ [ true, "a", 1 ] ] -> transform $[0:1]);##
schema [
         [
           boolean(value=true) | long(value=1) | string(value="a") ...
         ] ...
       ]

schemaof ([ [ true, "a", 1 ] ] -> transform $[1:*]);##
schema [
         [
           boolean(value=true) | long(value=1) | string(value="a") ...
         ] ...
       ]

schemaof ([ [ true, "a", 1 ] ] -> transform $[*:1]);##
schema [
         [
           boolean(value=true) | long(value=1) | string(value="a") ...
         ] ...
       ]

schemaof ([ [ true, "a", 1 ] ] -> transform $[*:*]);##
schema [
         [
           boolean(value=true) | long(value=1) | string(value="a") ...
         ] ...
       ]


// records and arrays
schemaof ([ { a: { a: "no", b: [ {c: "yes"}, 2], c: "no"}, c: "no"}  ] -> transform $.a.b[0]{.a,.c});##
schema [
         {
           "c": string(value="yes")
         } ...
       ]


schemaof([ [ {a: 1 } ] ] -> transform $[*]);##
schema [
         [
           {
             "a": long(value=1)
           } ...
         ] ...
       ]

schemaof([ [ {a: 1 } ] ] -> transform $[*].a);##
schema [
         [
           long(value=1) ...
         ] ...
       ]

schemaof([ [ {a: 1 } ] ] -> transform $[*].b);##
schema [
         [
           null ...
         ] ...
       ]

schemaof([ [ {a: 1 }, {b: 2} ] ] -> transform $[*].a);##
schema [
         [
           long(value=1)? ...
         ] ...
       ]


schemaof([ [ {a: 1 } ], {a: 2}, null ] -> transform $[?]);##
schema [
         [
           {
             "a": long
           } ...
         ]? ...
       ]

schemaof([ [ {a: 1 } ], {a: 2}, null ] -> transform $[?].a);##
schema [
         [
           long ...
         ]? ...
       ]


schemaof([ [ {a: [1, 2, "a", null] } ], null, 1 ] -> transform $[]);##
schema [
         [
           long(value=1) | {
             "a": [
                    long(value=1),
                    long(value=2),
                    string(value="a"),
                    null
                  ]
           } ...
         ] ...
       ]

schemaof([ [ {a: [1, 2, "a", null] } ], null ] -> transform $[].a);##
schema [
         [
           long | string(value="a") | null ...
         ] ...
       ]



// -- group by-------------------------------------------------------------------------------------

schemaof(null -> group by k=$ as $ into $);##
schema []

schemaof([] -> group by k=$ as $ into $);##
schema []

schemaof([ {a: 1, b: "b1"}, {a: 1, b: "b2"} ] -> group by k=$.a into { key: k, values: $ });##
schema [
         {
           "key": long(value=1),
           "values": [
                       {
                         "a": long(value=1),
                         "b": string
                       } ...
                     ]
         } ...
       ]

schemaof([ {a: 1, b: "b1"}, {a: 2, b: "b2"} ] -> group by k=$.a into { key: k, values: $ });##
schema [
         {
           "key": long,
           "values": [
                       {
                         "a": long,
                         "b": string
                       } ...
                     ]
         } ...
       ]

schemaof([ {a: 1, b: "b1"}, {b:"b2"} ] -> group by k=$.a into { key: k, values: $ });##
schema [
         {
           "key": long(value=1)?,
           "values": [
                       {
                         "a"?: long(value=1),
                         "b": string
                       } ...
                     ]
         } ...
       ]


schemaof(group null by k=$ as $ into $);##
schema []

schemaof(group []  by k=$ as $ into $);##
schema []

schemaof(group [ {a: 1, b: "b1"}, {a: 1, b: "b1"} ] by k=$.a as g1 into { key: k, values: g1 });##
schema [
         {
           "key": long(value=1),
           "values": [
                       {
                         "a": long(value=1),
                         "b": string(value="b1")
                       } ...
                     ]
         } ...
       ]

schemaof(group [ {a: 1, b: "b1"}, {a: 2, b: "b2"} ] by k=$.a as g1 into { key: k, values: g1 });##
schema [
         {
           "key": long,
           "values": [
                       {
                         "a": long,
                         "b": string
                       } ...
                     ]
         } ...
       ]

schemaof(group [ {a: 1, b: "b1"}, {b: "b1"} ] by k=$.a as g1 into { key: k, values: g1 });##
schema [
         {
           "key": long(value=1)?,
           "values": [
                       {
                         "a"?: long(value=1),
                         "b": string(value="b1")
                       } ...
                     ]
         } ...
       ]


schemaof(group null by k=$ as g1, null by k=$ as g2 
         into { key: k, values1: g1, values2: g2 });##
schema []

schemaof(group []  by k=$ as g1, []  by k=$ as g2 
         into { key: k, values1: g1, values2: g2 });##
schema []

schemaof(group []  by k=$ as g1, null  by k=$ as g2 
         into { key: k, values1: g1, values2: g2 });##
schema []


schemaof(group null by k=$ as g1, [ 1 ] by k=$ as g2 
         into { key: k, values1: g1, values2: g2 });##
schema [
         {
           "key": long(value=1),
           "values1": null,
           "values2": [
                        long(value=1) ...
                      ]?
         } ...
       ]

schemaof(group [] by k=$ as g1, [ 1 ] by k=$ as g2 
         into { key: k, values1: g1, values2: g2 });##
schema [
         {
           "key": long(value=1),
           "values1": null,
           "values2": [
                        long(value=1) ...
                      ]?
         } ...
       ]


schemaof(
  group [ {a: 1, b:"b1"}, {a: 1, b: "b2"} ] by k=$.a as g1,
        [ {c: 3, d:"d1"}, {c: 4, b: "bbb"} ] by k=$.c as g2
  into { key: k, values1: g1, values2: g2 });##
schema [
         {
           "key": long?,
           "values1": [
                        {
                          "a": long(value=1),
                          "b": string
                        } ...
                      ]?,
           "values2": [
                        {
                          "b"?: string(value="bbb"),
                          "c": long,
                          "d"?: string(value="d1")
                        } ...
                      ]?
         } ...
       ]



// -- filter/sort/expand --------------------------------------------------------------------------

schemaof( null -> filter $>1);##
schema []

schemaof( [] -> filter $>1);##
schema []

schemaof( [ 1, 2, 3 ] -> filter $>1);##
schema [
         long ...
       ]

schemaof( null -> sort by [$] );##
schema null

schemaof( [] -> sort by [$] );##
schema []

schemaof( [ 2, 1, 3 ] -> sort by [$]);##
schema [
         long ...
       ]

schemaof( null -> expand);##
schema []

schemaof( [] -> expand);##
schema []

schemaof( [[]] -> expand);##
schema []

schemaof( [[[]]] -> expand);##
schema [
         [] ...
       ]

schemaof( [ [1,2], ["a","b"], [true], null ] -> expand);##
schema [
         boolean(value=true) | long | string ...
       ]



// -- other expressions --------------------------------------------------------------------------

schemaof(read("anything"));##
schema [
         any ...
       ]


schemaof(null -> keyLookup(null));##
schema []

schemaof([[1, "a"]] -> keyLookup(null));##
schema [
         [
           long(value=1),
           string(value="a"),
           null
         ] ...
       ]

schemaof(null -> keyLookup([[1, "a"]]));##
schema []

schemaof([[1, "a"]] -> keyLookup([[1, "b"]]));##
schema [
         [
           long(value=1),
           string(value="a"),
           string(value="b")?
         ] ...
       ]


//-------------------------- QUIT ---------------------------------

quit;