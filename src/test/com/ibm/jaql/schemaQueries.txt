// -- parsing and matching: simple schemata -------------------------------------------------------

$x = schema null;
$x;
null instanceof $x;
1 instanceof $x;   // incompatible

$x = schema nonnull;
$x;
null instanceof $x;
1 instanceof $x;

$x = schema any;
$x;
null instanceof $x;
1 instanceof $x;

$x = schema function;
$x;
(fn($) $) instanceof $x;
1 instanceof $x;  // incompatible

// -- parsing and matching: schema ----------------------------------------------------------------

$x = schema schematype;
schema long instanceof $x;
1 instanceof $x;  // incompatible

$x = schema schematype(value=schema long);
schema long instanceof $x;   
schema boolean instanceof $x; // incompatible


// -- parsing and matching: boolean ---------------------------------------------------------------

$x = schema boolean;
$x;
true instanceof $x;
false instanceof $x;
1 instanceof $x;        // incompatible

$x = schema boolean(true);
$x;
true instanceof $x;
false instanceof $x;    // incompatible

$x = schema boolean(false);
$x;
true instanceof $x;     // incompatible
false instanceof $x; 



// -- parsing and matching: long ------------------------------------------------------------------

$x = schema long;
$x;
1 instanceof $x;
1m instanceof $x;
1d instanceof $x;
1.1 instanceof $x; // incompatible
"a" instanceof $x; // incompatible

$x = schema long(5);
$x;
4 instanceof $x;  // incompatible
5 instanceof $x;
6 instanceof $x;

$x = schema long(max=5);
$x;
4 instanceof $x;  
5 instanceof $x;
6 instanceof $x; // incompatible

$x = schema long(-1,1);
$x;
-2 instanceof $x; // incompatible
-1 instanceof $x;
0 instanceof $x;
1 instanceof $x;
2 instanceof $x; // incompatible

$x = schema long(value=5);
$x;
4 instanceof $x;  // incompatible
5 instanceof $x;
6 instanceof $x;  // incompatible


// TODO: uncomment next line when parser is fixed to accept Long.MIN
// schema long(-9223372036854775808, 9223372036854775807); // should work: long range
schema long(max=9223372036854775808); // must fail: too large argument
schema long(min=-9223372036854775809); // must fail: too large argument
schema long(5,3); // must fail: invalid interval
schema long(5d); // should be ok
schema long(5m); // should be ok
schema long(5.1); // must fail: invalid argument
schema long(5, value=4); // must fail: invalid argument


// -- parsing and matching: double ----------------------------------------------------------------

$x = schema double;
$x;
1d instanceof $x;
1 instanceof $x;
1.1 instanceof $x;
1.5m instanceof $x;
1.1m instanceof $x; // incompatible
"a" instanceof $x; // incompatible

$x = schema double(5d);
$x;
4d instanceof $x;  // incompatible
5d instanceof $x;
5.001d instanceof $x;

$x = schema double(max=5d);
$x;
4d instanceof $x;  
5d instanceof $x;
5.001d instanceof $x; // incompatible

$x = schema double(-1d,1d);
$x;
-1.001d instanceof $x; // incompatible
-1d instanceof $x;
0d instanceof $x;
1d instanceof $x;
1.001d instanceof $x; // incompatible

$x = schema double(value=5d);
$x;
4.999d instanceof $x;  // incompatible
5d instanceof $x;
5.001d instanceof $x;  // incompatible

schema double(5d,3d); // must fail: invalid interval
schema double(5);     // should be ok
schema double(5.0);  // should be ok
schema double(5.1m); // must fail: invalid argument
schema double(5d, value=4d); // must fail: invalid argument

// -- parsing and matching: decfloat --------------------------------------------------------------

$x = schema decfloat;
$x;
1 instanceof $x;   
1.1d instanceof $x;
1.1m instanceof $x;
"a" instanceof $x; // incompatible

$x = schema decfloat(5);
$x;
4 instanceof $x;  // incompatible
5 instanceof $x;
5.001m instanceof $x;

$x = schema decfloat(max=5);
$x;
4 instanceof $x;  
5 instanceof $x;
5.001m instanceof $x; // incompatible

$x = schema decfloat(-1,1);
$x;
-1.001m instanceof $x; // incompatible
-1 instanceof $x;
0 instanceof $x;
1 instanceof $x;
1.001m instanceof $x; // incompatible

$x = schema decfloat(value=5);
$x;
4.999m instanceof $x;  // incompatible
5m instanceof $x;
5.001m instanceof $x;  // incompatible

// TODO: uncomment next line when parser is fixed to accept big decimals
// schema decfloat(-9223372036854775809, 9223372036854775808); // should work (outside long range)
schema decfloat(5,3); // must fail: invalid interval
schema decfloat(5d); // should be ok
schema decfloat(5, value=4d); // must fail: invalid argument


// -- parsing and matching: date ------------------------------------------------------------------

$x = schema date;
$x;
date('2000-01-01T12:00:00Z') instanceof $x;
'2000-01-01T12:00:00Z' instanceof $x; // incompatible, that's a string

$x = schema date(date('2000-01-01T12:00:00Z'));
$x;
date('2000-01-01T11:59:59Z') instanceof $x;  // incompatible
date('2000-01-01T12:00:00Z') instanceof $x;
date('2000-01-01T12:00:01Z') instanceof $x;

$x = schema date(max=date('2000-01-01T12:00:00Z'));
$x;
date('2000-01-01T11:59:59Z') instanceof $x;  
date('2000-01-01T12:00:00Z') instanceof $x;
date('2000-01-01T12:00:01Z') instanceof $x;   // incompatible

$x = schema date(date('2000-01-01T12:00:00Z'), date('2000-02-01T12:00:00Z'));
$x;
date('2000-01-01T11:59:59Z') instanceof $x;  // incompatible
date('2000-01-01T12:00:00Z') instanceof $x;
date('2000-01-02T13:00:00Z') instanceof $x;
date('2000-02-01T12:00:00Z') instanceof $x;
date('2000-02-01T12:00:01Z') instanceof $x;   // incompatible

$x = schema date(value=date('2000-01-01T12:00:00Z'));
$x;
date('2000-01-01T11:59:59Z') instanceof $x;   // incompatible
date('2000-01-01T12:00:00Z') instanceof $x;
date('2000-01-01T12:00:01Z') instanceof $x;   // incompatible

schema date(date('2000-01-01T12:00:00Z'), date('2000-01-01T11:00:00Z')); // must fail: invalid interval
schema date(date('2000-01-01T12:00:00Z'), value=date('2000-01-01T11:00:00Z')); // must fail: invalid argument


// -- parsing and matching: string ----------------------------------------------------------------

$x = schema string;
$x;
"1" instanceof $x;
1 instanceof $x;

$x = schema string(5);
$x;
"1234" instanceof $x;  // incompatible
"12345" instanceof $x;
"123456" instanceof $x;

$x = schema string(maxLength=5);
$x;
"1234" instanceof $x;
"12345" instanceof $x;
"123456" instanceof $x;  // incompatible

$x = schema string(4,6);
$x;
"123" instanceof $x;  // incompatible
"1234" instanceof $x;
"12345" instanceof $x;
"123456" instanceof $x;
"1234567" instanceof $x;  // incompatible

schema string(-1); // must fail: invalid interval
schema string(5,3); // must fail: invalid interval

$x = schema string(pattern="ba*b");
$x;
"baaab" instanceof $x;
"babab" instanceof $x;  // incompatible

$x = schema string(value="ba*b");
$x;
"ba*b" instanceof $x;
"baaab" instanceof $x;  // incompatible


schema string(5, pattern="[ab]*");
schema string(5, 10, pattern="[ab]*");
schema string("abc["); // must fail: invalid pattern 


// -- parsing and matching: binary ----------------------------------------------------------------

schema binary;
schema binary(5);
schema binary(maxLength=5);
schema binary(4,6);
schema binary(-1); // must fail: invalid interval
schema binary(5,3); // must fail: invalid interval


// -- parsing and matching: arrays ----------------------------------------------------------------

$x = schema [];
$x;
[] instanceof $x;
[ null ] instanceof $x;    // incompatible
1 instanceof $x;           // incompatible
{} instanceof $x;          // incompatible

$x = schema [ null ];
$x;
[ null ] instanceof $x;
null instanceof $x;       // incompatible
[] instanceof $x;       // incompatible
[ 1 ] instanceof $x;    // incompatible

$x = schema [ long(0,10), string(pattern="a*"), boolean ];
$x;
[ 1, "a", true ] instanceof $x;
[ 1, "a", true, 1 ] instanceof $x;  // incompatible
[ 11, "a", true ] instanceof $x;  // incompatible
[ 1, "b", true ] instanceof $x;   // incompatible
[ 1, "a", null ] instanceof $x;   // incompatible

$x = schema [ long, boolean<2,3> ];
$x;
[ 1, true ] instanceof $x; // incompatible
[ 1, true, true ] instanceof $x;
[ 1, true, true, true ] instanceof $x;
[ 1, true, true, true, true ] instanceof $x; // incompatible

$x = schema [ long, boolean* ];
$x;
[ 1 ] instanceof $x; 
[ 1, true ] instanceof $x;
[ 1, true, true ] instanceof $x;  
[ 1, 1 ] instanceof $x; // incompatible

$x = schema [ long, boolean+ ];
$x;
[ 1 ] instanceof $x;  // incompatible
[ 1, true ] instanceof $x;
[ 1, true, true ] instanceof $x;  
[ 1, 1 ] instanceof $x; // incompatible

$x = schema [ long, boolean<2,*> ];
$x;
[ 1 ] instanceof $x;  // incompatible
[ 1, true ] instanceof $x;  // incompatible
[ 1, true, true ] instanceof $x;
[ 1, true, true, true ] instanceof $x;    
[ 1, 1 ] instanceof $x; // incompatible

$x = schema [ long, boolean<*,2> ];
$x;
[ 1 ] instanceof $x;  
[ 1, true ] instanceof $x;  
[ 1, true, true ] instanceof $x;
[ 1, true, true, true ] instanceof $x; // incompatible    
[ 1, 1 ] instanceof $x; // incompatible


schema [ null* ];
schema [ null+ ];
schema [ null<0> ];
schema [ null<5> ];
schema [ null<5,10> ];
schema [ null<5,*> ];
schema [ null<*,5> ];
schema [ null<*,*> ];
schema [ null<-1> ]; // must fail: invalid interval
schema [ null<5,3> ]; // must fail: invalid interval

schema [ long(0,10)* ];
schema [ long(0,10)+ ];
schema [ long(0,10)<0> ];
schema [ long(0,10)<5> ];
schema [ long(0,10)<5,10> ];
schema [ long(0,10)<5,*> ];
schema [ long(0,10)<*,5> ];
schema [ long(0,10)<*,*> ];
schema [ long(0,10)<-1> ]; // must fail: invalid interval
schema [ long(0,10)<5,3> ]; // must fail: invalid interval

schema [ long(5,3) ]; // must fail: invalid internal schema


// -- parsing and matching: records ---------------------------------------------------------------

$x = schema {};
$x;
{} instanceof $x;
[] instanceof $x;               // incompatible
{ a: null } instanceof $x;      // incompatible
1 instanceof $x;                // incompatible

$x = schema { a };
$x;
{ a: 1 } instanceof $x;
{ "a": 1 } instanceof $x;
{ } instanceof $x;              // incompatible
{ a: 1, b: 1 } instanceof $x;   // incompatible
{ b: 1 } instanceof $x;         // incompatible

$x = schema { "a" };
$x;
{ a: 1 } instanceof $x;
{ "a": 1 } instanceof $x;
{ } instanceof $x;              // incompatible
{ b: 1 } instanceof $x;         // incompatible

$x = schema { a? };
$x;
{ } instanceof $x; 
{ a: 1 } instanceof $x; 
{ b: 1 } instanceof $x;         // incompatible

$x = schema { a: long };
$x;
{ a: 1 } instanceof $x;
{ a: "1" } instanceof $x;       // incompatible

$x = schema { a: nonnull };
$x;
{ a: 1 } instanceof $x;
{ a: "1" } instanceof $x;

$x = schema { * };
$x;
{ } instanceof $x;
{ a: 1 } instanceof $x;
{ a: 1, b: 1 } instanceof $x;

$x = schema { a: long, * };
$x;
{ a: 1 } instanceof $x;
{ a: 1, b: 1 } instanceof $x;
{ b: 1 } instanceof $x;         // incompatible

$x = schema { a?: long, * };
$x;
{ a: 1 } instanceof $x;
{ a: 1, b: 1 } instanceof $x;
{ b: 1 } instanceof $x;
{ a: "1" } instanceof $x;       // incompatible

$x = schema { a: long, *: long };
$x;
{ a: 1 } instanceof $x;
{ a: 1, b: 1 } instanceof $x;
{ a: 1, b: "1" } instanceof $x; // incompatible

$x = schema { a?: long, *: string };
$x;
{ a: 1 } instanceof $x;
{ a: 1, b: "1" } instanceof $x;
{ b: "1" } instanceof $x;
{ a: "1" } instanceof $x;       // incompatible

// keyword checks
// schema { for }; // does not work currently 
schema { for: nonnull };
schema { "for" };
// schema { null }; // does not work currently
schema { null: nonnull }; // treated as "null"

schema { "1" };
schema { 1: nonnull }; // must fail: invalid field name (numbers must be quoted)
schema { *, * }; // must fail: wildcard field occurs twice
schema { a, b, c, a, * }; // must fail: field name occurs twice


// -- parsing and matching: alternatives ----------------------------------------------------------

$x = schema null?;
$x;
null instanceof $x;
1 instanceof $x;        // incompatible

$x = schema long?;
$x;
null instanceof $x;
1 instanceof $x;        
"1" instanceof $x;      // incompatible

$x = schema null | long;
$x;
null instanceof $x;
1 instanceof $x;        
"1" instanceof $x;      // incompatible

$x = schema string(pattern="a*") | string(pattern="b*") | long;
$x;
"aaa" instanceof $x;
"bbb" instanceof $x;
1 instanceof $x;
null instanceof $x;     // incompatible
"c" instanceof $x;      // incompatible


$x = schema string(pattern="a*") | string(pattern="b*") | long?;
$x;
"aaa" instanceof $x;
"bbb" instanceof $x;
1 instanceof $x;
null instanceof $x;
"c" instanceof $x;      // incompatible


//-------------------------- SCHEMAOF -----------------------------

schemaof(null);
schemaof(false);
schemaof(1);
schemaof(1d);
schemaof(1.0);
schemaof("a string");
schemaof(date('2001-07-04T12:08:56Z'));
schemaof({ a: 1, b: "2" });
schemaof([ 1, "2" ]);


// -- schema comparison ---------------------------------------------------------------------------

$x = [ schema nonnull, 
       schema [], schema [ long ], schema [ long, decfloat ], schema [ long, decfloat, string<*> ],
       schema binary, 
       schema boolean, 
       schema date, 
       schema decfloat, 
       schema double, 
       schema long, 
       schema null, 
       schema {}, schema { a: long }, schema { a?: long }, schema { b: long }, schema { *: long },  
       schema string,
       schema any,
       schema decfloat | long, schema date | double  
];
$x -> sort by [$];
$x -> sort by [$ desc];


// -- schema merging ------------------------------------------------------------------------------

registerFunction('mergeSchemata', 'com.ibm.jaql.udf.MergeSchemataUdf');

mergeSchemata(schema binary, schema binary);
mergeSchemata(schema binary(minLength=5,maxLength=10), schema binary);
mergeSchemata(schema binary(minLength=5,maxLength=11), schema binary(minLength=4,maxLength=10));

mergeSchemata(schema boolean, schema boolean);
mergeSchemata(schema boolean, schema boolean(false));
mergeSchemata(schema boolean, schema boolean(true));
mergeSchemata(schema boolean(false), schema boolean(true));
mergeSchemata(schema boolean(false), schema boolean(false));
mergeSchemata(schema boolean(true), schema boolean(true));

mergeSchemata(schema date, schema date);
mergeSchemata(schema date, schema date(value=date('2001-07-04T12:08:56Z')));
mergeSchemata(schema date(min=date('2001-07-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z')),
              schema date(min=date('2001-08-04T12:08:56Z'), max=date('2002-08-04T12:08:56Z')));
mergeSchemata(schema date(min=date('2001-07-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z')),
              schema date(min=date('2001-06-04T12:08:56Z'), max=date('2002-06-04T12:08:56Z')));
mergeSchemata(schema date(min=date('2001-07-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z')),
              schema date(value=date('2001-06-04T12:08:56Z')));

mergeSchemata(schema decfloat, schema decfloat);
mergeSchemata(schema decfloat, schema decfloat(value=1.0));
mergeSchemata(schema decfloat(min=1.0, max=5.0),
              schema decfloat(min=2.0, max=6.0));
mergeSchemata(schema decfloat(min=1.0, max=5.0),
              schema decfloat(min=0.0, max=4.0));
mergeSchemata(schema decfloat(min=1.0, max=5.0),
              schema decfloat(value=0.0));

mergeSchemata(schema double, schema double);
mergeSchemata(schema double, schema double(value=1.0d));
mergeSchemata(schema double(min=1.0d, max=5.0d),
              schema double(min=2.0d, max=6.0d));
mergeSchemata(schema double(min=1.0d, max=5.0d),
              schema double(min=0.0d, max=4.0d));
mergeSchemata(schema double(min=1.0d, max=5.0d),
              schema double(value=0.0d));

mergeSchemata(schema long, schema long);
mergeSchemata(schema long, schema long(value=1));
mergeSchemata(schema long(min=1, max=5),
              schema long(min=2, max=6));
mergeSchemata(schema long(min=1, max=5),
              schema long(min=0, max=4));
mergeSchemata(schema long(min=1, max=5),
              schema long(value=0));

mergeSchemata(schema null, schema null);

mergeSchemata(schema string, schema string);
mergeSchemata(schema string(minLength=5,maxLength=10), schema string);
mergeSchemata(schema string(minLength=5,maxLength=11), schema string(minLength=4,maxLength=10));
mergeSchemata(schema string(value="a"), schema string);
mergeSchemata(schema string(pattern="a"), schema string);

mergeSchemata(schema null, schema string);
mergeSchemata(schema null, schema string|long);
mergeSchemata(schema null, schema string|null);
mergeSchemata(schema long(min=1)|string(maxLength=8)|null, schema date|long(min=2)|string(maxLength=5));

mergeSchemata(schema nonnull, schema nonnull);
mergeSchemata(schema nonnull, schema long);
mergeSchemata(schema nonnull, schema long|date);
mergeSchemata(schema nonnull, schema null);
mergeSchemata(schema nonnull, schema long|null);


mergeSchemata(schema [], schema []);
mergeSchemata(schema [ long, boolean, date ], schema [ long, string, null ]);
mergeSchemata(schema [ long, decfloat ], schema [ long ]);
mergeSchemata(schema [ long, decfloat<2,5> ], schema [ long ]);
mergeSchemata(schema [ long, decfloat<2,5> ], schema [ long, date ]);
mergeSchemata(schema [ long, decfloat<2,5> ], schema [ long, decfloat<4,7> ]);
mergeSchemata(schema [ long, decfloat<2,5> ], schema [ long, date<4,7> ]);
mergeSchemata(schema [ long, decfloat<2,5> ], schema [ long, null, date<4,7> ]);

mergeSchemata(schema {}, schema {});
mergeSchemata(schema { c: null, a: long, b:long }, schema { a:long, b:long, c:null });
mergeSchemata(schema { a: long, b:long, c:null, e?: date }, schema { a: long, b:string, d:null, e:date });
mergeSchemata(schema { a: long, *:date }, schema { a: long });
mergeSchemata(schema { a: long, *:date }, schema { a: long, *:null });

// -- schema compaction ---------------------------------------------------------------------------

registerFunction('compactSchemata', 'com.ibm.jaql.udf.CompactSchemataUdf');

compactSchemata(schema binary, schema binary);
compactSchemata(schema binary(minLength=5,maxLength=10), schema binary);
compactSchemata(schema binary(minLength=5,maxLength=11), schema binary(minLength=4,maxLength=10));

compactSchemata(schema boolean, schema boolean);
compactSchemata(schema boolean, schema boolean(false));
compactSchemata(schema boolean, schema boolean(true));
compactSchemata(schema boolean(false), schema boolean(true));
compactSchemata(schema boolean(false), schema boolean(false));
compactSchemata(schema boolean(true), schema boolean(true));

compactSchemata(schema date, schema date);
compactSchemata(schema date, schema date(value=date('2001-07-04T12:08:56Z')));
compactSchemata(schema date(min=date('2001-07-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z')),
              schema date(min=date('2001-08-04T12:08:56Z'), max=date('2002-08-04T12:08:56Z')));
compactSchemata(schema date(min=date('2001-07-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z')),
              schema date(min=date('2001-06-04T12:08:56Z'), max=date('2002-06-04T12:08:56Z')));
compactSchemata(schema date(min=date('2001-07-04T12:08:56Z'), max=date('2002-07-04T12:08:56Z')),
              schema date(value=date('2001-06-04T12:08:56Z')));

compactSchemata(schema decfloat, schema decfloat);
compactSchemata(schema decfloat, schema decfloat(value=1.0));
compactSchemata(schema decfloat(min=1.0, max=5.0),
              schema decfloat(min=2.0, max=6.0));
compactSchemata(schema decfloat(min=1.0, max=5.0),
              schema decfloat(min=0.0, max=4.0));
compactSchemata(schema decfloat(min=1.0, max=5.0),
              schema decfloat(value=0.0));

compactSchemata(schema double, schema double);
compactSchemata(schema double, schema double(value=1.0d));
compactSchemata(schema double(min=1.0d, max=5.0d),
              schema double(min=2.0d, max=6.0d));
compactSchemata(schema double(min=1.0d, max=5.0d),
              schema double(min=0.0d, max=4.0d));
compactSchemata(schema double(min=1.0d, max=5.0d),
              schema double(value=0.0d));

compactSchemata(schema long, schema long);
compactSchemata(schema long, schema long(value=1));
compactSchemata(schema long(min=1, max=5),
              schema long(min=2, max=6));
compactSchemata(schema long(min=1, max=5),
              schema long(min=0, max=4));
compactSchemata(schema long(min=1, max=5),
              schema long(value=0));

compactSchemata(schema null, schema null);

compactSchemata(schema string, schema string);
compactSchemata(schema string(minLength=5,maxLength=10), schema string);
compactSchemata(schema string(minLength=5,maxLength=11), schema string(minLength=4,maxLength=10));
compactSchemata(schema string(value="a"), schema string);
compactSchemata(schema string(pattern="a"), schema string);

compactSchemata(schema null, schema string);
compactSchemata(schema null, schema string|long);
compactSchemata(schema null, schema string|null);
compactSchemata(schema long(min=1)|string(maxLength=8)|null, schema date|long(min=2)|string(maxLength=5));


compactSchemata(schema nonnull, schema nonnull);
compactSchemata(schema nonnull, schema long);
compactSchemata(schema nonnull, schema long|date);
compactSchemata(schema nonnull, schema null);
compactSchemata(schema nonnull, schema long|null);


compactSchemata(schema [], schema []);
compactSchemata(schema [ long, boolean, date ], schema [ long, string, null ]);
compactSchemata(schema [ long, decfloat ], schema [ long ]);
compactSchemata(schema [ long, decfloat<2,5> ], schema [ long ]);
compactSchemata(schema [ long, decfloat<2,5> ], schema [ long, date ]);
compactSchemata(schema [ long, decfloat<2,5> ], schema [ long, decfloat<4,7> ]);
compactSchemata(schema [ long, decfloat<2,5> ], schema [ long, date<4,7> ]);
compactSchemata(schema [ long, decfloat<2,5> ], schema [ long, null, date<4,7> ]);

compactSchemata(schema {}, schema {});
compactSchemata(schema { c: null, a: long, b:long }, schema { a:long, b:long, c:null });
compactSchemata(schema { a: long, b:long, c:null, e?: date }, schema { a: long, b:string, d:null, e:date });
compactSchemata(schema { a: long, *:date }, schema { a: long });
compactSchemata(schema { a: long, *:date }, schema { a: long, *:null });


// -- path expressions and schemata --------------------------------------------------------------

// records
schemaof ({ a: "yes", b: 0 }.a);
schemaof ({ a: "yes", b: 0 }.c);
schemaof ({ a: { c: "yes" }, b: 0 }.a.c) ;
schemaof ({ a: "yes", b: 0 }{*});
schemaof ({ a: "yes", b: 0 }{*-.b});
schemaof ({ a: "yes", b: 0, c:2 }{*-.b,.c});
schemaof ({ a:"yes", { b: 0, c: 2 }.*});

// arrays
schemaof ([ "yes", 0, 1][0]);
schemaof ([ "yes", 0, 1][1]);
schemaof ([ "yes", 0, 1][4]);
schemaof ([ "yes", 0, 1][0:1]);
schemaof ([ "yes", 0, 1][1:*]);
schemaof ([ "yes", 0, 1][*:1]);
schemaof ([ "yes", 0, 1][*:*]);

// arrays: nulls
schemaof ([ "yes", [ 0 ], 1, null] [?]);
schemaof ([ "yes", [ 0 ], 1, [ null ]] [?]);
schemaof ([ null ] [?]);

// arrays: expanding
schemaof ([ "yes", [ 0 ], 1, null] []);
schemaof ([ "yes", [ 0 ], 1, [ null ]] []);
schemaof ([ null ] []);


// -- transforms ---------------------------------------------------------------------------------

schemaof(null -> transform $);
schemaof([]  -> transform $);
schemaof([ 1, 2, 3]  -> transform $);

// records
schemaof ([{ a: "yes", b: 0 }] -> transform $.a) ;
schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform $.a) ;
schemaof ([{ a: "yes", b: 0}] -> transform { $.a });
schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform { $.a }) ;
schemaof ([{ a: "yes", b: 0 }] -> transform { b: $.a }) ;
schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform { b: $.a }) ;
schemaof ([{ a: "yes", b: 0}] -> transform ${.a});
schemaof ([{ a: "yes", b: 0 }, {b:1} ] -> transform ${.a});

// records with copying
schemaof ([{ a: "yes", b: 0 }] -> transform { $.* }) ;
schemaof ([{ a: "yes", b: 0 }, { b: 1} ] -> transform  { $.* }) ;
schemaof ([{ a: "yes", b: 0 }] -> transform { c:1, $.* });
schemaof ([{ a: "yes", b: 0 }] -> transform ${*});
schemaof ([{ a: "yes", b: 0 }] -> transform ${*-.a});
schemaof ([{ a: "yes", b: 0, c:2 }] -> transform ${*-.a,.c});

// arrays
schemaof ([ [ 0, "yes" ] ] -> transform $[1]);
schemaof ([ [ 0, "yes" ], [ 1 ] ] -> transform $[1]);
schemaof ([ [ true, "a", 1 ] ] -> transform $[0:1]);
schemaof ([ [ true, "a", 1 ] ] -> transform $[1:*]);
schemaof ([ [ true, "a", 1 ] ] -> transform $[*:1]);
schemaof ([ [ true, "a", 1 ] ] -> transform $[*:*]);

// records and arrays
schemaof ([ { a: { a: "no", b: [ {c: "yes"}, 2], c: "no"}, c: "no"}  ] -> transform $.a.b[0]{.a,.c});

schemaof([ [ {a: 1 } ] ] -> transform $[*]);
schemaof([ [ {a: 1 } ] ] -> transform $[*].a);
schemaof([ [ {a: 1 } ] ] -> transform $[*].b);
schemaof([ [ {a: 1 }, {b: 2} ] ] -> transform $[*].a);

schemaof([ [ {a: 1 } ], {a: 2}, null ] -> transform $[?]);
schemaof([ [ {a: 1 } ], {a: 2}, null ] -> transform $[?].a);

schemaof([ [ {a: [1, 2, "a", null] } ], null, 1 ] -> transform $[]);
schemaof([ [ {a: [1, 2, "a", null] } ], null ] -> transform $[].a);


// -- group by-------------------------------------------------------------------------------------

schemaof(null -> group by $k=$ as $ into $);
schemaof([] -> group by $k=$ as $ into $);
schemaof([ {a: 1, b: "b1"}, {a: 1, b: "b2"} ] -> group by $k=$.a into { key: $k, values: $ });
schemaof([ {a: 1, b: "b1"}, {a: 2, b: "b2"} ] -> group by $k=$.a into { key: $k, values: $ });
schemaof([ {a: 1, b: "b1"}, {b:"b2"} ] -> group by $k=$.a into { key: $k, values: $ });

schemaof(group null by $k=$ as $ into $);
schemaof(group []  by $k=$ as $ into $);
schemaof(group [ {a: 1, b: "b1"}, {a: 1, b: "b1"} ] by $k=$.a as $g1 into { key: $k, values: $g1 });
schemaof(group [ {a: 1, b: "b1"}, {a: 2, b: "b2"} ] by $k=$.a as $g1 into { key: $k, values: $g1 });
schemaof(group [ {a: 1, b: "b1"}, {b: "b1"} ] by $k=$.a as $g1 into { key: $k, values: $g1 });

schemaof(group null by $k=$ as $g1, null by $k=$ as $g2 
         into { key: $k, values1: $g1, values2: $g2 });
schemaof(group []  by $k=$ as $g1, []  by $k=$ as $g2 
         into { key: $k, values1: $g1, values2: $g2 });
schemaof(group []  by $k=$ as $g1, null  by $k=$ as $g2 
         into { key: $k, values1: $g1, values2: $g2 });

schemaof(group null by $k=$ as $g1, [ 1 ] by $k=$ as $g2 
         into { key: $k, values1: $g1, values2: $g2 });
schemaof(group [] by $k=$ as $g1, [ 1 ] by $k=$ as $g2 
         into { key: $k, values1: $g1, values2: $g2 });

schemaof(
  group [ {a: 1, b:"b1"}, {a: 1, b: "b2"} ] by $k=$.a as $g1,
        [ {c: 3, d:"d1"}, {c: 4, b: "bbb"} ] by $k=$.c as $g2
  into { key: $k, values1: $g1, values2: $g2 });


// -- filter/sort/expand --------------------------------------------------------------------------

schemaof( null -> filter $>1);
schemaof( [] -> filter $>1);
schemaof( [ 1, 2, 3 ] -> filter $>1);
schemaof( null -> sort by [$] );
schemaof( [] -> sort by [$] );
schemaof( [ 2, 1, 3 ] -> sort by [$]);
schemaof( null -> expand);
schemaof( [] -> expand);
schemaof( [[]] -> expand);
schemaof( [[[]]] -> expand);
schemaof( [ [1,2], ["a","b"], [true], null ] -> expand);


// -- other expressions --------------------------------------------------------------------------

schemaof(read("anything"));

schemaof(null -> keyLookup(null));
schemaof([[1, "a"]] -> keyLookup(null));
schemaof(null -> keyLookup([[1, "a"]]));
schemaof([[1, "a"]] -> keyLookup([[1, "b"]]));

//-------------------------- QUIT ---------------------------------

quit;
