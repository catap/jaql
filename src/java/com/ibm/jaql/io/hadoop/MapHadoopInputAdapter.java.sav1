/*
 * Copyright (C) IBM Corp. 2009.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package com.ibm.jaql.io.hadoop;

import java.io.IOException;

import org.apache.hadoop.mapred.InputSplit;
import org.apache.hadoop.mapred.JobConf;
import org.apache.hadoop.mapred.RecordReader;
import org.apache.hadoop.mapred.Reporter;

import com.ibm.jaql.json.type.JsonString;
import com.ibm.jaql.json.type.JsonValue;
import com.ibm.jaql.json.util.JsonIterator;
import com.ibm.jaql.lang.core.Context;
import com.ibm.jaql.lang.core.JaqlFunction;
import com.ibm.jaql.lang.expr.hadoop.MapReduceBaseExpr;
import com.ibm.jaql.lang.expr.hadoop.RecordReaderValueIter;


public class MapHadoopInputAdapter extends DefaultHadoopInputAdapter<JsonHolder, JsonHolder>
{
   public final static JsonString MAP_FUNCTION = new JsonString("map");

   protected JaqlFunction mapFn;
   protected Context context;

  /*
   * (non-Javadoc)
   * 
   * @see com.ibm.jaql.io.hadoop.DefaultHadoopInputAdapter#initializeFrom(com.ibm.jaql.json.type.Item)
   */
  @Override
  public void init(JsonValue value) throws Exception
  {
    super.init(value);
    context = new Context();
    JsonValue mapArg = options.get(MAP_FUNCTION);
    if( mapArg instanceof JaqlFunction )
    {
      // TODO: HACK: we cannot parse a JaqlFunction using the JSON parser, which is used by the I/O package
      // so we serialize the function into a string to ship around
      mapFn = (JaqlFunction) mapArg;
      options.set(MAP_FUNCTION, new JsonString(mapFn.getText()));
    }
    else if( mapArg instanceof JsonString )
    {
      mapFn = MapReduceBaseExpr.RemoteEval.compile(context, mapArg.toString());
    }
    else if( mapArg != null )
    {
      throw new RuntimeException("invalid map argument: "+mapArg);
    }
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.ibm.jaql.io.hadoop.DefaultHadoopInputAdapter#set(org.apache.hadoop.mapred.JobConf)
   */
  @Override
  protected void set(JobConf conf) throws Exception
  {
    super.set(conf);
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.ibm.jaql.io.hadoop.DefaultHadoopInputAdapter#configure(org.apache.hadoop.mapred.JobConf)
   */
  @Override
  public void configure(JobConf conf)
  {
    // FIXME: DefaultHadoopInputAdapter doesn't call configure when running serially nor init in map/reduce so code duplicated...
    super.configure(conf);
    JsonString mapFnText = (JsonString) options.get(MAP_FUNCTION);
    if( mapFnText != null )
    {
      context = new Context();
      mapFn = MapReduceBaseExpr.RemoteEval.compile(context, mapFnText.toString());
    }
  }

  @Override
  public void close() throws Exception
  {
    if( context != null )
    {
      context.reset();
      context = null;
    }
    super.close();
  }

  /*
   * (non-Javadoc)
   * 
   * @see com.ibm.jaql.io.hadoop.DefaultHadoopInputAdapter#getRecordReader(org.apache.hadoop.mapred.InputSplit,
   *      org.apache.hadoop.mapred.JobConf, org.apache.hadoop.mapred.Reporter)
   */
  @Override
  public RecordReader<JsonHolder, JsonHolder> getRecordReader(
      final InputSplit split,
      final JobConf job,
      final Reporter reporter) throws IOException
  {
    final RecordReader<JsonHolder,JsonHolder> reader1 = 
      MapHadoopInputAdapter.super.getRecordReader(split, job, reporter);
    if( mapFn == null )
    {
      return reader1;
    }
    
    try
    {
      return new RecordReader<JsonHolder,JsonHolder>()
      {
        RecordReader<JsonHolder,JsonHolder> reader = reader1; 
        JsonIterator mapResult = mapFn.iter(context, new RecordReaderValueIter(reader));
        
        @Override
        public JsonHolder createKey()
        {
          return new JsonHolder();
        }

        @Override
        public JsonHolder createValue()
        {
          return new JsonHolder();
        }

        @Override
        public long getPos() throws IOException
        {
          return reader.getPos();
        }

        @Override
        public float getProgress() throws IOException
        {
          return reader.getProgress();
        }

        @Override
        public boolean next(JsonHolder key, JsonHolder value)
            throws IOException
        {
          try
          {
            if( mapResult.moveNext() )
            {
              value.value = mapResult.current();
              return true;
            }
          }
          catch (Exception e)
          {
            throw new RuntimeException(e);
          }
          mapResult = JsonIterator.EMPTY; 
          reader.close();
          reader = null;
          return false;
        }
        
        @Override
        public void close() throws IOException
        {
          if( reader != null )
          {
            reader.close();
            reader = null;
          }
          if( context != null )
          {
            context.reset();
            context = null;
          }
        }

      };
    }
    catch (Exception e)
    {
      throw new IOException(e);
    }
    
  }

}
