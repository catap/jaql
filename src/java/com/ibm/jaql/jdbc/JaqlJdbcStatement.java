package com.ibm.jaql.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;

import com.ibm.jaql.json.schema.RecordSchema;
import com.ibm.jaql.json.schema.Schema;
import com.ibm.jaql.json.schema.SchemaTransformation;
import com.ibm.jaql.json.type.JsonString;
import com.ibm.jaql.json.type.JsonType;
import com.ibm.jaql.json.util.JsonIterator;
import com.ibm.jaql.util.BaseUtil;

public class JaqlJdbcStatement implements Statement
{
  protected JaqlJdbcConnection conn;
  protected String sql;
  protected ArrayList<JaqlJdbcResultSet> results = new ArrayList<JaqlJdbcResultSet>();

  public JaqlJdbcStatement(JaqlJdbcConnection conn) throws SQLException
  {
    this.conn = conn;
  }

  @Override
  public void addBatch(String sql) throws SQLException
  {
    throw new SQLFeatureNotSupportedException("batch not yet supported");
  }

  @Override
  public void cancel() throws SQLException
  {
    throw new SQLFeatureNotSupportedException("cancel not yet supported");
  }

  @Override
  public void clearBatch() throws SQLException
  {
    throw new SQLFeatureNotSupportedException("batch not yet supported");
  }

  @Override
  public void clearWarnings() throws SQLException
  {
    // TODO: support warnings
  }

  @Override
  public void close() throws SQLException
  {
    // TODO: need statement close independent of session close
  }

  @Override
  public boolean execute(String sql) throws SQLException
  {
    try
    {
      results.clear();
      this.sql = sql;
      conn.jaql.setInput(sql);
      JsonIterator iter;
      while( (iter = conn.jaql.iter()) != null )
      {
        
        Schema schema = conn.jaql.currentSchema();
        if( schema.is(JsonType.ARRAY, JsonType.NULL).always() )
        {
          schema = schema.elements();
        }
        if( schema == null ) // empty result
        {
          schema = new RecordSchema(new JsonString[0]); // make into an empty record
        }
        else if( ! schema.is(JsonType.RECORD).always() )
        {
          throw new SQLException("jaql statement must produce records");
        }
        RecordSchema recSchema = (RecordSchema)SchemaTransformation.restrictTo(schema, JsonType.RECORD);
        
        results.add(new JaqlJdbcResultSet(this, recSchema, iter));
      }
      return results.size() > 0;
    }
    catch( Exception e )
    {
      // 58033  An unexpected error occurred while attempting to access a client driver.
      Throwable c = BaseUtil.getRootCause(e);
      throw new SQLException("while preparing statements: ["+c.getClass().getSimpleName()+"]"+c.getMessage(),"58033",e);
    }
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException
  {
    if( autoGeneratedKeys != Statement.NO_GENERATED_KEYS )
    {
      throw new SQLFeatureNotSupportedException("autogenerated keys not supported");
    }
    return execute(sql);
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException
  {
    if( columnIndexes != null && columnIndexes.length > 0 )
    {
      throw new SQLFeatureNotSupportedException("autogenerated keys not supported");
    }
    return execute(sql);
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException
  {
    if( columnNames != null && columnNames.length > 0 )
    {
      throw new SQLFeatureNotSupportedException("autogenerated keys not supported");
    }
    return execute(sql);
  }

  @Override
  public int[] executeBatch() throws SQLException
  {
    throw new SQLFeatureNotSupportedException("batch not yet supported");
  }

  @Override
  public ResultSet executeQuery(String sql) throws SQLException
  {
    if( ! execute(sql) )
    {
      throw new SQLException("no result set");
    }
    return results.remove(0);
  }

  @Override
  public int executeUpdate(String sql) throws SQLException
  {
    throw new SQLFeatureNotSupportedException("update not supported");
  }

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys)
      throws SQLException
  {
    throw new SQLFeatureNotSupportedException("update not supported");
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException
  {
    throw new SQLFeatureNotSupportedException("update not supported");
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames)
      throws SQLException
  {
    throw new SQLFeatureNotSupportedException("update not supported");
  }

  @Override
  public Connection getConnection() throws SQLException
  {
    return conn;
  }

  @Override
  public int getFetchDirection() throws SQLException
  {
    return ResultSet.FETCH_FORWARD;
  }

  @Override
  public int getFetchSize() throws SQLException
  {
    return 1;
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException
  {
    throw new SQLFeatureNotSupportedException("generated keys not supported");
  }

  @Override
  public int getMaxFieldSize() throws SQLException
  {
    return Integer.MAX_VALUE;
  }

  @Override
  public int getMaxRows() throws SQLException
  {
    return 0;
  }

  @Override
  public boolean getMoreResults() throws SQLException
  {
    return results.size() > 0;
  }

  @Override
  public boolean getMoreResults(int current) throws SQLException
  {
//    if( current != Statement.CLOSE_CURRENT_RESULT && 
//        current != Statement.CLOSE_ALL_RESULTS )
//    {
//      throw new SQLFeatureNotSupportedException("results");
//    }
    return results.size() > 0;
  }

  @Override
  public int getQueryTimeout() throws SQLException
  {
    return 0;
  }

  @Override
  public JaqlJdbcResultSet getResultSet() throws SQLException
  {
    if( results.size() > 0 )
    {
      return results.remove(0);
    }
    return null;
  }

  @Override
  public int getResultSetConcurrency() throws SQLException
  {
    return ResultSet.CONCUR_READ_ONLY;
  }

  @Override
  public int getResultSetHoldability() throws SQLException
  {
    return ResultSet.CLOSE_CURSORS_AT_COMMIT;
  }

  @Override
  public int getResultSetType() throws SQLException
  {
    return ResultSet.TYPE_FORWARD_ONLY;
  }

  @Override
  public int getUpdateCount() throws SQLException
  {
    return -1;
  }

  @Override
  public SQLWarning getWarnings() throws SQLException
  {
    return null;
  }

  @Override
  public boolean isClosed() throws SQLException
  {
    return false;
  }

  @Override
  public boolean isPoolable() throws SQLException
  {
    return false;
  }

  @Override
  public void setCursorName(String name) throws SQLException
  {
    throw new SQLFeatureNotSupportedException("cursor name");
  }

  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException
  {
    throw new SQLFeatureNotSupportedException("escape processing");
  }

  @Override
  public void setFetchDirection(int direction) throws SQLException
  {
    if( direction != ResultSet.FETCH_FORWARD )
    {
      throw new SQLFeatureNotSupportedException("only forward cursors are supported");
    }
  }

  @Override
  public void setFetchSize(int rows) throws SQLException
  {
  }

  @Override
  public void setMaxFieldSize(int max) throws SQLException
  {
    throw new SQLFeatureNotSupportedException("max field size");
  }

  @Override
  public void setMaxRows(int max) throws SQLException
  {
    throw new SQLFeatureNotSupportedException("max rows");
  }

  @Override
  public void setPoolable(boolean poolable) throws SQLException
  {
  }

  @Override
  public void setQueryTimeout(int seconds) throws SQLException
  {
    throw new SQLFeatureNotSupportedException("query timeout");
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException
  {
    return false;
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException
  {
    return null;
  }

}
