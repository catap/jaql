jaqltemp("tempfile", schema null);##
{
  "location": "tempfile",
  "options": {
    "schema": schema null
  },
  "type": "jaqltemp"
}

r = fn(schema) read(jaqltemp("tempfile", schema));##
"r"

w = fn(what, schema) what -> write(jaqltemp("tempfile", schema));##
"w"


// -- test schema reporting of read ---------------------------------------------------------------

schemaof(read(jaqltemp("tempfile", schema null | long | nonnull)));##
schema [
         long | any * 
       ]


// BELOW: COMMENTED OUT BECAUSE ONLY WORKS WITH REWRITE

//s = schema null | long | nonnull;
//schemaof(read(jaqltemp("tempfile", s)));

//schemaof(r(schema null | long | nonnull));


// -- null ----------------------------------------------------------------------------------------

s = schema null;##
"s"

( [ ] -> w(s), r(s) );##
[]

( [ null, null ] -> w(s), r(s) );##
[
  null,
  null
]

( [ null, null, null ] -> w(s), r(s) );##
[
  null,
  null,
  null
]

[ 1 ] -> w(s);##
FAILURE
 // should fail


// -- nonnull -----------------------------------------------------------------------------------------

s = schema nonnull;##
"s"

( [ 1, "abc", { a: 5 }, [ 1, true ] ] -> w(s), r(s) );##
[
  1,
  "abc",
  {
    "a": 5
  },
  [
    1,
    true
  ]
]

[ null ] -> w(s);##
FAILURE
 // should fail


// -- boolean -------------------------------------------------------------------------------------

s = schema boolean;##
"s"

( [ true, false, true ] -> w(s), r(s) );##
[
  true,
  false,
  true
]


s = schema boolean(value = true);##
"s"

( [ true, true ] -> w(s), r(s) );##
[
  true,
  true
]

[ true, false ] -> w(s);##
FAILURE
 // should fail


// -- long ----------------------------------------------------------------------------------------

s = schema long;##
"s"

( [ -9223372036854775807-1, 0, 9223372036854775807 ] -> w(s), r(s) );##
[
  -9223372036854775808,
  0,
  9223372036854775807
]

[ 1d ] -> w(s);##
FAILURE
 // should fail: non-integer
[ 1m ] -> w(s);##
FAILURE
 // should fail: non-integer

s = schema long(22);##
"s"

( [ 22, 22, 22 ] -> w(s), r(s) );##
[
  22,
  22,
  22
]

[ -101 ] -> w(s);##
FAILURE
 // should fail


// -- decfloat ------------------------------------------------------------------------------------

s = schema decfloat;##
"s"

( [ -9223372036854775808m, 0.5m, 9223372036854775807m ] -> w(s), r(s) );##
[
  -9223372036854775808m,
  0.5m,
  9223372036854775807m
]

[ 1 ] -> w(s);##
FAILURE
   // should fail: non-decimal
[ 1.0 ] -> w(s);##
FAILURE
 // should fail: non-decimal

s = schema decfloat(22m);##
"s"

( [ 22m, 22m, 22m ] -> w(s), r(s) );##
[
  22m,
  22m,
  22m
]

[ -101m ] -> w(s);##
FAILURE
 // should fail


// -- double --------------------------------------------------------------------------------------

s = schema double;##
"s"

( [ -9223372036854775807d-1d, 0.5d, 9223372036854775807d ] -> w(s), r(s) );##
[
  -9.223372036854776E18,
  0.5,
  9.223372036854776E18
]

[ 1 ] -> w(s);##
FAILURE
   // should fail: non-double
[ 1m ] -> w(s);##
FAILURE
  // should fail: non-double

s = schema double(22d);##
"s"

( [ 22d, 22d, 22d ] -> w(s), r(s) );##
[
  22.0,
  22.0,
  22.0
]

[ -101d ] -> w(s);##
FAILURE
 // should fail


// -- string --------------------------------------------------------------------------------------

s = schema string;##
"s"

( [ "abc", "", "!@#dsggb34" ] -> w(s), r(s) );##
[
  "abc",
  "",
  "!@#dsggb34"
]

[ 1 ] -> w(s);##
FAILURE
 // should fail

s = schema string(value="abc");##
"s"

( [ "abc", "abc", "abc" ] -> w(s), r(s) );##
[
  "abc",
  "abc",
  "abc"
]

[ "abd" ] -> w(s);##
FAILURE
 // should fail

s = schema string(2);##
"s"

( [ "ab", "ac", "ad" ] -> w(s), r(s) );##
[
  "ab",
  "ac",
  "ad"
]

[ "a" ] -> w(s);##
FAILURE
 // should fail
[ "abd" ] -> w(s);##
FAILURE
 // should fail

// -- binary --------------------------------------------------------------------------------------

s = schema binary;##
"s"

( [ hex(""), hex("11"), hex("11AA") ] -> w(s), r(s) );##
[
  hex(''),
  hex('11'),
  hex('11AA')
]

[ "" ] -> w(s);##
FAILURE
 // should fail

s = schema binary(value=hex("11"));##
"s"

( [ hex("11"), hex("11"), hex("11") ] -> w(s), r(s) );##
[
  hex('11'),
  hex('11'),
  hex('11')
]

[ hex("12") ] -> w(s);##
FAILURE
 // should fail

s = schema binary(2);##
"s"

( [ hex("1111"), hex("2222"), hex("FFFF") ] -> w(s), r(s) );##
[
  hex('1111'),
  hex('2222'),
  hex('FFFF')
]

[ hex("11") ] -> w(s);##
FAILURE
 // should fail
[ hex("112233") ] -> w(s);##
FAILURE
 // should fail


// -- date ----------------------------------------------------------------------------------------

s = schema date;##
"s"

( [ date('2000-01-01T11:59:59Z'), date('2000-01-01T12:00:00Z'), date('2000-01-01T12:00:01Z') ] -> w(s), r(s) );##
[
  date('2000-01-01T11:59:59Z'),
  date('2000-01-01T12:00:00Z'),
  date('2000-01-01T12:00:01Z')
]

[ 1 ] -> w(s);##
FAILURE
 // should fail

s = schema date(date('2000-01-01T11:59:59Z'));##
"s"

( [ date('2000-01-01T11:59:59Z'), date('2000-01-01T11:59:59Z'), date('2000-01-01T11:59:59Z') ] -> w(s), r(s) );##
[
  date('2000-01-01T11:59:59Z'),
  date('2000-01-01T11:59:59Z'),
  date('2000-01-01T11:59:59Z')
]

[ date('2000-01-01T11:59:60Z') ] -> w(s);##
FAILURE
 // should fail


// -- functions -----------------------------------------------------------------------------------

s = schema function;##
"s"

( [ fn(x) x ] -> w(s), r(s) );##
[
  fn(x) (x)
]

[ schema long ] -> w(s);##
FAILURE
 // should fail


// -- schema --------------------------------------------------------------------------------------

s = schema schematype;##
"s"

( [ schema long, schema [ long, boolean * ], schema null ] -> w(s), r(s) );##
[
  schema long,
  schema [
           long,
           boolean *
         ],
  schema null
]

[ fn(x) x ] -> w(s);##
FAILURE
 // should fail

s = schema schematype(schema long);##
"s"

( [ schema long, schema long ] -> w(s), r(s) );##
[
  schema long,
  schema long
]

[ schema boolean ] -> w(s);##
FAILURE
 // should fail


// -- arrays --------------------------------------------------------------------------------------

s = schema [ ];##
"s"

( [ [], [], [] ] -> w(s), r(s) );##
[
  [],
  [],
  []
]

[ [1] ] -> w(s);##
FAILURE
 // should fail

s = schema [ * ];##
"s"

( [ [], [0], [1,"a"], [2,"b",true], [3,"c",null] ] -> w(s), r(s) );##
[
  [],
  [
    0
  ],
  [
    1,
    "a"
  ],
  [
    2,
    "b",
    true
  ],
  [
    3,
    "c",
    null
  ]
]

[ 1 ] -> w(s);##
FAILURE
 // should fail

s = schema [ long, boolean ];##
"s"

( [ [1,true], [2,false], [3,true] ] -> w(s), r(s) );##
[
  [
    1,
    true
  ],
  [
    2,
    false
  ],
  [
    3,
    true
  ]
]

[ [1] ] -> w(s);##
FAILURE
 // should fail
[ [1,true,0] ] -> w(s);##
FAILURE
 // should fail
[ [true,1] ] -> w(s);##
FAILURE
 // should fail
[ [1,1] ] -> w(s);##
FAILURE
 // should fail
[ [true,true] ] -> w(s);##
FAILURE
 // should fail

s = schema [ long * ];##
"s"

( [ [1], [1,2], [1,2,3] ] -> w(s), r(s) );##
[
  [
    1
  ],
  [
    1,
    2
  ],
  [
    1,
    2,
    3
  ]
]

[ [true,true] ] -> w(s);##
FAILURE
 // should fail

s = schema [ string, long * ];##
"s"

( [ ["1"], ["3",4], ["4",5,6] ] -> w(s), r(s) );##
[
  [
    "1"
  ],
  [
    "3",
    4
  ],
  [
    "4",
    5,
    6
  ]
]

[ [] ] -> w(s);##
FAILURE
 // should fail
[ [ 1,2,3,4 ] ] -> w(s);##
FAILURE
 // should fail


// -- records -------------------------------------------------------------------------------------

// empty record
s = schema { };##
"s"

( [ {}, {}, {} ] -> w(s), r(s) );##
[
  {},
  {},
  {}
]

[ { a: 1 } ] -> w(s);##
FAILURE
 // should fail

// only required fields
s = schema { b: boolean, a: long, c:string };##
"s"

( [ { a:1, b:true, c:"!" }, { a:-1, c:"?", b:false } ] -> w(s), r(s) );##
[
  {
    "a": 1,
    "b": true,
    "c": "!"
  },
  {
    "a": -1,
    "b": false,
    "c": "?"
  }
]

[ {} ] -> w(s);##
FAILURE
 // should fail
[ { a:1, b:true, c:"!",d:null } ] -> w(s);##
FAILURE
 // should fail
[ { a:true, b:true, c:"!"} ] -> w(s);##
FAILURE
 // should fail
[ { a:1, b:1, c:"!"} ] -> w(s);##
FAILURE
 // should fail
[ { a:1, b:true, c:true} ] -> w(s);##
FAILURE
 // should fail

// only optional fields
s = schema { b?: boolean, a?: long, c?:string };##
"s"

( [ {}, { a:1, c:"!", b:true }, { a:-1 }, { a:-1, c:"!" } ] -> w(s), r(s) );##
[
  {},
  {
    "a": 1,
    "b": true,
    "c": "!"
  },
  {
    "a": -1
  },
  {
    "a": -1,
    "c": "!"
  }
]

[ { a:1, b:true, c:"!",d:null } ] -> w(s);##
FAILURE
 // should fail
[ { a:null, b:true, c:"!"} ] -> w(s);##
FAILURE
 // should fail
[ { a:1, b:null, c:"!"} ] -> w(s);##
FAILURE
 // should fail
[ { a:1, b:true, c:null} ] -> w(s);##
FAILURE
 // should fail

// only rest fields
s = schema { *: long };##
"s"

( [ {}, { a:1, c:3, b:2 }, { a:-1 }, { a:-1, c:2 } ] -> w(s), r(s) );##
[
  {},
  {
    "a": 1,
    "b": 2,
    "c": 3
  },
  {
    "a": -1
  },
  {
    "a": -1,
    "c": 2
  }
]

[ { a: null } ] -> w(s);##
FAILURE
 // should fail

// wild mix
s = schema { a: boolean, b?: long, d:string, f?:null, *:double };##
"s"

( [ { a: true, d:"!" }, { a: true, d:"!", b: 1 }, 
    { a: true, d:"!", f:null }, { a: true, d:"!", f:null, b:3 },
    { a: true, d:"!", c:1d }, { a: true, d:"!", b: 1, c:1d, e:1d }, 
    { a: true, d:"!", f:null, "0":1d, g:2d }, { a: true, d:"!", f:null, b:3, c:1d },
    {a: true, d: "d", "0": 1d, "c":2d, "g":3d }
    ] -> w(s), r(s) );##
[
  {
    "a": true,
    "d": "!"
  },
  {
    "a": true,
    "b": 1,
    "d": "!"
  },
  {
    "a": true,
    "d": "!",
    "f": null
  },
  {
    "a": true,
    "b": 3,
    "d": "!",
    "f": null
  },
  {
    "a": true,
    "c": 1.0,
    "d": "!"
  },
  {
    "a": true,
    "b": 1,
    "c": 1.0,
    "d": "!",
    "e": 1.0
  },
  {
    "0": 1.0,
    "a": true,
    "d": "!",
    "f": null,
    "g": 2.0
  },
  {
    "a": true,
    "b": 3,
    "c": 1.0,
    "d": "!",
    "f": null
  },
  {
    "0": 1.0,
    "a": true,
    "c": 2.0,
    "d": "d",
    "g": 3.0
  }
]

[ { a:true, d:null } ] -> w(s);##
FAILURE
 // should fail
[ { a:null, d:"!" } ] -> w(s);##
FAILURE
 // should fail
[ { a: true, d:"!", b:null } ] -> w(s);##
FAILURE
 // should fail
[ { a: true, d:"!", e:null } ] -> w(s);##
FAILURE
 // should fail

s = schema { a: long, b: long, c: long, *: long };##
"s"

( [ { d:4, e:5, a: 1, b:2, c:3 } ] -> w(s), r(s) );##
[
  {
    "a": 1,
    "b": 2,
    "c": 3,
    "d": 4,
    "e": 5
  }
]
 


// -- or ------------------------------------------------------------------------------------------

s = schema long | decfloat;##
"s"

( [ -1.5m, -1m, 0m, 1, 0 ] -> w(s), r(s) );##
[
  -1.5m,
  -1m,
  0m,
  1,
  0
]

[ null ]  -> w(s);##
FAILURE
 // should fail
[ 1d ]    -> w(s);##
FAILURE
 // should fail

s = schema long(0) | decfloat(0m) | nonnull;##
"s"

( [ -1.5m, -1m, 0m, 1, 0, 1m, 1.5, -1 ] -> w(s), r(s) );##
[
  -1.5m,
  -1m,
  0m,
  1,
  0,
  1m,
  1.5,
  -1
]

[ null ]  -> w(s);##
FAILURE
 // should fail

s = schema long(0) | decfloat(0m) | any;##
"s"

( [ -1.5m, -1m, 0m, 1, 0, 1m, 1.5, -1, null ] -> w(s), r(s) );##
[
  -1.5m,
  -1m,
  0m,
  1,
  0,
  1m,
  1.5,
  -1,
  null
]



// -- binary comparison ---------------------------------------------------------------------------

// hack: sort using MR and one reducer (enforces usage of binary comparators)
sort = fn(what, schema) (
    what -> write(jaqltemp("tempfile", schema)),
    mapReduce({
        input: jaqltemp("tempfile", schema),
        output: jaqltemp("tempfile_sorted", schema),
        map: fn($) $ -> transform [$, null],
        reduce: fn(k, v) [ k ],
        schema: { key: schema, value: schema null }
    }),
    read(jaqltemp("tempfile_sorted", schema))
);##
"sort"
 

// single schemata
sort([ 23512, -45346, 0,  9223372036854775807, -9223372036854775807-1 ], schema long);##
[
  -9223372036854775808,
  -45346,
  0,
  23512,
  9223372036854775807
]

sort([ 23512d, -45346d, 0d, 9223372036854775807d, -9223372036854775809d ], schema double);##
[
  -9.223372036854776E18,
  -45346.0,
  0.0,
  23512.0,
  9.223372036854776E18
]

sort([ 23512m, -45346m, 0m, 0.002m, 0.001m, 9223372036854775807m, -9223372036854775808m ], schema decfloat);##
[
  -9223372036854775808m,
  -45346m,
  0m,
  0.001m,
  0.002m,
  23512m,
  9223372036854775807m
]

sort([ "abcc", "abc", "bcd", "abcd" ], schema string);##
[
  "abc",
  "abcc",
  "abcd",
  "bcd"
]

sort([ true, false ], schema boolean);##
[
  false,
  true
]

sort([ date('2000-01-01T11:59:59Z'), date('2000-01-01T12:00:01Z'), date('2000-01-01T12:00:00Z'), ], schema date);##
[
  date('2000-01-01T11:59:59Z'),
  date('2000-01-01T12:00:00Z'),
  date('2000-01-01T12:00:01Z')
]

sort([ hex("abcc"), hex("abc0"), hex("bcd0"), hex("abcd") ], schema binary);##
[
  hex('ABC0'),
  hex('ABCC'),
  hex('ABCD'),
  hex('BCD0')
]


// arrays
sort([ [5], [4], [1], [3], [2] ], schema [ long ]);##
[
  [
    1
  ],
  [
    2
  ],
  [
    3
  ],
  [
    4
  ],
  [
    5
  ]
]

sort([ [1], [2,2], [2,3], [2], [], [1,2], [1,1] ], schema [ long * ]);##
[
  [],
  [
    1
  ],
  [
    1,
    1
  ],
  [
    1,
    2
  ],
  [
    2
  ],
  [
    2,
    2
  ],
  [
    2,
    3
  ]
]

sort([ [3, false], [3, true], [1, true], [1, false], [2,false], [2, true] ], schema [ long, boolean ]);##
[
  [
    1,
    false
  ],
  [
    1,
    true
  ],
  [
    2,
    false
  ],
  [
    2,
    true
  ],
  [
    3,
    false
  ],
  [
    3,
    true
  ]
]

sort([ [3, false], [3, true], [1, true], [1, false], [2,false], [2, true] ], schema [ long, boolean * ]);##
[
  [
    1,
    false
  ],
  [
    1,
    true
  ],
  [
    2,
    false
  ],
  [
    2,
    true
  ],
  [
    3,
    false
  ],
  [
    3,
    true
  ]
]


// records
sort([ {a: 5}, {a: 4}, {a:1}, {a:3}, {a:2} ], schema { a:long });##
[
  {
    "a": 1
  },
  {
    "a": 2
  },
  {
    "a": 3
  },
  {
    "a": 4
  },
  {
    "a": 5
  }
]

sort([ {a: 5}, {a: 4}, {a:1}, {a:3}, {a:2} ], schema { a?:long });##
[
  {
    "a": 1
  },
  {
    "a": 2
  },
  {
    "a": 3
  },
  {
    "a": 4
  },
  {
    "a": 5
  }
]

sort([ {a: 5}, {a: 4}, {a:1}, {a:3}, {a:2}, {} ], schema { *:long });##
[
  {},
  {
    "a": 1
  },
  {
    "a": 2
  },
  {
    "a": 3
  },
  {
    "a": 4
  },
  {
    "a": 5
  }
]


sort([ {c: 5}, {d: 4}, {b:1}, {c:3}, {c:2}, {} ], schema { *:long });##
[
  {},
  {
    "b": 1
  },
  {
    "c": 2
  },
  {
    "c": 3
  },
  {
    "c": 5
  },
  {
    "d": 4
  }
]

sort([ {b: 1}, {b: 1, c:1}, {b:1, c:0}, {b:2}, {b:0}, {} ], schema { *:long });##
[
  {},
  {
    "b": 0
  },
  {
    "b": 1
  },
  {
    "b": 1,
    "c": 0
  },
  {
    "b": 1,
    "c": 1
  },
  {
    "b": 2
  }
]


sort([ {b: 1, c:1m}, {b: 1, c:2m}, {b:1, c:0m}, {b:2}, {b:0} ], schema { b:long, c?:decfloat });##
[
  {
    "b": 0
  },
  {
    "b": 1,
    "c": 0m
  },
  {
    "b": 1,
    "c": 1m
  },
  {
    "b": 1,
    "c": 2m
  },
  {
    "b": 2
  }
]

sort([ {b: 1, c:1m}, {b: 1, c:2m}, {b:1, c:0m}, {b:2}, {b:0} ], schema { b?:long, c?:decfloat });##
[
  {
    "b": 0
  },
  {
    "b": 1,
    "c": 0m
  },
  {
    "b": 1,
    "c": 1m
  },
  {
    "b": 1,
    "c": 2m
  },
  {
    "b": 2
  }
]

sort([ {b: 1, c:1m}, {b: 1, c:2m}, {b:1, c:0m}, {b:2}, {b:0} ], schema { b:long, *:decfloat });##
[
  {
    "b": 0
  },
  {
    "b": 1,
    "c": 0m
  },
  {
    "b": 1,
    "c": 1m
  },
  {
    "b": 1,
    "c": 2m
  },
  {
    "b": 2
  }
]

sort([ {b: 1, c:1m}, {b: 1, c:2m}, {b:1, c:0m}, {b:2}, {b:0} ], schema { b?:long, *:decfloat });##
[
  {
    "b": 0
  },
  {
    "b": 1,
    "c": 0m
  },
  {
    "b": 1,
    "c": 1m
  },
  {
    "b": 1,
    "c": 2m
  },
  {
    "b": 2
  }
]


sort([ {c: 1, b:1m}, {c: 1, b:2m}, {c:1, b:0m}, {c:2}, {c:0} ], schema { b?:decfloat, c:long });##
[
  {
    "b": 0m,
    "c": 1
  },
  {
    "b": 1m,
    "c": 1
  },
  {
    "b": 2m,
    "c": 1
  },
  {
    "c": 0
  },
  {
    "c": 2
  }
]

sort([ {c: 1, b:1m}, {c: 1, b:2m}, {c:1, b:0m}, {c:2}, {c:0} ], schema { b?:decfloat, c?:long });##
[
  {
    "b": 0m,
    "c": 1
  },
  {
    "b": 1m,
    "c": 1
  },
  {
    "b": 2m,
    "c": 1
  },
  {
    "c": 0
  },
  {
    "c": 2
  }
]

sort([ {c: 1, b:1m}, {c: 1, b:2m}, {c:1, b:0m}, {c:2}, {c:0} ], schema { c:long, *:decfloat });##
[
  {
    "b": 0m,
    "c": 1
  },
  {
    "b": 1m,
    "c": 1
  },
  {
    "b": 2m,
    "c": 1
  },
  {
    "c": 0
  },
  {
    "c": 2
  }
]

sort([ {c: 1, b:1m}, {c: 1, b:2m}, {c:1, b:0m}, {c:2}, {c:0} ], schema { c?:long, *:decfloat });##
[
  {
    "b": 0m,
    "c": 1
  },
  {
    "b": 1m,
    "c": 1
  },
  {
    "b": 2m,
    "c": 1
  },
  {
    "c": 0
  },
  {
    "c": 2
  }
]


// encodings
sort([ 1, 3, 2, "b", "a", "c", false, true, null ], schema long | boolean | string | null );##
[
  null,
  false,
  true,
  "a",
  "b",
  "c",
  1,
  2,
  3
]

sort([ 1, 3, 2, "b", "a", "c", false, true, null, {}, [] ], schema long | boolean(true) | string | any );##
[
  null,
  [],
  {},
  false,
  true,
  "a",
  "b",
  "c",
  1,
  2,
  3
]


