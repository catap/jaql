cleanTitle = javaudf("com.ibm.jaql.udf.CleanTitle");
qgram = javaudf("com.ibm.jaql.udf.QGram"); 
roundUp = javaudf("com.ibm.jaql.udf.RoundUp");
jaccard = javaudf("com.ibm.jaql.udf.Jaccard"); 
nullToZero = javaudf("com.ibm.jaql.udf.NullToZero"); 
memHashMap = javaudf("com.ibm.jaql.udf.MemHashMap");

/**
* Cleans the input data
*/
$normalize = fn($data, $field) (
	$data->transform {${*-.($field)}, ($field): cleanTitle($.($field))}	
	->filter not isnull($.($field))
);

/**
* Accepts a list of records which contain a key and text. It uses 
* the title to generate the qgrams and keeps the key in the 
* record, all other fields in the original record are thrown out.
*/
$gen_qgrams = fn($in, $key, $text) (
	$in ->transform { 
		key: $.($key), 
		qgrams: qgram($.($text)),
		size: count(qgram($.($text))),
		}
);

/**
* Converts the mapping (key -> qgrams) to (qgram->keys). 
*/
$group_by_qgrams = fn($in) (
	$in -> expand each $n ( 
		$n.qgrams->transform { qgram: $, $n.key }) 
	-> group by $qgram=$.qgram into { $qgram,  keys: $[*].key }
);

/**
* Calculates the frequency of the qgram based on the 
* number of keys which are associated to it.
*/
$qgram_freq_map = fn($in) (
	$in -> transform { 
		$.qgram, 
		freq: count($.keys) }
);

/*
Generates a in memory hashmap of $var that can be queried
by using $key. Multiple hashmaps can be used by using different
names.
*/
$memHash = fn($name, $key, $var) (
	(if(memHashMap($name) == false)
		memHashMap($name, $var, "qgram", "freq")),
	memHashMap($name, $key)
);

/**
* Sorts qgrams by qgram frequency in ascending order, so that the least frequent 
* qgrams are at the beginning of the qgrams list and the most frequent ones at the end.
* Because the freq index is only created from one index it can return null, null is converted to
* zero so that those qgrams are always at the beginning of the qgram list.
*/
$sort_qgrams_by_freq = fn($records, $freq) (
	$records
	->transform {
		$.key, $.size,
		qgrams: (	$.qgrams
			-> transform each $q {
				qgram: $q,
				freq: nullToZero($memHash("freq", $q,  $freq))
			     }
			->sort by [$.freq asc]
			->transform ($.qgram) //Throw freq information out again
		) }
);

/**
* Calculates the maximum number of allowed errors based on size
* and threshold.
*/
$maxError = fn($size, $threshold) (
	$size - roundUp($size * $threshold)
);

/**
* Extracts the first x qgrams from the qgram list. X depends on the
* threshold and the size of the qgrams list. We need maxError + 1
* qgrams so that later in the join we know that if there were no 
* matching qgrams in the prefix of two titles they cannot fulfill the
* threshold requirements (if "maxError" qgrams don't match and all
* others match they are still above the threshold)
*/
$prefixQgrams = fn($qgrams, $threshold) (
	$qgrams->top $maxError(count($qgrams),$threshold) + 1
);

$prefixPrepare = fn($in, $threshold) (
	$in
	->transform {
		$.key, 
		$.size,
		qgrams:$prefixQgrams($.qgrams, $threshold)
	}
	->filter not isnull(nullOnEmpty($.qgrams))
	-> expand unroll $.qgrams
);

$sizeExpand = fn($in, $threshold) (
	$in
	-> transform { 
		$.key, 
	       	$.qgrams,
	       	size: range($.size - $maxError($.size, $threshold), $.size + $maxError($.size, $threshold))
	}
	-> expand unroll $.size
);

$filter = fn($a, $b, $threshold) (
	$sizeExpanded = $sizeExpand($a, $threshold),
	$in = $prefixPrepare($sizeExpanded, $threshold),
	$out = $prefixPrepare($b, $threshold),
	join $in, $out
	where ($in.qgrams == $out.qgrams) and ($in.size == $out.size)
	into { keyI: $in.key, keyO: $out.key }
	-> group by $keyI=$.keyI
		into { key: $keyI, matches: distinct($[*].keyO) }
	->expand unroll $.matches
	->transform {a: $.key, b: $.matches}
);

/**
* This function gets a list of potential matches and calculates the jaccard similarity
* for them. Before actually calculating the jaccard similarity it first joins the list with
* the qgrams list so that it has the qgram information.
*/
$jaccard = fn($candidates, $qA, $qB) (
	$xyz = join $candidates, $qA
	where $candidates.a == $qA.key
	into { $candidates.*, qA: $qA.qgrams },	

	join  $xyz, $qB
	where $xyz.b == $qB.key
	into {$xyz.*, qB: $qB.qgrams}
	-> transform {$.a, $.b, sim: jaccard($.qA, $.qB) }
);

/**
* This function combines all methods above into one flow that has two input data
* sets and generates a mapping for the titles where it could find matches based on
* the threshold as ouput
*/
$fuzzy_join = fn($inA, $inB, $keyA, $keyB, $textA, $textB, $threshold) (
	//Create qgrams for the datasets
	$qA_pre = $gen_qgrams($inA, $keyA, $textA),
	$qB_pre = $gen_qgrams($inB, $keyB, $textB),

	//Generate inverse frequency of qgrams 
	//From smaller dataset is better
	$invmap = $group_by_qgrams($qA_pre),
	$freq = $qgram_freq_map($invmap),

	//Sort by IDF
	$qA = $sort_qgrams_by_freq($qA_pre, $freq),
	$qB =$sort_qgrams_by_freq($qB_pre, $freq),

	//Filter
	$filtered = $filter($qA, $qB, $threshold),

	//Calculate similarities
	$sims = $jaccard($filtered, $qA, $qB),
	
	//Generate mapping
	$sims
	-> group by $.a into (
		singleton($[*]->sort by [$.sim desc]->top 1)
	)
	-> transform { ($keyA): $.a, ($keyB): $.b, $.sim}
	-> filter $.sim >= $threshold
);