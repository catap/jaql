//-------------------------- ATOMS --------------------------------
typeof([]);

typeof({});

typeof("foo");

typeof(true);

typeof(1);

1;
1d;
1m;

1.5;
1.5d;
1.5m;

100e-2;

d'2001-07-04T12:08:56Z';

// an invalid date format
d'12/10/1999';

'a string';

'a string
with a newline';

true;

false;

null;

//-------------------------- ARRAYS -------------------------------
[];

[ 1, 2, 3 ];

[ 'a', 2, 'c' ];

// this one caused a bug with int/long serialization
[d'2007-12-31T16:00:10Z'];

// nulls are fine elements of an array
[ 1, null, 3 ];

//-------------------------- RECORDS ------------------------------
{};

{ x: 1, y: 'b' };

// nulls are fine values of a field
{ x: 1, y: null };

// Field names must be strings or ids
{ x: 1, 3: 2 };

// every field must be named
{a: 1 ,2,3};

// a field can be specified to disappear if its value is null
{a:'foo', b?:null};

//-------------------------- NESTING ------------------------------
[[[[[[[[[[[[]]]]]]]]]]]];

[{a:'some string', b:[{},{y:1, z:42},['a', 'b']]},1,'a string',['another string']];

//-------------------------- ARITH/LOGIC OPS-----------------------

1+2;
1+2d;
1+2m;
1d+2d;
1d+2m;
1m+2m;

1/2;
1/2d;
1/2m;
1d/2d;
1d/2m;
1m/2m;

true or false;

true and true;

true and false;

true or null;

true and null;

false or not null;

// all values are comparable, if not by value then by their type code
'a' > {};

// comparisons are deep 
[1,2,3,{a:'foo', b:['bar']}] == [1,2,3,{a:'foo', b:['bar']}];

// make sure numeric encodings hash and compare properly
distinct( [1, 1d, 1m, 1.5d, 1.5m, 1.50d, 1.50m ] ) -> sort by [$]; // 2 items

1 == 1d; // true
1 == 1m; // true
1d == 1m; // true

1 == 1.5; // false
1 == 1.5m; // false

1.5 == 1.5m; // true

1.11 != 1.10; // true

// make sure array encodings hash and compare properly
distinct( [
  [1,2], 
  range(1,2) -> filter $ > 0,  // [1,2]
  [1,2,3], 
  range(1,3) -> filter $ != 2, // [1,3]
  range(1,3) -> filter $ > 0,  // [1,2,3]
  [1,3]
] ) -> sort by [$]; // 3 items

[1,2] == ( range(1,2) -> filter $ > 0 ); // true

[1,2] == ( range(1,3) -> filter $ != 2 ); // false

[1,3] == ( range(1,3) -> filter $ != 2 ); // true

[1,2] != ( range(1,3) -> filter $ > 0 ); // true

typeof([]) == "array";

typeof("foo") == "record";

//-------------------------- CONDITIONAL --------------------------
if( true ) 1 else 'really?';

// expecting null when the false branch is empty
if( false ) 1;

//-------------------------- ARRAY OPS ----------------------------

// group by field a, returning all records in each group
group [ {a:1, b:'1x'}, {a:2, b:'2x'}, {a:1, b:'1y'}, {a:2, b:'2y'} ] 
   by a = ($.a) as i
 into { a:a, i:i };

// same as above - default 'as' is input expression
i = [ {a:1, b:'1x'}, {a:2, b:'2x'}, {a:1, b:'1y'}, {a:2, b:'2y'} ] ;
group i by a = ($.a) into { a:a, i:i };

// same as above - default 'as' is $
[ {a:1, b:'1x'}, {a:2, b:'2x'}, {a:1, b:'1y'}, {a:2, b:'2y'} ] 
-> group by a = ($.a) into { a:a, i:$ };

// group by field a, returning b's from each group
group [ {a:1, b:'1x'}, {a:2, b:'2x'}, {a:1, b:'1y'}, {a:2, b:'2y'} ] 
   by a = ($.a) as i
 into { a:a, bs: i[*].b };

// Count each distinct value
group [ 1, 1, 1, 2, 2, 3, 3, 3, 3 ] 
   by unique = ($) as i
   into { val: unique, n: count(i) };

// List distinct values
group [ 1, 1, 1, 2, 2, 3, 3, 3, 3 ] 
   by unique = ($) as i
   into unique;

// Count how many evens and odds - use explicit input variable name
group each i in [ 1, 1, 1, 2, 2, 3, 3, 3, 3 ] 
   by g = (mod(i,2)) as j
   into { val:g, n: count(j) };

// cogroup (generalizes inner/outer join for equality predicates)
group
  [ {a:1, b:'b1x'}, {a:2, b:'b2x'}, {a:3, b:'b3x'}, {a:1, b:'b1y'}, {a:2, b:'b2y'} ] 
     by g = ($.a) as i,
  [ {c:1, d:'d1x'}, {c:2, d:'d2x'}, {c:4, d:'d4x'}, {c:1, d:'d1y'}, {c:2, d:'d2y'} ]
     by g = ($.c) as j
  into { g:g, bs:i[*].b, ds:j[*].d };

// This will generate a semantic error because the 'by' names must be unique.
group
  [] by g = ($.a) as is,
  [] by h = ($.c) as js,
  into { g:g, bs:is[*].b, ds:js[*].d };


[ {a:1, b:'1x'}, {a:2, b:'2x'}, {a:1, b:'1y'}, {a:2, b:'2y'} ] 
-> sort by [$.a];

[ {a:2, b:1}, {a:1, b:2}, {a:2, b:2}, {a:1, b:1} ] 
-> sort by [$.a, $.b];

[ {a:2, b:1}, {a:1, b:2}, {a:2, b:2}, {a:1, b:1} ] 
-> sort by [$.b, $.a];

[ {a:2, b:1}, {a:1, b:2}, {a:2, b:2}, {a:1, b:1} ] 
-> sort by [ $ ];

range(1,10000) -> transform {x: [-$,$]} -> top 1 by [$];
range(1,1000) -> top 1 by [{x:[-$,$],y:[$,$]}];
range(1,1000) -> top 1 by [-$,$];
range(1,100) -> top 1 by [{x:[-$,$]}];

//-------------------------- RECORD OPS ---------------------------

pivot = (
   -> transform { $.label: $.value }
   -> record()
   // -> combine( fn($a,$b) remap( $a, $b ) )
);

input = [ { label: "name", value: "joe" },
           { label: "work", value: "acme plumbing" },
           { label: "office", value: "b1" } ];

input -> pivot();

//-------------------------- LET ---------------------------------

( r = { x:1, y:2 },

  { r.x, z: r.y, t: r.x+r.y, r.nope } );

( r = { x:1, y:2 },
  s = {z:3},

  [ r, s ] );

( r = 1,
  r = ( r = r + 10, // 11
        r + 100 ) // 111
      + r, // 112
  r );

//-------------------------- EXPAND ---------------------------------

[ {x:[{a:1},{a:2}], y:2}, {y:3}, {x:[{a:1}]} ]
-> expand $.x;

[ {x:[{a:1},{a:2}], y:2}, {y:3}, {x:[{a:1}]} ]
-> expand [ $.x ];

[ {x:[{a:1},{a:2}], y:2}, {y:3}, {x:[{a:1}]} ]
-> expand $.x
-> transform $.a;

//-------------------------- JOIN ---------------------------------

equijoin i in [ 1, 2, 3 ] on (i),
         j in [ 1, 2, 4 ] on (j) 
into {i, j};

equijoin          i in [ 1, 2, 3 ] on i,
         preserve j in [ 1, 2, 4 ] on j
into {i, j};

equijoin preserve i in [ 1, 2, 3 ] on i,
                  j in [ 1, 2, 4 ] on j
into {i, j};

equijoin preserve i in [ 1, 2, 3 ] on i,
         preserve j in [ 1, 2, 4 ] on j
into {i, j};

join i in [ 1, 2, 3 ],
     j in [ 1, 2, 4 ]
where i == j
into {i, j};

join          i in [ 1, 2, 3 ],
     preserve j in [ 1, 2, 4 ]
where i == j
into {i, j};

join preserve i in [ 1, 2, 3 ],
              j in [ 1, 2, 4 ]
where i == j
into {i, j};

join preserve i in [ 1, 2, 3 ],
     preserve j in [ 1, 2, 4 ]
where i == j
into {i, j};

//-------------------------- FUNCTIONS ----------------------------

// built-ins and call-by-name
compare(1,2);
compare(1,y=2);
compare(x=1,y=2);
compare(y=2,x=1);
compare(1); // fails
compare(1,2,3); // fails
compare(1,x=1); // fails
compare(1,2,x=1); // fails

// jaql functions and call-by-name
f = fn($) $;
f(1);
f($=1);

f = fn(x) x;
f(1);
f(x=1);

f = fn(x,y) compare(x,y);
f(1,2);
f(1,y=2);
f(x=1,y=2);
f(y=2,x=1);
f(1); // fails
f(1,2,3); // fails
f(1,x=1); // fails
f(1,2,x=1); // fails

f = fn(a="a",b="b") [ a, b ];
f();
f("A");
f(a="A");
f("A", "B");
f(b="B");

f = fn(a, b="b", c="c") [ a, b, c ];
f("A");
f(b="B", a="A");

// continuations & multiple call sites:

f = fn(i) [i,i];
(a = f(3), b = f(5), [b,a]); // [ [5,5],[3,3] ]
f(3) -> f(); // [ [3,3], [3,3] ]

// pushing calls down thru do blocks:

(x = 1+2,
 y = x + x,
 fn(z) z + y + y)(1);

// captures:

for(i in range(1,10))
   [[i, fn(j) i + j]]
-> sort by [$[0] desc]
-> transform ($[1])(10);
// [20..11]

( fns = 
   for(i in range(1,3))
     [( j = range(1,9) -> filter $ > 7, 
        fn(k) j -> transform i*100+$*10+k 
     )],
   for( i in (fns[1])(4), 
        j in (fns[2])(5),
        k in (fns[0])(6) )
     [{i,j,k}]
);
// 8 records where x,y,z in [8,9]
// [ { i: 2x4, j:3y5, k:1z6 } ]

// recursion:

search1 = fn(list, item, search2) (
  if( not exists(list) ) null
  else (
    n = count(list),
    m = long(n / 2),
    c = compare(item, list[ m ]),
    if     ( c < 0 ) search2( list[*:m-1], item, search2 )
    else if( c > 0 ) 1 + m + search2( list[m+1:*], item, search2 )
    else             m
  )
);

search = fn(list, item) search1(list, item, search1);

range(1,20) -> search(21); // null
range(1,20) -> search(10); // 9
range(1,20) -> search(1);  // 0
range(1,20) -> search(20); // 19
range(1,20) -> search(0);  // null

reverse1 = fn(list, reverse2) (
  if( exists(list) ) (
    first = list[0],
    rest =  list[1:*],
    append( rest -> reverse2(reverse2), [first] )
  )
);

reverse = fn(list) list -> reverse1(reverse1);

range(1,10) -> reverse(); // 10..1

range(1,10) -> reverse() -> reverse(); // 1..10

sieve1 = fn(list, sieve2) (
  if( exists(list) ) (
    first = list[0],
    rest =  list[1:*],
    append( [first], rest -> filter mod($,first) != 0 -> sieve2(sieve2) )
  )
);

primes = fn(max) append([1], range(2,max) -> sieve1(sieve1));

primes(100);

fib1 = fn(i,fib2) if( i <= 1 ) i else fib2(i-1,fib2) + fib2(i-2,fib2);
fib = fn(i) fib1(i,fib1);
range(0,11) -> transform fib($);


//-------------------------- QUIT ---------------------------------

quit;

