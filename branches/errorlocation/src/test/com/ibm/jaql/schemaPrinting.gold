
;//------------------- TEST-CASE -----------------
// tests printing with the schema-aware serializer

{ a: true, d:4, b: 2, c:3 };

;//--------------------- RESULT ------------------

{
  "a": true,
  "d": 4,
  "b": 2,
  "c": 3
}

;//------------------- TEST-CASE -----------------

{ a: true, d:4, b: 2, c:3 } -> assert(schema { d,c,a: boolean,b });

;//--------------------- RESULT ------------------

{
  "d": 4,
  "c": 3,
  "a": true,
  "b": 2
}

;//------------------- TEST-CASE -----------------

{ a: true, d:4, b: 2, c:3 } -> assert(schema { d,c,a: boolean,b, * });

;//--------------------- RESULT ------------------

{
  "d": 4,
  "c": 3,
  "a": true,
  "b": 2
}

;//------------------- TEST-CASE -----------------

{ a: true, d:4, b: 2, c:3 } -> assert(schema { c,a: boolean,* });

;//--------------------- RESULT ------------------

{
  "c": 3,
  "a": true,
  "b": 2,
  "d": 4
}

;//------------------- TEST-CASE -----------------

  
[ { a: true, d:4, b: 2, c:3 }, { a: true, d:4, c: 3, b:2 } ];

;//--------------------- RESULT ------------------

[
  {
    "a": true,
    "d": 4,
    "b": 2,
    "c": 3
  },
  {
    "a": true,
    "d": 4,
    "c": 3,
    "b": 2
  }
]

;//------------------- TEST-CASE -----------------

[ { a: true, d:4, b: 2, c:3 }, { a: true, d:4, c: 3, b:2 } ] -> assert(schema [ { d,c,a,b }, { a, b, d, c} ]);

;//--------------------- RESULT ------------------

[
  {
    "d": 4,
    "c": 3,
    "a": true,
    "b": 2
  },
  {
    "a": true,
    "b": 2,
    "d": 4,
    "c": 3
  }
]

;//------------------- TEST-CASE -----------------

  

;//------------------- TEST-DONE -----------------
