jaqltemp("tempfile", schema null);
r = fn(schema) read(jaqltemp("tempfile", schema));
w = fn(what, schema) what -> write(jaqltemp("tempfile", schema));

// -- test schema reporting of read ---------------------------------------------------------------

schemaof(read(jaqltemp("tempfile", schema null | long | nonnull)));

// BELOW: COMMENTED OUT BECAUSE ONLY WORKS WITH REWRITE

//s = schema null | long | nonnull;
//schemaof(read(jaqltemp("tempfile", s)));

//schemaof(r(schema null | long | nonnull));


// -- null ----------------------------------------------------------------------------------------

s = schema null;
( [ ] -> w(s), r(s) );
( [ null, null ] -> w(s), r(s) );
( [ null, null, null ] -> w(s), r(s) );
[ 1 ] -> w(s); // should fail


// -- nonnull -----------------------------------------------------------------------------------------

s = schema nonnull;
( [ 1, "abc", { a: 5 }, [ 1, true ] ] -> w(s), r(s) );
[ null ] -> w(s); // should fail


// -- boolean -------------------------------------------------------------------------------------

s = schema boolean;
( [ true, false, true ] -> w(s), r(s) );

s = schema boolean(value = true);
( [ true, true ] -> w(s), r(s) );
[ true, false ] -> w(s); // should fail


// -- long ----------------------------------------------------------------------------------------

s = schema long;
( [ -9223372036854775807-1, 0, 9223372036854775807 ] -> w(s), r(s) );
[ 1d ] -> w(s); // should fail: non-integer
[ 1m ] -> w(s); // should fail: non-integer

s = schema long(22);
( [ 22, 22, 22 ] -> w(s), r(s) );
[ -101 ] -> w(s); // should fail


// -- decfloat ------------------------------------------------------------------------------------

s = schema decfloat;
( [ -9223372036854775808m, 0.5m, 9223372036854775807m ] -> w(s), r(s) );
[ 1 ] -> w(s);   // should fail: non-decimal
[ 1.0 ] -> w(s); // should fail: non-decimal

s = schema decfloat(22m);
( [ 22m, 22m, 22m ] -> w(s), r(s) );
[ -101m ] -> w(s); // should fail


// -- double --------------------------------------------------------------------------------------

s = schema double;
( [ -9223372036854775807d-1d, 0.5d, 9223372036854775807d ] -> w(s), r(s) );
[ 1 ] -> w(s);   // should fail: non-double
[ 1m ] -> w(s);  // should fail: non-double

s = schema double(22d);
( [ 22d, 22d, 22d ] -> w(s), r(s) );
[ -101d ] -> w(s); // should fail


// -- string --------------------------------------------------------------------------------------

s = schema string;
( [ "abc", "", "!@#dsggb34" ] -> w(s), r(s) );
[ 1 ] -> w(s); // should fail

s = schema string(value="abc");
( [ "abc", "abc", "abc" ] -> w(s), r(s) );
[ "abd" ] -> w(s); // should fail

s = schema string(2);
( [ "ab", "ac", "ad" ] -> w(s), r(s) );
[ "a" ] -> w(s); // should fail
[ "abd" ] -> w(s); // should fail

// -- binary --------------------------------------------------------------------------------------

s = schema binary;
( [ hex(""), hex("11"), hex("11AA") ] -> w(s), r(s) );
[ "" ] -> w(s); // should fail

s = schema binary(value=hex("11"));
( [ hex("11"), hex("11"), hex("11") ] -> w(s), r(s) );
[ hex("12") ] -> w(s); // should fail

s = schema binary(2);
( [ hex("1111"), hex("2222"), hex("FFFF") ] -> w(s), r(s) );
[ hex("11") ] -> w(s); // should fail
[ hex("112233") ] -> w(s); // should fail


// -- date ----------------------------------------------------------------------------------------

s = schema date;
( [ date('2000-01-01T11:59:59Z'), date('2000-01-01T12:00:00Z'), date('2000-01-01T12:00:01Z') ] -> w(s), r(s) );
[ 1 ] -> w(s); // should fail

s = schema date(date('2000-01-01T11:59:59Z'));
( [ date('2000-01-01T11:59:59Z'), date('2000-01-01T11:59:59Z'), date('2000-01-01T11:59:59Z') ] -> w(s), r(s) );
[ date('2000-01-01T11:59:60Z') ] -> w(s); // should fail


// -- functions -----------------------------------------------------------------------------------

s = schema function;
( [ fn(x) x ] -> w(s), r(s) );
[ schema long ] -> w(s); // should fail


// -- schema --------------------------------------------------------------------------------------

s = schema schematype;
( [ schema long, schema [ long, boolean * ], schema null ] -> w(s), r(s) );
[ fn(x) x ] -> w(s); // should fail

s = schema schematype(schema long);
( [ schema long, schema long ] -> w(s), r(s) );
[ schema boolean ] -> w(s); // should fail


// -- arrays --------------------------------------------------------------------------------------

s = schema [ ];
( [ [], [], [] ] -> w(s), r(s) );
[ [1] ] -> w(s); // should fail

s = schema [ * ];
( [ [], [0], [1,"a"], [2,"b",true], [3,"c",null] ] -> w(s), r(s) );
[ 1 ] -> w(s); // should fail

s = schema [ long, boolean ];
( [ [1,true], [2,false], [3,true] ] -> w(s), r(s) );
[ [1] ] -> w(s); // should fail
[ [1,true,0] ] -> w(s); // should fail
[ [true,1] ] -> w(s); // should fail
[ [1,1] ] -> w(s); // should fail
[ [true,true] ] -> w(s); // should fail

s = schema [ long * ];
( [ [1], [1,2], [1,2,3] ] -> w(s), r(s) );
[ [true,true] ] -> w(s); // should fail

s = schema [ string, long * ];
( [ ["1"], ["3",4], ["4",5,6] ] -> w(s), r(s) );
[ [] ] -> w(s); // should fail
[ [ 1,2,3,4 ] ] -> w(s); // should fail


// -- records -------------------------------------------------------------------------------------

// empty record
s = schema { };
( [ {}, {}, {} ] -> w(s), r(s) );
[ { a: 1 } ] -> w(s); // should fail

// only required fields
s = schema { b: boolean, a: long, c:string };
( [ { a:1, b:true, c:"!" }, { a:-1, c:"?", b:false } ] -> w(s), r(s) );
[ {} ] -> w(s); // should fail
[ { a:1, b:true, c:"!",d:null } ] -> w(s); // should fail
[ { a:true, b:true, c:"!"} ] -> w(s); // should fail
[ { a:1, b:1, c:"!"} ] -> w(s); // should fail
[ { a:1, b:true, c:true} ] -> w(s); // should fail

// only optional fields
s = schema { b?: boolean, a?: long, c?:string };
( [ {}, { a:1, c:"!", b:true }, { a:-1 }, { a:-1, c:"!" } ] -> w(s), r(s) );
[ { a:1, b:true, c:"!",d:null } ] -> w(s); // should fail
[ { a:null, b:true, c:"!"} ] -> w(s); // should fail
[ { a:1, b:null, c:"!"} ] -> w(s); // should fail
[ { a:1, b:true, c:null} ] -> w(s); // should fail

// only rest fields
s = schema { *: long };
( [ {}, { a:1, c:3, b:2 }, { a:-1 }, { a:-1, c:2 } ] -> w(s), r(s) );
[ { a: null } ] -> w(s); // should fail

// wild mix
s = schema { a: boolean, b?: long, d:string, f?:null, *:double };
( [ { a: true, d:"!" }, { a: true, d:"!", b: 1 }, 
    { a: true, d:"!", f:null }, { a: true, d:"!", f:null, b:3 },
    { a: true, d:"!", c:1d }, { a: true, d:"!", b: 1, c:1d, e:1d }, 
    { a: true, d:"!", f:null, "0":1d, g:2d }, { a: true, d:"!", f:null, b:3, c:1d },
    {a: true, d: "d", "0": 1d, "c":2d, "g":3d }
    ] -> w(s), r(s) );
[ { a:true, d:null } ] -> w(s); // should fail
[ { a:null, d:"!" } ] -> w(s); // should fail
[ { a: true, d:"!", b:null } ] -> w(s); // should fail
[ { a: true, d:"!", e:null } ] -> w(s); // should fail

s = schema { a: long, b: long, c: long, *: long };
( [ { d:4, e:5, a: 1, b:2, c:3 } ] -> w(s), r(s) ); 


// -- or ------------------------------------------------------------------------------------------

s = schema long | decfloat;
( [ -1.5m, -1m, 0m, 1, 0 ] -> w(s), r(s) );
[ null ]  -> w(s); // should fail
[ 1d ]    -> w(s); // should fail

s = schema long(0) | decfloat(0m) | nonnull;
( [ -1.5m, -1m, 0m, 1, 0, 1m, 1.5, -1 ] -> w(s), r(s) );
[ null ]  -> w(s); // should fail

s = schema long(0) | decfloat(0m) | any;
( [ -1.5m, -1m, 0m, 1, 0, 1m, 1.5, -1, null ] -> w(s), r(s) );


// -- binary comparison ---------------------------------------------------------------------------

// hack: sort using MR and one reducer (enforces usage of binary comparators)
sort = fn(what, schema) (
    what -> write(jaqltemp("tempfile", schema)),
    mapReduce({
        input: jaqltemp("tempfile", schema),
        output: jaqltemp("tempfile_sorted", schema),
        map: fn($) $ -> transform [$, null],
        reduce: fn(k, v) [ k ],
        schema: { key: schema, value: schema null }
    }),
    read(jaqltemp("tempfile_sorted", schema))
); 

// single schemata
sort([ 23512, -45346, 0,  9223372036854775807, -9223372036854775807-1 ], schema long);
sort([ 23512d, -45346d, 0d, 9223372036854775807d, -9223372036854775809d ], schema double);
sort([ 23512m, -45346m, 0m, 0.002m, 0.001m, 9223372036854775807m, -9223372036854775808m ], schema decfloat);
sort([ "abcc", "abc", "bcd", "abcd" ], schema string);
sort([ true, false ], schema boolean);
sort([ date('2000-01-01T11:59:59Z'), date('2000-01-01T12:00:01Z'), date('2000-01-01T12:00:00Z'), ], schema date);
sort([ hex("abcc"), hex("abc0"), hex("bcd0"), hex("abcd") ], schema binary);

// arrays
sort([ [5], [4], [1], [3], [2] ], schema [ long ]);
sort([ [1], [2,2], [2,3], [2], [], [1,2], [1,1] ], schema [ long * ]);
sort([ [3, false], [3, true], [1, true], [1, false], [2,false], [2, true] ], schema [ long, boolean ]);
sort([ [3, false], [3, true], [1, true], [1, false], [2,false], [2, true] ], schema [ long, boolean * ]);

// records
sort([ {a: 5}, {a: 4}, {a:1}, {a:3}, {a:2} ], schema { a:long });
sort([ {a: 5}, {a: 4}, {a:1}, {a:3}, {a:2} ], schema { a?:long });
sort([ {a: 5}, {a: 4}, {a:1}, {a:3}, {a:2}, {} ], schema { *:long });

sort([ {c: 5}, {d: 4}, {b:1}, {c:3}, {c:2}, {} ], schema { *:long });
sort([ {b: 1}, {b: 1, c:1}, {b:1, c:0}, {b:2}, {b:0}, {} ], schema { *:long });

sort([ {b: 1, c:1m}, {b: 1, c:2m}, {b:1, c:0m}, {b:2}, {b:0} ], schema { b:long, c?:decfloat });
sort([ {b: 1, c:1m}, {b: 1, c:2m}, {b:1, c:0m}, {b:2}, {b:0} ], schema { b?:long, c?:decfloat });
sort([ {b: 1, c:1m}, {b: 1, c:2m}, {b:1, c:0m}, {b:2}, {b:0} ], schema { b:long, *:decfloat });
sort([ {b: 1, c:1m}, {b: 1, c:2m}, {b:1, c:0m}, {b:2}, {b:0} ], schema { b?:long, *:decfloat });

sort([ {c: 1, b:1m}, {c: 1, b:2m}, {c:1, b:0m}, {c:2}, {c:0} ], schema { b?:decfloat, c:long });
sort([ {c: 1, b:1m}, {c: 1, b:2m}, {c:1, b:0m}, {c:2}, {c:0} ], schema { b?:decfloat, c?:long });
sort([ {c: 1, b:1m}, {c: 1, b:2m}, {c:1, b:0m}, {c:2}, {c:0} ], schema { c:long, *:decfloat });
sort([ {c: 1, b:1m}, {c: 1, b:2m}, {c:1, b:0m}, {c:2}, {c:0} ], schema { c?:long, *:decfloat });

// encodings
sort([ 1, 3, 2, "b", "a", "c", false, true, null ], schema long | boolean | string | null );
sort([ 1, 3, 2, "b", "a", "c", false, true, null, {}, [] ], schema long | boolean(true) | string | any );

