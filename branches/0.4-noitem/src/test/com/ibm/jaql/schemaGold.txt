// -- parsing and matching: simple schemata -------------------------------------------------------

$x = schema null;##
"$x"

$x;##
schema null

null instanceof $x;##
true

1 instanceof $x;##
false
   // incompatible

$x = schema *;##
"$x"

$x;##
schema *

null instanceof $x;##
true

1 instanceof $x;##
true


$x = schema function;##
"$x"

$x;##
schema function

(fn($) $) instanceof $x;##
true

1 instanceof $x;##
false
  // incompatible


// -- parsing and matching: boolean ---------------------------------------------------------------

$x = schema boolean;##
"$x"

$x;##
schema boolean

true instanceof $x;##
true

false instanceof $x;##
true

1 instanceof $x;##
false
        // incompatible

$x = schema boolean(true);##
"$x"

$x;##
schema boolean(value=true)

true instanceof $x;##
true

false instanceof $x;##
false
    // incompatible

$x = schema boolean(false);##
"$x"

$x;##
schema boolean(value=false)

true instanceof $x;##
false
     // incompatible
false instanceof $x;##
true
 



// -- parsing and matching: long ------------------------------------------------------------------

$x = schema long;##
"$x"

$x;##
schema long

1 instanceof $x;##
true

1.0 instanceof $x;##
true

1.1 instanceof $x;##
false
 // incompatible
1d instanceof $x;##
false
  // incompatible
"a" instanceof $x;##
false
 // incompatible

$x = schema long(5);##
"$x"

$x;##
schema long(min=5)

4 instanceof $x;##
false
  // incompatible
5 instanceof $x;##
true

6 instanceof $x;##
true


$x = schema long(max=5);##
"$x"

$x;##
schema long(max=5)

4 instanceof $x;##
true
  
5 instanceof $x;##
true

6 instanceof $x;##
false
 // incompatible

$x = schema long(-1,1);##
"$x"

$x;##
schema long(min=-1, max=1)

-2 instanceof $x;##
false
 // incompatible
-1 instanceof $x;##
true

0 instanceof $x;##
true

1 instanceof $x;##
true

2 instanceof $x;##
false
 // incompatible

$x = schema long(value=5);##
"$x"

$x;##
schema long(value=5)

4 instanceof $x;##
false
  // incompatible
5 instanceof $x;##
true

6 instanceof $x;##
false
  // incompatible


// TODO: uncomment next line when parser is fixed to accept Long.MIN
// schema long(-9223372036854775808, 9223372036854775807); // should work: long range
schema long(max=9223372036854775808)##
FAILURE
; // must fail: too large argument
schema long(min=-9223372036854775809,##
FAILURE
 *); // must fail: too large argument
schema long(5,3)##
FAILURE
; // must fail: invalid interval
schema long(5d)##
FAILURE
; // must fail: invalid argument
schema long(5.0);##
schema long(min=5)
 // should be ok
schema long(5.1)##
FAILURE
; // must fail: invalid argument
schema long(5, value=4)##
FAILURE
; // must fail: invalid argument


// -- parsing and matching: double ----------------------------------------------------------------

$x = schema double;##
"$x"

$x;##
schema double

1d instanceof $x;##
true

1 instanceof $x;##
false
   // incompatible
1.0 instanceof $x;##
false
 // incompatible
1.1 instanceof $x;##
false
 // incompatible
"a" instanceof $x;##
false
 // incompatible

$x = schema double(5d);##
"$x"

$x;##
schema double(min=5.0d)

4d instanceof $x;##
false
  // incompatible
5d instanceof $x;##
true

5.001d instanceof $x;##
true


$x = schema double(max=5d);##
"$x"

$x;##
schema double(max=5.0d)

4d instanceof $x;##
true
  
5d instanceof $x;##
true

5.001d instanceof $x;##
false
 // incompatible

$x = schema double(-1d,1d);##
"$x"

$x;##
schema double(min=-1.0d, max=1.0d)

-1.001d instanceof $x;##
false
 // incompatible
-1d instanceof $x;##
true

0d instanceof $x;##
true

1d instanceof $x;##
true

1.001d instanceof $x;##
false
 // incompatible

$x = schema double(value=5d);##
"$x"

$x;##
schema double(value=5.0d)

4.999d instanceof $x;##
false
  // incompatible
5d instanceof $x;##
true

5.001d instanceof $x;##
false
  // incompatible

schema double(5d,3d)##
FAILURE
; // must fail: invalid interval
schema double(5)##
FAILURE
; // must fail: invalid argument
schema double(5.0)##
FAILURE
; // must fail: invalid argument
schema double(5.1)##
FAILURE
; // must fail: invalid argument
schema double(5d, value=4d)##
FAILURE
; // must fail: invalid argument

// -- parsing and matching: decfloat --------------------------------------------------------------

$x = schema decfloat;##
"$x"

$x;##
schema decfloat

1 instanceof $x;##
true
   
1.1 instanceof $x;##
true

1d instanceof $x;##
false
 // incompatible
"a" instanceof $x;##
false
 // incompatible

$x = schema decfloat(5);##
"$x"

$x;##
schema decfloat(min=5)

4 instanceof $x;##
false
  // incompatible
5 instanceof $x;##
true

5.001 instanceof $x;##
true


$x = schema decfloat(max=5);##
"$x"

$x;##
schema decfloat(max=5)

4 instanceof $x;##
true
  
5 instanceof $x;##
true

5.001 instanceof $x;##
false
 // incompatible

$x = schema decfloat(-1,1);##
"$x"

$x;##
schema decfloat(min=-1, max=1)

-1.001 instanceof $x;##
false
 // incompatible
-1 instanceof $x;##
true

0 instanceof $x;##
true

1 instanceof $x;##
true

1.001 instanceof $x;##
false
 // incompatible

$x = schema decfloat(value=5);##
"$x"

$x;##
schema decfloat(value=5)

4.999 instanceof $x;##
false
  // incompatible
5 instanceof $x;##
true

5.001 instanceof $x;##
false
  // incompatible

// TODO: uncomment next line when parser is fixed to accept big decimals
// schema decfloat(-9223372036854775809, 9223372036854775808); // should work (outside long range)
schema decfloat(5,3)##
FAILURE
; // must fail: invalid interval
schema decfloat(5d)##
FAILURE
; // must fail: invalid argument
schema decfloat(5, value=4d)##
FAILURE
; // must fail: invalid argument


// -- parsing and matching: date ------------------------------------------------------------------

$x = schema date;##
"$x"

$x;##
schema date

d'2000-01-01T12:00:00Z' instanceof $x;##
true

'2000-01-01T12:00:00Z' instanceof $x;##
false
 // incompatible, that's a string

$x = schema date(d'2000-01-01T12:00:00Z');##
"$x"

$x;##
schema date(min=d'2000-01-01T12:00:00Z')

d'2000-01-01T11:59:59Z' instanceof $x;##
false
  // incompatible
d'2000-01-01T12:00:00Z' instanceof $x;##
true

d'2000-01-01T12:00:01Z' instanceof $x;##
true


$x = schema date(max=d'2000-01-01T12:00:00Z');##
"$x"

$x;##
schema date(max=d'2000-01-01T12:00:00Z')

d'2000-01-01T11:59:59Z' instanceof $x;##
true
  
d'2000-01-01T12:00:00Z' instanceof $x;##
true

d'2000-01-01T12:00:01Z' instanceof $x;##
false
   // incompatible

$x = schema date(d'2000-01-01T12:00:00Z', d'2000-02-01T12:00:00Z');##
"$x"

$x;##
schema date(min=d'2000-01-01T12:00:00Z', max=d'2000-02-01T12:00:00Z')

d'2000-01-01T11:59:59Z' instanceof $x;##
false
  // incompatible
d'2000-01-01T12:00:00Z' instanceof $x;##
true

d'2000-01-02T13:00:00Z' instanceof $x;##
true

d'2000-02-01T12:00:00Z' instanceof $x;##
true

d'2000-02-01T12:00:01Z' instanceof $x;##
false
   // incompatible

$x = schema date(value=d'2000-01-01T12:00:00Z');##
"$x"

$x;##
schema date(value=d'2000-01-01T12:00:00Z')

d'2000-01-01T11:59:59Z' instanceof $x;##
false
   // incompatible
d'2000-01-01T12:00:00Z' instanceof $x;##
true

d'2000-01-01T12:00:01Z' instanceof $x;##
false
   // incompatible

schema date(d'2000-01-01T12:00:00Z', d'2000-01-01T11:00:00Z')##
FAILURE
; // must fail: invalid interval
schema date(d'2000-01-01T12:00:00Z', value=d'2000-01-01T11:00:00Z')##
FAILURE
; // must fail: invalid argument


// -- parsing and matching: string ----------------------------------------------------------------

$x = schema string;##
"$x"

$x;##
schema string

"1" instanceof $x;##
true

1 instanceof $x;##
false


$x = schema string(5);##
"$x"

$x;##
schema string(minLength=5)

"1234" instanceof $x;##
false
  // incompatible
"12345" instanceof $x;##
true

"123456" instanceof $x;##
true


$x = schema string(maxLength=5);##
"$x"

$x;##
schema string(maxLength=5)

"1234" instanceof $x;##
true

"12345" instanceof $x;##
true

"123456" instanceof $x;##
false
  // incompatible

$x = schema string(4,6);##
"$x"

$x;##
schema string(minLength=4, maxLength=6)

"123" instanceof $x;##
false
  // incompatible
"1234" instanceof $x;##
true

"12345" instanceof $x;##
true

"123456" instanceof $x;##
true

"1234567" instanceof $x;##
false
  // incompatible

schema string(-1)##
FAILURE
; // must fail: invalid interval
schema string(5,3)##
FAILURE
; // must fail: invalid interval

$x = schema string(pattern="ba*b");##
"$x"

$x;##
schema string(pattern="ba*b")

"baaab" instanceof $x;##
true

"babab" instanceof $x;##
false
  // incompatible

$x = schema string(value="ba*b");##
"$x"

$x;##
schema string(value="ba*b")

"ba*b" instanceof $x;##
true

"baaab" instanceof $x;##
false
  // incompatible


schema string(5, pattern="[ab]*");##
schema string(minLength=5, pattern="[ab]*")

schema string(5, 10, pattern="[ab]*");##
schema string(minLength=5, maxLength=10, pattern="[ab]*")

schema string("abc[")##
FAILURE
; // must fail: invalid pattern 


// -- parsing and matching: binary ----------------------------------------------------------------

schema binary;##
schema binary

schema binary(5);##
schema binary(minLength=5)

schema binary(maxLength=5);##
schema binary(maxLength=5)

schema binary(4,6);##
schema binary(minLength=4, maxLength=6)

schema binary(-1)##
FAILURE
; // must fail: invalid interval
schema binary(5,3)##
FAILURE
; // must fail: invalid interval


// -- parsing and matching: arrays ----------------------------------------------------------------

$x = schema [];##
"$x"

$x;##
schema []

[] instanceof $x;##
true

[ null ] instanceof $x;##
false
    // incompatible
1 instanceof $x;##
false
           // incompatible
{} instanceof $x;##
false
          // incompatible

$x = schema [ null ];##
"$x"

$x;##
schema [
         null
       ]

[ null ] instanceof $x;##
true

null instanceof $x;##
false
       // incompatible
[] instanceof $x;##
false
       // incompatible
[ 1 ] instanceof $x;##
false
    // incompatible

$x = schema [ long(0,10), string(pattern="a*"), boolean ];##
"$x"

$x;##
schema [
         long(min=0, max=10),
         string(pattern="a*"),
         boolean
       ]

[ 1, "a", true ] instanceof $x;##
true

[ 1, "a", true, 1 ] instanceof $x;##
false
  // incompatible
[ 11, "a", true ] instanceof $x;##
false
  // incompatible
[ 1, "b", true ] instanceof $x;##
false
   // incompatible
[ 1, "a", null ] instanceof $x;##
false
   // incompatible

$x = schema [ long, boolean<2,3> ];##
"$x"

$x;##
schema [
         long,
         boolean<2, 3>
       ]

[ 1, true ] instanceof $x;##
false
 // incompatible
[ 1, true, true ] instanceof $x;##
true

[ 1, true, true, true ] instanceof $x;##
true

[ 1, true, true, true, true ] instanceof $x;##
false
 // incompatible

$x = schema [ long, boolean* ];##
"$x"

$x;##
schema [
         long,
         boolean*
       ]

[ 1 ] instanceof $x;##
true
 
[ 1, true ] instanceof $x;##
true

[ 1, true, true ] instanceof $x;##
true
  
[ 1, 1 ] instanceof $x;##
false
 // incompatible

$x = schema [ long, boolean+ ];##
"$x"

$x;##
schema [
         long,
         boolean+
       ]

[ 1 ] instanceof $x;##
false
  // incompatible
[ 1, true ] instanceof $x;##
true

[ 1, true, true ] instanceof $x;##
true
  
[ 1, 1 ] instanceof $x;##
false
 // incompatible

$x = schema [ long, boolean<2,*> ];##
"$x"

$x;##
schema [
         long,
         boolean<2, *>
       ]

[ 1 ] instanceof $x;##
false
  // incompatible
[ 1, true ] instanceof $x;##
false
  // incompatible
[ 1, true, true ] instanceof $x;##
true

[ 1, true, true, true ] instanceof $x;##
true
    
[ 1, 1 ] instanceof $x;##
false
 // incompatible

$x = schema [ long, boolean<*,2> ];##
"$x"

$x;##
schema [
         long,
         boolean<0, 2>
       ]

[ 1 ] instanceof $x;##
true
  
[ 1, true ] instanceof $x;##
true
  
[ 1, true, true ] instanceof $x;##
true

[ 1, true, true, true ] instanceof $x;##
false
 // incompatible    
[ 1, 1 ] instanceof $x;##
false
 // incompatible


schema [ null* ];##
schema [
         null*
       ]

schema [ null+ ];##
schema [
         null+
       ]

schema [ null<0> ];##
schema []

schema [ null<5> ];##
schema [
         null<5>
       ]

schema [ null<5,10> ];##
schema [
         null<5, 10>
       ]

schema [ null<5,*> ];##
schema [
         null<5, *>
       ]

schema [ null<*,5> ];##
schema [
         null<0, 5>
       ]

schema [ null<*,*> ];##
schema [
         null*
       ]

schema [ null<-1> ]##
FAILURE
; // must fail: invalid interval
schema [ null<5,3> ]##
FAILURE
; // must fail: invalid interval

schema [ long(0,10)* ];##
schema [
         long(min=0, max=10)*
       ]

schema [ long(0,10)+ ];##
schema [
         long(min=0, max=10)+
       ]

schema [ long(0,10)<0> ];##
schema []

schema [ long(0,10)<5> ];##
schema [
         long(min=0, max=10)<5>
       ]

schema [ long(0,10)<5,10> ];##
schema [
         long(min=0, max=10)<5, 10>
       ]

schema [ long(0,10)<5,*> ];##
schema [
         long(min=0, max=10)<5, *>
       ]

schema [ long(0,10)<*,5> ];##
schema [
         long(min=0, max=10)<0, 5>
       ]

schema [ long(0,10)<*,*> ];##
schema [
         long(min=0, max=10)*
       ]

schema [ long(0,10)<-1> ]##
FAILURE
; // must fail: invalid interval
schema [ long(0,10)<5,3> ]##
FAILURE
; // must fail: invalid interval

schema [ long(5,3)##
FAILURE
 ]; // must fail: invalid internal schema


// -- parsing and matching: records ---------------------------------------------------------------

$x = schema {};##
"$x"

$x;##
schema {}

{} instanceof $x;##
true

[] instanceof $x;##
false
               // incompatible
{ a: null } instanceof $x;##
false
      // incompatible
1 instanceof $x;##
false
                // incompatible

$x = schema { a };##
"$x"

$x;##
schema {
         "a": *
       }

{ a: 1 } instanceof $x;##
true

{ "a": 1 } instanceof $x;##
true

{ } instanceof $x;##
false
              // incompatible
{ a: 1, b: 1 } instanceof $x;##
false
   // incompatible
{ b: 1 } instanceof $x;##
false
         // incompatible

$x = schema { "a" };##
"$x"

$x;##
schema {
         "a": *
       }

{ a: 1 } instanceof $x;##
true

{ "a": 1 } instanceof $x;##
true

{ } instanceof $x;##
false
              // incompatible
{ b: 1 } instanceof $x;##
false
         // incompatible

$x = schema { a? };##
"$x"

$x;##
schema {
         "a"?: *
       }

{ } instanceof $x;##
true
 
{ a: 1 } instanceof $x;##
true
 
{ b: 1 } instanceof $x;##
false
         // incompatible

$x = schema { a: long };##
"$x"

$x;##
schema {
         "a": long
       }

{ a: 1 } instanceof $x;##
true

{ a: "1" } instanceof $x;##
false
       // incompatible

$x = schema { a: * };##
"$x"

$x;##
schema {
         "a": *
       }

{ a: 1 } instanceof $x;##
true

{ a: "1" } instanceof $x;##
true


$x = schema { * };##
"$x"

$x;##
schema {
         *: *
       }

{ } instanceof $x;##
true

{ a: 1 } instanceof $x;##
true

{ a: 1, b: 1 } instanceof $x;##
true


$x = schema { a: long, * };##
"$x"

$x;##
schema {
         "a": long,
         *: *
       }

{ a: 1 } instanceof $x;##
true

{ a: 1, b: 1 } instanceof $x;##
true

{ b: 1 } instanceof $x;##
false
         // incompatible

$x = schema { a?: long, * };##
"$x"

$x;##
schema {
         "a"?: long,
         *: *
       }

{ a: 1 } instanceof $x;##
true

{ a: 1, b: 1 } instanceof $x;##
true

{ b: 1 } instanceof $x;##
true

{ a: "1" } instanceof $x;##
false
       // incompatible

$x = schema { a: long, *: long };##
"$x"

$x;##
schema {
         "a": long,
         *: long
       }

{ a: 1 } instanceof $x;##
true

{ a: 1, b: 1 } instanceof $x;##
true

{ a: 1, b: "1" } instanceof $x;##
false
 // incompatible

$x = schema { a?: long, *: string };##
"$x"

$x;##
schema {
         "a"?: long,
         *: string
       }

{ a: 1 } instanceof $x;##
true

{ a: 1, b: "1" } instanceof $x;##
true

{ b: "1" } instanceof $x;##
true

{ a: "1" } instanceof $x;##
false
       // incompatible

// keyword checks
// schema { for }; // does not work currently 
schema { for: * };##
schema {
         "for": *
       }

schema { "for" };##
schema {
         "for": *
       }

// schema { null }; // does not work currently
schema { null: * };##
schema {
         "null": *
       }
 // treated as "null"

schema { "1" };##
schema {
         "1": *
       }

schema { 1:##
FAILURE
 * }; // must fail: invalid field name (numbers must be quoted)
schema { *, * }##
FAILURE
; // must fail: wildcard field occurs twice
schema { a, b, c, a, * }##
FAILURE
; // must fail: field name occurs twice


// -- parsing and matching: alternatives ----------------------------------------------------------

$x = schema null?;##
"$x"

$x;##
schema null

null instanceof $x;##
true

1 instanceof $x;##
false
        // incompatible

$x = schema long?;##
"$x"

$x;##
schema long?

null instanceof $x;##
true

1 instanceof $x;##
true
        
"1" instanceof $x;##
false
      // incompatible

$x = schema null | long;##
"$x"

$x;##
schema long?

null instanceof $x;##
true

1 instanceof $x;##
true
        
"1" instanceof $x;##
false
      // incompatible

$x = schema string(pattern="a*") | string(pattern="b*") | long;##
"$x"

$x;##
schema string(pattern="a*") | string(pattern="b*") | long

"aaa" instanceof $x;##
true

"bbb" instanceof $x;##
true

1 instanceof $x;##
true

null instanceof $x;##
false
     // incompatible
"c" instanceof $x;##
false
      // incompatible


$x = schema string(pattern="a*") | string(pattern="b*") | long?;##
"$x"

$x;##
schema string(pattern="a*") | string(pattern="b*") | long?

"aaa" instanceof $x;##
true

"bbb" instanceof $x;##
true

1 instanceof $x;##
true

null instanceof $x;##
true

"c" instanceof $x;##
false
      // incompatible


//-------------------------- SCHEMAOF -----------------------------

schemaof(null);##
schema null

schemaof(false);##
schema boolean(value=false)

schemaof(1);##
schema long(value=1)

schemaof(1d);##
schema double(value=1.0d)

schemaof(1.0);##
schema decfloat(value=1.0)

schemaof("a string");##
schema string(value="a string")

schemaof(d'2001-07-04T12:08:56Z');##
schema date(value=d'2001-07-04T12:08:56Z')

schemaof({ a: 1, b: "2" });##
schema *

schemaof([ 1, "2" ]);##
schema [
         long(value=1),
         string(value="2")
       ]


//-------------------------- QUIT ---------------------------------

quit;